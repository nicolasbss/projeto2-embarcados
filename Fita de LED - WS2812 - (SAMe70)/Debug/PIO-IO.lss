
PIO-IO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006350  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406350  00406350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000043c  20400000  00406358  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000130  2040043c  00406794  0002043c  2**2
                  ALLOC
  4 .stack        00002004  2040056c  004068c4  0002043c  2**0
                  ALLOC
  5 .heap         00000200  20402570  004088c8  0002043c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  8 .debug_info   000118ed  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001953  00000000  00000000  00031db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004cec  00000000  00000000  00033703  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000880  00000000  00000000  000383ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e0  00000000  00000000  00038c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001c7b8  00000000  00000000  0003944f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008be0  00000000  00000000  00055c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008badc  00000000  00000000  0005e7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002628  00000000  00000000  000ea2c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	70 25 40 20 09 0f 40 00 b9 0f 40 00 b9 0f 40 00     p%@ ..@...@...@.
  400010:	b9 0f 40 00 b9 0f 40 00 b9 0f 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b9 0f 40 00 b9 0f 40 00 00 00 00 00 b9 0f 40 00     ..@...@.......@.
  40003c:	b9 0f 40 00 b9 0f 40 00 b9 0f 40 00 b9 0f 40 00     ..@...@...@...@.
  40004c:	b9 0f 40 00 b9 0f 40 00 b9 0f 40 00 b9 0f 40 00     ..@...@...@...@.
  40005c:	b9 0f 40 00 b9 0f 40 00 00 00 00 00 c1 0a 40 00     ..@...@.......@.
  40006c:	d9 0a 40 00 f1 0a 40 00 b9 0f 40 00 b9 0f 40 00     ..@...@...@...@.
  40007c:	b9 0f 40 00 09 0b 40 00 21 0b 40 00 b9 0f 40 00     ..@...@.!.@...@.
  40008c:	b9 0f 40 00 b9 0f 40 00 b9 0f 40 00 b9 0f 40 00     ..@...@...@...@.
  40009c:	b9 0f 40 00 b9 0f 40 00 b9 0f 40 00 b9 0f 40 00     ..@...@...@...@.
  4000ac:	b9 0f 40 00 b9 0f 40 00 89 06 40 00 b9 0f 40 00     ..@...@...@...@.
  4000bc:	b9 0f 40 00 b9 0f 40 00 b9 0f 40 00 b9 0f 40 00     ..@...@...@...@.
  4000cc:	b9 0f 40 00 00 00 00 00 b9 0f 40 00 00 00 00 00     ..@.......@.....
  4000dc:	b9 0f 40 00 a1 06 40 00 b9 0f 40 00 b9 0f 40 00     ..@...@...@...@.
  4000ec:	b9 0f 40 00 b9 0f 40 00 b9 0f 40 00 b9 0f 40 00     ..@...@...@...@.
  4000fc:	b9 0f 40 00 b9 0f 40 00 b9 0f 40 00 b9 0f 40 00     ..@...@...@...@.
  40010c:	b9 0f 40 00 b9 0f 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 b9 0f 40 00 b9 0f 40 00 b9 0f 40 00     ......@...@...@.
  40012c:	b9 0f 40 00 b9 0f 40 00 00 00 00 00 b9 0f 40 00     ..@...@.......@.
  40013c:	b9 0f 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040043c 	.word	0x2040043c
  40015c:	00000000 	.word	0x00000000
  400160:	00406358 	.word	0x00406358

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00406358 	.word	0x00406358
  4001a0:	20400440 	.word	0x20400440
  4001a4:	00406358 	.word	0x00406358
  4001a8:	00000000 	.word	0x00000000

004001ac <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	b082      	sub	sp, #8
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2b07      	cmp	r3, #7
  4001b8:	d831      	bhi.n	40021e <osc_enable+0x72>
  4001ba:	a201      	add	r2, pc, #4	; (adr r2, 4001c0 <osc_enable+0x14>)
  4001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001c0:	0040021d 	.word	0x0040021d
  4001c4:	004001e1 	.word	0x004001e1
  4001c8:	004001e9 	.word	0x004001e9
  4001cc:	004001f1 	.word	0x004001f1
  4001d0:	004001f9 	.word	0x004001f9
  4001d4:	00400201 	.word	0x00400201
  4001d8:	00400209 	.word	0x00400209
  4001dc:	00400213 	.word	0x00400213
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4001e0:	2000      	movs	r0, #0
  4001e2:	4b11      	ldr	r3, [pc, #68]	; (400228 <osc_enable+0x7c>)
  4001e4:	4798      	blx	r3
		break;
  4001e6:	e01a      	b.n	40021e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4001e8:	2001      	movs	r0, #1
  4001ea:	4b0f      	ldr	r3, [pc, #60]	; (400228 <osc_enable+0x7c>)
  4001ec:	4798      	blx	r3
		break;
  4001ee:	e016      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4001f0:	2000      	movs	r0, #0
  4001f2:	4b0e      	ldr	r3, [pc, #56]	; (40022c <osc_enable+0x80>)
  4001f4:	4798      	blx	r3
		break;
  4001f6:	e012      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4001f8:	2010      	movs	r0, #16
  4001fa:	4b0c      	ldr	r3, [pc, #48]	; (40022c <osc_enable+0x80>)
  4001fc:	4798      	blx	r3
		break;
  4001fe:	e00e      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400200:	2020      	movs	r0, #32
  400202:	4b0a      	ldr	r3, [pc, #40]	; (40022c <osc_enable+0x80>)
  400204:	4798      	blx	r3
		break;
  400206:	e00a      	b.n	40021e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400208:	213e      	movs	r1, #62	; 0x3e
  40020a:	2000      	movs	r0, #0
  40020c:	4b08      	ldr	r3, [pc, #32]	; (400230 <osc_enable+0x84>)
  40020e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400210:	e005      	b.n	40021e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400212:	213e      	movs	r1, #62	; 0x3e
  400214:	2001      	movs	r0, #1
  400216:	4b06      	ldr	r3, [pc, #24]	; (400230 <osc_enable+0x84>)
  400218:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40021a:	e000      	b.n	40021e <osc_enable+0x72>
		break;
  40021c:	bf00      	nop
	}
}
  40021e:	bf00      	nop
  400220:	3708      	adds	r7, #8
  400222:	46bd      	mov	sp, r7
  400224:	bd80      	pop	{r7, pc}
  400226:	bf00      	nop
  400228:	00400c39 	.word	0x00400c39
  40022c:	00400ca5 	.word	0x00400ca5
  400230:	00400d15 	.word	0x00400d15

00400234 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  400234:	b580      	push	{r7, lr}
  400236:	b082      	sub	sp, #8
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40023c:	687b      	ldr	r3, [r7, #4]
  40023e:	2b07      	cmp	r3, #7
  400240:	d826      	bhi.n	400290 <osc_is_ready+0x5c>
  400242:	a201      	add	r2, pc, #4	; (adr r2, 400248 <osc_is_ready+0x14>)
  400244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400248:	00400269 	.word	0x00400269
  40024c:	0040026d 	.word	0x0040026d
  400250:	0040026d 	.word	0x0040026d
  400254:	0040027f 	.word	0x0040027f
  400258:	0040027f 	.word	0x0040027f
  40025c:	0040027f 	.word	0x0040027f
  400260:	0040027f 	.word	0x0040027f
  400264:	0040027f 	.word	0x0040027f
	case OSC_SLCK_32K_RC:
		return 1;
  400268:	2301      	movs	r3, #1
  40026a:	e012      	b.n	400292 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <osc_is_ready+0x68>)
  40026e:	4798      	blx	r3
  400270:	4603      	mov	r3, r0
  400272:	2b00      	cmp	r3, #0
  400274:	bf14      	ite	ne
  400276:	2301      	movne	r3, #1
  400278:	2300      	moveq	r3, #0
  40027a:	b2db      	uxtb	r3, r3
  40027c:	e009      	b.n	400292 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40027e:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <osc_is_ready+0x6c>)
  400280:	4798      	blx	r3
  400282:	4603      	mov	r3, r0
  400284:	2b00      	cmp	r3, #0
  400286:	bf14      	ite	ne
  400288:	2301      	movne	r3, #1
  40028a:	2300      	moveq	r3, #0
  40028c:	b2db      	uxtb	r3, r3
  40028e:	e000      	b.n	400292 <osc_is_ready+0x5e>
	}

	return 0;
  400290:	2300      	movs	r3, #0
}
  400292:	4618      	mov	r0, r3
  400294:	3708      	adds	r7, #8
  400296:	46bd      	mov	sp, r7
  400298:	bd80      	pop	{r7, pc}
  40029a:	bf00      	nop
  40029c:	00400c71 	.word	0x00400c71
  4002a0:	00400d8d 	.word	0x00400d8d

004002a4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002a4:	b480      	push	{r7}
  4002a6:	b083      	sub	sp, #12
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002ac:	687b      	ldr	r3, [r7, #4]
  4002ae:	2b07      	cmp	r3, #7
  4002b0:	d825      	bhi.n	4002fe <osc_get_rate+0x5a>
  4002b2:	a201      	add	r2, pc, #4	; (adr r2, 4002b8 <osc_get_rate+0x14>)
  4002b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002b8:	004002d9 	.word	0x004002d9
  4002bc:	004002df 	.word	0x004002df
  4002c0:	004002e5 	.word	0x004002e5
  4002c4:	004002eb 	.word	0x004002eb
  4002c8:	004002ef 	.word	0x004002ef
  4002cc:	004002f3 	.word	0x004002f3
  4002d0:	004002f7 	.word	0x004002f7
  4002d4:	004002fb 	.word	0x004002fb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4002d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4002dc:	e010      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4002de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e2:	e00d      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4002e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4002e8:	e00a      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4002ea:	4b08      	ldr	r3, [pc, #32]	; (40030c <osc_get_rate+0x68>)
  4002ec:	e008      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4002ee:	4b08      	ldr	r3, [pc, #32]	; (400310 <osc_get_rate+0x6c>)
  4002f0:	e006      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4002f2:	4b08      	ldr	r3, [pc, #32]	; (400314 <osc_get_rate+0x70>)
  4002f4:	e004      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4002f6:	4b07      	ldr	r3, [pc, #28]	; (400314 <osc_get_rate+0x70>)
  4002f8:	e002      	b.n	400300 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4002fa:	4b06      	ldr	r3, [pc, #24]	; (400314 <osc_get_rate+0x70>)
  4002fc:	e000      	b.n	400300 <osc_get_rate+0x5c>
	}

	return 0;
  4002fe:	2300      	movs	r3, #0
}
  400300:	4618      	mov	r0, r3
  400302:	370c      	adds	r7, #12
  400304:	46bd      	mov	sp, r7
  400306:	f85d 7b04 	ldr.w	r7, [sp], #4
  40030a:	4770      	bx	lr
  40030c:	003d0900 	.word	0x003d0900
  400310:	007a1200 	.word	0x007a1200
  400314:	00b71b00 	.word	0x00b71b00

00400318 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400318:	b580      	push	{r7, lr}
  40031a:	b082      	sub	sp, #8
  40031c:	af00      	add	r7, sp, #0
  40031e:	4603      	mov	r3, r0
  400320:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400322:	bf00      	nop
  400324:	79fb      	ldrb	r3, [r7, #7]
  400326:	4618      	mov	r0, r3
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <osc_wait_ready+0x28>)
  40032a:	4798      	blx	r3
  40032c:	4603      	mov	r3, r0
  40032e:	f083 0301 	eor.w	r3, r3, #1
  400332:	b2db      	uxtb	r3, r3
  400334:	2b00      	cmp	r3, #0
  400336:	d1f5      	bne.n	400324 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400338:	bf00      	nop
  40033a:	3708      	adds	r7, #8
  40033c:	46bd      	mov	sp, r7
  40033e:	bd80      	pop	{r7, pc}
  400340:	00400235 	.word	0x00400235

00400344 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  400344:	b580      	push	{r7, lr}
  400346:	b086      	sub	sp, #24
  400348:	af00      	add	r7, sp, #0
  40034a:	60f8      	str	r0, [r7, #12]
  40034c:	607a      	str	r2, [r7, #4]
  40034e:	603b      	str	r3, [r7, #0]
  400350:	460b      	mov	r3, r1
  400352:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	2b00      	cmp	r3, #0
  400358:	d107      	bne.n	40036a <pll_config_init+0x26>
  40035a:	683b      	ldr	r3, [r7, #0]
  40035c:	2b00      	cmp	r3, #0
  40035e:	d104      	bne.n	40036a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400360:	68fb      	ldr	r3, [r7, #12]
  400362:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  400366:	601a      	str	r2, [r3, #0]
  400368:	e019      	b.n	40039e <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40036a:	7afb      	ldrb	r3, [r7, #11]
  40036c:	4618      	mov	r0, r3
  40036e:	4b0e      	ldr	r3, [pc, #56]	; (4003a8 <pll_config_init+0x64>)
  400370:	4798      	blx	r3
  400372:	4602      	mov	r2, r0
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	fbb2 f3f3 	udiv	r3, r2, r3
  40037a:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40037c:	697b      	ldr	r3, [r7, #20]
  40037e:	683a      	ldr	r2, [r7, #0]
  400380:	fb02 f303 	mul.w	r3, r2, r3
  400384:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  400386:	683b      	ldr	r3, [r7, #0]
  400388:	3b01      	subs	r3, #1
  40038a:	041a      	lsls	r2, r3, #16
  40038c:	4b07      	ldr	r3, [pc, #28]	; (4003ac <pll_config_init+0x68>)
  40038e:	4013      	ands	r3, r2
  400390:	687a      	ldr	r2, [r7, #4]
  400392:	b2d2      	uxtb	r2, r2
  400394:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  400396:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	601a      	str	r2, [r3, #0]
	}
}
  40039e:	bf00      	nop
  4003a0:	3718      	adds	r7, #24
  4003a2:	46bd      	mov	sp, r7
  4003a4:	bd80      	pop	{r7, pc}
  4003a6:	bf00      	nop
  4003a8:	004002a5 	.word	0x004002a5
  4003ac:	07ff0000 	.word	0x07ff0000

004003b0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003b0:	b580      	push	{r7, lr}
  4003b2:	b082      	sub	sp, #8
  4003b4:	af00      	add	r7, sp, #0
  4003b6:	6078      	str	r0, [r7, #4]
  4003b8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003ba:	683b      	ldr	r3, [r7, #0]
  4003bc:	2b00      	cmp	r3, #0
  4003be:	d108      	bne.n	4003d2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <pll_enable+0x38>)
  4003c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003c4:	4a09      	ldr	r2, [pc, #36]	; (4003ec <pll_enable+0x3c>)
  4003c6:	687b      	ldr	r3, [r7, #4]
  4003c8:	681b      	ldr	r3, [r3, #0]
  4003ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003ce:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003d0:	e005      	b.n	4003de <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003d2:	4a06      	ldr	r2, [pc, #24]	; (4003ec <pll_enable+0x3c>)
  4003d4:	687b      	ldr	r3, [r7, #4]
  4003d6:	681b      	ldr	r3, [r3, #0]
  4003d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4003dc:	61d3      	str	r3, [r2, #28]
}
  4003de:	bf00      	nop
  4003e0:	3708      	adds	r7, #8
  4003e2:	46bd      	mov	sp, r7
  4003e4:	bd80      	pop	{r7, pc}
  4003e6:	bf00      	nop
  4003e8:	00400da9 	.word	0x00400da9
  4003ec:	400e0600 	.word	0x400e0600

004003f0 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4003f0:	b580      	push	{r7, lr}
  4003f2:	b082      	sub	sp, #8
  4003f4:	af00      	add	r7, sp, #0
  4003f6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	2b00      	cmp	r3, #0
  4003fc:	d103      	bne.n	400406 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4003fe:	4b05      	ldr	r3, [pc, #20]	; (400414 <pll_is_locked+0x24>)
  400400:	4798      	blx	r3
  400402:	4603      	mov	r3, r0
  400404:	e002      	b.n	40040c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  400406:	4b04      	ldr	r3, [pc, #16]	; (400418 <pll_is_locked+0x28>)
  400408:	4798      	blx	r3
  40040a:	4603      	mov	r3, r0
	}
}
  40040c:	4618      	mov	r0, r3
  40040e:	3708      	adds	r7, #8
  400410:	46bd      	mov	sp, r7
  400412:	bd80      	pop	{r7, pc}
  400414:	00400dc5 	.word	0x00400dc5
  400418:	00400de1 	.word	0x00400de1

0040041c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  40041c:	b580      	push	{r7, lr}
  40041e:	b082      	sub	sp, #8
  400420:	af00      	add	r7, sp, #0
  400422:	4603      	mov	r3, r0
  400424:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400426:	79fb      	ldrb	r3, [r7, #7]
  400428:	3b03      	subs	r3, #3
  40042a:	2b04      	cmp	r3, #4
  40042c:	d808      	bhi.n	400440 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40042e:	79fb      	ldrb	r3, [r7, #7]
  400430:	4618      	mov	r0, r3
  400432:	4b06      	ldr	r3, [pc, #24]	; (40044c <pll_enable_source+0x30>)
  400434:	4798      	blx	r3
		osc_wait_ready(e_src);
  400436:	79fb      	ldrb	r3, [r7, #7]
  400438:	4618      	mov	r0, r3
  40043a:	4b05      	ldr	r3, [pc, #20]	; (400450 <pll_enable_source+0x34>)
  40043c:	4798      	blx	r3
		break;
  40043e:	e000      	b.n	400442 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400440:	bf00      	nop
	}
}
  400442:	bf00      	nop
  400444:	3708      	adds	r7, #8
  400446:	46bd      	mov	sp, r7
  400448:	bd80      	pop	{r7, pc}
  40044a:	bf00      	nop
  40044c:	004001ad 	.word	0x004001ad
  400450:	00400319 	.word	0x00400319

00400454 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400454:	b580      	push	{r7, lr}
  400456:	b082      	sub	sp, #8
  400458:	af00      	add	r7, sp, #0
  40045a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40045c:	bf00      	nop
  40045e:	6878      	ldr	r0, [r7, #4]
  400460:	4b04      	ldr	r3, [pc, #16]	; (400474 <pll_wait_for_lock+0x20>)
  400462:	4798      	blx	r3
  400464:	4603      	mov	r3, r0
  400466:	2b00      	cmp	r3, #0
  400468:	d0f9      	beq.n	40045e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40046a:	2300      	movs	r3, #0
}
  40046c:	4618      	mov	r0, r3
  40046e:	3708      	adds	r7, #8
  400470:	46bd      	mov	sp, r7
  400472:	bd80      	pop	{r7, pc}
  400474:	004003f1 	.word	0x004003f1

00400478 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400478:	b580      	push	{r7, lr}
  40047a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40047c:	2006      	movs	r0, #6
  40047e:	4b05      	ldr	r3, [pc, #20]	; (400494 <sysclk_get_main_hz+0x1c>)
  400480:	4798      	blx	r3
  400482:	4602      	mov	r2, r0
  400484:	4613      	mov	r3, r2
  400486:	009b      	lsls	r3, r3, #2
  400488:	4413      	add	r3, r2
  40048a:	009a      	lsls	r2, r3, #2
  40048c:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40048e:	4618      	mov	r0, r3
  400490:	bd80      	pop	{r7, pc}
  400492:	bf00      	nop
  400494:	004002a5 	.word	0x004002a5

00400498 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400498:	b580      	push	{r7, lr}
  40049a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40049c:	4b02      	ldr	r3, [pc, #8]	; (4004a8 <sysclk_get_cpu_hz+0x10>)
  40049e:	4798      	blx	r3
  4004a0:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004a2:	4618      	mov	r0, r3
  4004a4:	bd80      	pop	{r7, pc}
  4004a6:	bf00      	nop
  4004a8:	00400479 	.word	0x00400479

004004ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004ac:	b590      	push	{r4, r7, lr}
  4004ae:	b083      	sub	sp, #12
  4004b0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004b2:	4813      	ldr	r0, [pc, #76]	; (400500 <sysclk_init+0x54>)
  4004b4:	4b13      	ldr	r3, [pc, #76]	; (400504 <sysclk_init+0x58>)
  4004b6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004b8:	2006      	movs	r0, #6
  4004ba:	4b13      	ldr	r3, [pc, #76]	; (400508 <sysclk_init+0x5c>)
  4004bc:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004be:	1d38      	adds	r0, r7, #4
  4004c0:	2319      	movs	r3, #25
  4004c2:	2201      	movs	r2, #1
  4004c4:	2106      	movs	r1, #6
  4004c6:	4c11      	ldr	r4, [pc, #68]	; (40050c <sysclk_init+0x60>)
  4004c8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004ca:	1d3b      	adds	r3, r7, #4
  4004cc:	2100      	movs	r1, #0
  4004ce:	4618      	mov	r0, r3
  4004d0:	4b0f      	ldr	r3, [pc, #60]	; (400510 <sysclk_init+0x64>)
  4004d2:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004d4:	2000      	movs	r0, #0
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <sysclk_init+0x68>)
  4004d8:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4004da:	2002      	movs	r0, #2
  4004dc:	4b0e      	ldr	r3, [pc, #56]	; (400518 <sysclk_init+0x6c>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4004e0:	2000      	movs	r0, #0
  4004e2:	4b0e      	ldr	r3, [pc, #56]	; (40051c <sysclk_init+0x70>)
  4004e4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <sysclk_init+0x74>)
  4004e8:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004ea:	4b0e      	ldr	r3, [pc, #56]	; (400524 <sysclk_init+0x78>)
  4004ec:	4798      	blx	r3
  4004ee:	4603      	mov	r3, r0
  4004f0:	4618      	mov	r0, r3
  4004f2:	4b04      	ldr	r3, [pc, #16]	; (400504 <sysclk_init+0x58>)
  4004f4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4004f6:	bf00      	nop
  4004f8:	370c      	adds	r7, #12
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bd90      	pop	{r4, r7, pc}
  4004fe:	bf00      	nop
  400500:	11e1a300 	.word	0x11e1a300
  400504:	00401129 	.word	0x00401129
  400508:	0040041d 	.word	0x0040041d
  40050c:	00400345 	.word	0x00400345
  400510:	004003b1 	.word	0x004003b1
  400514:	00400455 	.word	0x00400455
  400518:	00400b39 	.word	0x00400b39
  40051c:	00400bb5 	.word	0x00400bb5
  400520:	00400fc1 	.word	0x00400fc1
  400524:	00400499 	.word	0x00400499

00400528 <afec_get_interrupt_status>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
  400528:	b480      	push	{r7}
  40052a:	b083      	sub	sp, #12
  40052c:	af00      	add	r7, sp, #0
  40052e:	6078      	str	r0, [r7, #4]
	return afec->AFEC_ISR;
  400530:	687b      	ldr	r3, [r7, #4]
  400532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  400534:	4618      	mov	r0, r3
  400536:	370c      	adds	r7, #12
  400538:	46bd      	mov	sp, r7
  40053a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40053e:	4770      	bx	lr

00400540 <afec_get_interrupt_mask>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
  400540:	b480      	push	{r7}
  400542:	b083      	sub	sp, #12
  400544:	af00      	add	r7, sp, #0
  400546:	6078      	str	r0, [r7, #4]
	return afec->AFEC_IMR;
  400548:	687b      	ldr	r3, [r7, #4]
  40054a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  40054c:	4618      	mov	r0, r3
  40054e:	370c      	adds	r7, #12
  400550:	46bd      	mov	sp, r7
  400552:	f85d 7b04 	ldr.w	r7, [sp], #4
  400556:	4770      	bx	lr

00400558 <afec_find_inst_num>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
  400558:	b480      	push	{r7}
  40055a:	b083      	sub	sp, #12
  40055c:	af00      	add	r7, sp, #0
  40055e:	6078      	str	r0, [r7, #4]
#if defined(AFEC1)
	if (afec == AFEC1) {
  400560:	687b      	ldr	r3, [r7, #4]
  400562:	4a09      	ldr	r2, [pc, #36]	; (400588 <afec_find_inst_num+0x30>)
  400564:	4293      	cmp	r3, r2
  400566:	d101      	bne.n	40056c <afec_find_inst_num+0x14>
		return 1;
  400568:	2301      	movs	r3, #1
  40056a:	e006      	b.n	40057a <afec_find_inst_num+0x22>
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
  40056c:	687b      	ldr	r3, [r7, #4]
  40056e:	4a07      	ldr	r2, [pc, #28]	; (40058c <afec_find_inst_num+0x34>)
  400570:	4293      	cmp	r3, r2
  400572:	d101      	bne.n	400578 <afec_find_inst_num+0x20>
		return 0;
  400574:	2300      	movs	r3, #0
  400576:	e000      	b.n	40057a <afec_find_inst_num+0x22>
	}
#endif
	return 0;
  400578:	2300      	movs	r3, #0
}
  40057a:	4618      	mov	r0, r3
  40057c:	370c      	adds	r7, #12
  40057e:	46bd      	mov	sp, r7
  400580:	f85d 7b04 	ldr.w	r7, [sp], #4
  400584:	4770      	bx	lr
  400586:	bf00      	nop
  400588:	40064000 	.word	0x40064000
  40058c:	4003c000 	.word	0x4003c000

00400590 <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  400590:	b580      	push	{r7, lr}
  400592:	b082      	sub	sp, #8
  400594:	af00      	add	r7, sp, #0
  400596:	4603      	mov	r3, r0
  400598:	6039      	str	r1, [r7, #0]
  40059a:	71fb      	strb	r3, [r7, #7]
	if (afec_callback_pointer[inst_num][source]) {
  40059c:	79fb      	ldrb	r3, [r7, #7]
  40059e:	490a      	ldr	r1, [pc, #40]	; (4005c8 <afec_interrupt+0x38>)
  4005a0:	011a      	lsls	r2, r3, #4
  4005a2:	683b      	ldr	r3, [r7, #0]
  4005a4:	4413      	add	r3, r2
  4005a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4005aa:	2b00      	cmp	r3, #0
  4005ac:	d007      	beq.n	4005be <afec_interrupt+0x2e>
		afec_callback_pointer[inst_num][source]();
  4005ae:	79fb      	ldrb	r3, [r7, #7]
  4005b0:	4905      	ldr	r1, [pc, #20]	; (4005c8 <afec_interrupt+0x38>)
  4005b2:	011a      	lsls	r2, r3, #4
  4005b4:	683b      	ldr	r3, [r7, #0]
  4005b6:	4413      	add	r3, r2
  4005b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4005bc:	4798      	blx	r3
	}
}
  4005be:	bf00      	nop
  4005c0:	3708      	adds	r7, #8
  4005c2:	46bd      	mov	sp, r7
  4005c4:	bd80      	pop	{r7, pc}
  4005c6:	bf00      	nop
  4005c8:	204004c8 	.word	0x204004c8

004005cc <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4005cc:	b590      	push	{r4, r7, lr}
  4005ce:	b087      	sub	sp, #28
  4005d0:	af00      	add	r7, sp, #0
  4005d2:	6078      	str	r0, [r7, #4]
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4005d4:	6878      	ldr	r0, [r7, #4]
  4005d6:	4b28      	ldr	r3, [pc, #160]	; (400678 <afec_process_callback+0xac>)
  4005d8:	4798      	blx	r3
  4005da:	4604      	mov	r4, r0
  4005dc:	6878      	ldr	r0, [r7, #4]
  4005de:	4b27      	ldr	r3, [pc, #156]	; (40067c <afec_process_callback+0xb0>)
  4005e0:	4798      	blx	r3
  4005e2:	4603      	mov	r3, r0
  4005e4:	4023      	ands	r3, r4
  4005e6:	60fb      	str	r3, [r7, #12]
	inst_num = afec_find_inst_num(afec);
  4005e8:	6878      	ldr	r0, [r7, #4]
  4005ea:	4b25      	ldr	r3, [pc, #148]	; (400680 <afec_process_callback+0xb4>)
  4005ec:	4798      	blx	r3
  4005ee:	6138      	str	r0, [r7, #16]

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4005f0:	2300      	movs	r3, #0
  4005f2:	617b      	str	r3, [r7, #20]
  4005f4:	e039      	b.n	40066a <afec_process_callback+0x9e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4005f6:	697b      	ldr	r3, [r7, #20]
  4005f8:	2b0b      	cmp	r3, #11
  4005fa:	d80f      	bhi.n	40061c <afec_process_callback+0x50>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  4005fc:	2201      	movs	r2, #1
  4005fe:	697b      	ldr	r3, [r7, #20]
  400600:	fa02 f303 	lsl.w	r3, r2, r3
  400604:	461a      	mov	r2, r3
  400606:	68fb      	ldr	r3, [r7, #12]
  400608:	4013      	ands	r3, r2
  40060a:	2b00      	cmp	r3, #0
  40060c:	d02a      	beq.n	400664 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40060e:	693b      	ldr	r3, [r7, #16]
  400610:	b2db      	uxtb	r3, r3
  400612:	6979      	ldr	r1, [r7, #20]
  400614:	4618      	mov	r0, r3
  400616:	4b1b      	ldr	r3, [pc, #108]	; (400684 <afec_process_callback+0xb8>)
  400618:	4798      	blx	r3
  40061a:	e023      	b.n	400664 <afec_process_callback+0x98>
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40061c:	697b      	ldr	r3, [r7, #20]
  40061e:	2b0e      	cmp	r3, #14
  400620:	d810      	bhi.n	400644 <afec_process_callback+0x78>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400622:	697b      	ldr	r3, [r7, #20]
  400624:	330c      	adds	r3, #12
  400626:	2201      	movs	r2, #1
  400628:	fa02 f303 	lsl.w	r3, r2, r3
  40062c:	461a      	mov	r2, r3
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	4013      	ands	r3, r2
  400632:	2b00      	cmp	r3, #0
  400634:	d016      	beq.n	400664 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  400636:	693b      	ldr	r3, [r7, #16]
  400638:	b2db      	uxtb	r3, r3
  40063a:	6979      	ldr	r1, [r7, #20]
  40063c:	4618      	mov	r0, r3
  40063e:	4b11      	ldr	r3, [pc, #68]	; (400684 <afec_process_callback+0xb8>)
  400640:	4798      	blx	r3
  400642:	e00f      	b.n	400664 <afec_process_callback+0x98>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400644:	697b      	ldr	r3, [r7, #20]
  400646:	330f      	adds	r3, #15
  400648:	2201      	movs	r2, #1
  40064a:	fa02 f303 	lsl.w	r3, r2, r3
  40064e:	461a      	mov	r2, r3
  400650:	68fb      	ldr	r3, [r7, #12]
  400652:	4013      	ands	r3, r2
  400654:	2b00      	cmp	r3, #0
  400656:	d005      	beq.n	400664 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  400658:	693b      	ldr	r3, [r7, #16]
  40065a:	b2db      	uxtb	r3, r3
  40065c:	6979      	ldr	r1, [r7, #20]
  40065e:	4618      	mov	r0, r3
  400660:	4b08      	ldr	r3, [pc, #32]	; (400684 <afec_process_callback+0xb8>)
  400662:	4798      	blx	r3
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400664:	697b      	ldr	r3, [r7, #20]
  400666:	3301      	adds	r3, #1
  400668:	617b      	str	r3, [r7, #20]
  40066a:	697b      	ldr	r3, [r7, #20]
  40066c:	2b0f      	cmp	r3, #15
  40066e:	d9c2      	bls.n	4005f6 <afec_process_callback+0x2a>
			}
		}
	}
}
  400670:	bf00      	nop
  400672:	371c      	adds	r7, #28
  400674:	46bd      	mov	sp, r7
  400676:	bd90      	pop	{r4, r7, pc}
  400678:	00400529 	.word	0x00400529
  40067c:	00400541 	.word	0x00400541
  400680:	00400559 	.word	0x00400559
  400684:	00400591 	.word	0x00400591

00400688 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400688:	b580      	push	{r7, lr}
  40068a:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC0);
  40068c:	4802      	ldr	r0, [pc, #8]	; (400698 <AFEC0_Handler+0x10>)
  40068e:	4b03      	ldr	r3, [pc, #12]	; (40069c <AFEC0_Handler+0x14>)
  400690:	4798      	blx	r3
}
  400692:	bf00      	nop
  400694:	bd80      	pop	{r7, pc}
  400696:	bf00      	nop
  400698:	4003c000 	.word	0x4003c000
  40069c:	004005cd 	.word	0x004005cd

004006a0 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4006a0:	b580      	push	{r7, lr}
  4006a2:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC1);
  4006a4:	4802      	ldr	r0, [pc, #8]	; (4006b0 <AFEC1_Handler+0x10>)
  4006a6:	4b03      	ldr	r3, [pc, #12]	; (4006b4 <AFEC1_Handler+0x14>)
  4006a8:	4798      	blx	r3
}
  4006aa:	bf00      	nop
  4006ac:	bd80      	pop	{r7, pc}
  4006ae:	bf00      	nop
  4006b0:	40064000 	.word	0x40064000
  4006b4:	004005cd 	.word	0x004005cd

004006b8 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4006b8:	b480      	push	{r7}
  4006ba:	b085      	sub	sp, #20
  4006bc:	af00      	add	r7, sp, #0
  4006be:	60f8      	str	r0, [r7, #12]
  4006c0:	60b9      	str	r1, [r7, #8]
  4006c2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4006c4:	687b      	ldr	r3, [r7, #4]
  4006c6:	2b00      	cmp	r3, #0
  4006c8:	d003      	beq.n	4006d2 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4006ca:	68fb      	ldr	r3, [r7, #12]
  4006cc:	68ba      	ldr	r2, [r7, #8]
  4006ce:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4006d0:	e002      	b.n	4006d8 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  4006d2:	68fb      	ldr	r3, [r7, #12]
  4006d4:	68ba      	ldr	r2, [r7, #8]
  4006d6:	661a      	str	r2, [r3, #96]	; 0x60
}
  4006d8:	bf00      	nop
  4006da:	3714      	adds	r7, #20
  4006dc:	46bd      	mov	sp, r7
  4006de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006e2:	4770      	bx	lr

004006e4 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  4006e4:	b480      	push	{r7}
  4006e6:	b083      	sub	sp, #12
  4006e8:	af00      	add	r7, sp, #0
  4006ea:	6078      	str	r0, [r7, #4]
  4006ec:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  4006ee:	687b      	ldr	r3, [r7, #4]
  4006f0:	683a      	ldr	r2, [r7, #0]
  4006f2:	635a      	str	r2, [r3, #52]	; 0x34
}
  4006f4:	bf00      	nop
  4006f6:	370c      	adds	r7, #12
  4006f8:	46bd      	mov	sp, r7
  4006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006fe:	4770      	bx	lr

00400700 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400700:	b480      	push	{r7}
  400702:	b087      	sub	sp, #28
  400704:	af00      	add	r7, sp, #0
  400706:	60f8      	str	r0, [r7, #12]
  400708:	60b9      	str	r1, [r7, #8]
  40070a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40070c:	68fb      	ldr	r3, [r7, #12]
  40070e:	687a      	ldr	r2, [r7, #4]
  400710:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400712:	68bb      	ldr	r3, [r7, #8]
  400714:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400718:	d04a      	beq.n	4007b0 <pio_set_peripheral+0xb0>
  40071a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40071e:	d808      	bhi.n	400732 <pio_set_peripheral+0x32>
  400720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400724:	d016      	beq.n	400754 <pio_set_peripheral+0x54>
  400726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40072a:	d02c      	beq.n	400786 <pio_set_peripheral+0x86>
  40072c:	2b00      	cmp	r3, #0
  40072e:	d069      	beq.n	400804 <pio_set_peripheral+0x104>
  400730:	e064      	b.n	4007fc <pio_set_peripheral+0xfc>
  400732:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400736:	d065      	beq.n	400804 <pio_set_peripheral+0x104>
  400738:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40073c:	d803      	bhi.n	400746 <pio_set_peripheral+0x46>
  40073e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400742:	d04a      	beq.n	4007da <pio_set_peripheral+0xda>
  400744:	e05a      	b.n	4007fc <pio_set_peripheral+0xfc>
  400746:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40074a:	d05b      	beq.n	400804 <pio_set_peripheral+0x104>
  40074c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400750:	d058      	beq.n	400804 <pio_set_peripheral+0x104>
  400752:	e053      	b.n	4007fc <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400754:	68fb      	ldr	r3, [r7, #12]
  400756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400758:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40075a:	68fb      	ldr	r3, [r7, #12]
  40075c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40075e:	687b      	ldr	r3, [r7, #4]
  400760:	43d9      	mvns	r1, r3
  400762:	697b      	ldr	r3, [r7, #20]
  400764:	400b      	ands	r3, r1
  400766:	401a      	ands	r2, r3
  400768:	68fb      	ldr	r3, [r7, #12]
  40076a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40076c:	68fb      	ldr	r3, [r7, #12]
  40076e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400770:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400772:	68fb      	ldr	r3, [r7, #12]
  400774:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400776:	687b      	ldr	r3, [r7, #4]
  400778:	43d9      	mvns	r1, r3
  40077a:	697b      	ldr	r3, [r7, #20]
  40077c:	400b      	ands	r3, r1
  40077e:	401a      	ands	r2, r3
  400780:	68fb      	ldr	r3, [r7, #12]
  400782:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400784:	e03a      	b.n	4007fc <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400786:	68fb      	ldr	r3, [r7, #12]
  400788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40078a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40078c:	687a      	ldr	r2, [r7, #4]
  40078e:	697b      	ldr	r3, [r7, #20]
  400790:	431a      	orrs	r2, r3
  400792:	68fb      	ldr	r3, [r7, #12]
  400794:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400796:	68fb      	ldr	r3, [r7, #12]
  400798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40079a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40079c:	68fb      	ldr	r3, [r7, #12]
  40079e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007a0:	687b      	ldr	r3, [r7, #4]
  4007a2:	43d9      	mvns	r1, r3
  4007a4:	697b      	ldr	r3, [r7, #20]
  4007a6:	400b      	ands	r3, r1
  4007a8:	401a      	ands	r2, r3
  4007aa:	68fb      	ldr	r3, [r7, #12]
  4007ac:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4007ae:	e025      	b.n	4007fc <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4007b0:	68fb      	ldr	r3, [r7, #12]
  4007b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4007b4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4007b6:	68fb      	ldr	r3, [r7, #12]
  4007b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4007ba:	687b      	ldr	r3, [r7, #4]
  4007bc:	43d9      	mvns	r1, r3
  4007be:	697b      	ldr	r3, [r7, #20]
  4007c0:	400b      	ands	r3, r1
  4007c2:	401a      	ands	r2, r3
  4007c4:	68fb      	ldr	r3, [r7, #12]
  4007c6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4007c8:	68fb      	ldr	r3, [r7, #12]
  4007ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4007cc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4007ce:	687a      	ldr	r2, [r7, #4]
  4007d0:	697b      	ldr	r3, [r7, #20]
  4007d2:	431a      	orrs	r2, r3
  4007d4:	68fb      	ldr	r3, [r7, #12]
  4007d6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4007d8:	e010      	b.n	4007fc <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4007da:	68fb      	ldr	r3, [r7, #12]
  4007dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4007de:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4007e0:	687a      	ldr	r2, [r7, #4]
  4007e2:	697b      	ldr	r3, [r7, #20]
  4007e4:	431a      	orrs	r2, r3
  4007e6:	68fb      	ldr	r3, [r7, #12]
  4007e8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4007ea:	68fb      	ldr	r3, [r7, #12]
  4007ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4007ee:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4007f0:	687a      	ldr	r2, [r7, #4]
  4007f2:	697b      	ldr	r3, [r7, #20]
  4007f4:	431a      	orrs	r2, r3
  4007f6:	68fb      	ldr	r3, [r7, #12]
  4007f8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4007fa:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4007fc:	68fb      	ldr	r3, [r7, #12]
  4007fe:	687a      	ldr	r2, [r7, #4]
  400800:	605a      	str	r2, [r3, #4]
  400802:	e000      	b.n	400806 <pio_set_peripheral+0x106>
		return;
  400804:	bf00      	nop
}
  400806:	371c      	adds	r7, #28
  400808:	46bd      	mov	sp, r7
  40080a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40080e:	4770      	bx	lr

00400810 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400810:	b580      	push	{r7, lr}
  400812:	b084      	sub	sp, #16
  400814:	af00      	add	r7, sp, #0
  400816:	60f8      	str	r0, [r7, #12]
  400818:	60b9      	str	r1, [r7, #8]
  40081a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  40081c:	68b9      	ldr	r1, [r7, #8]
  40081e:	68f8      	ldr	r0, [r7, #12]
  400820:	4b19      	ldr	r3, [pc, #100]	; (400888 <pio_set_input+0x78>)
  400822:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400824:	687b      	ldr	r3, [r7, #4]
  400826:	f003 0301 	and.w	r3, r3, #1
  40082a:	461a      	mov	r2, r3
  40082c:	68b9      	ldr	r1, [r7, #8]
  40082e:	68f8      	ldr	r0, [r7, #12]
  400830:	4b16      	ldr	r3, [pc, #88]	; (40088c <pio_set_input+0x7c>)
  400832:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400834:	687b      	ldr	r3, [r7, #4]
  400836:	f003 030a 	and.w	r3, r3, #10
  40083a:	2b00      	cmp	r3, #0
  40083c:	d003      	beq.n	400846 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40083e:	68fb      	ldr	r3, [r7, #12]
  400840:	68ba      	ldr	r2, [r7, #8]
  400842:	621a      	str	r2, [r3, #32]
  400844:	e002      	b.n	40084c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400846:	68fb      	ldr	r3, [r7, #12]
  400848:	68ba      	ldr	r2, [r7, #8]
  40084a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40084c:	687b      	ldr	r3, [r7, #4]
  40084e:	f003 0302 	and.w	r3, r3, #2
  400852:	2b00      	cmp	r3, #0
  400854:	d004      	beq.n	400860 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400856:	68fb      	ldr	r3, [r7, #12]
  400858:	68ba      	ldr	r2, [r7, #8]
  40085a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40085e:	e008      	b.n	400872 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400860:	687b      	ldr	r3, [r7, #4]
  400862:	f003 0308 	and.w	r3, r3, #8
  400866:	2b00      	cmp	r3, #0
  400868:	d003      	beq.n	400872 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40086a:	68fb      	ldr	r3, [r7, #12]
  40086c:	68ba      	ldr	r2, [r7, #8]
  40086e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	68ba      	ldr	r2, [r7, #8]
  400876:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400878:	68fb      	ldr	r3, [r7, #12]
  40087a:	68ba      	ldr	r2, [r7, #8]
  40087c:	601a      	str	r2, [r3, #0]
}
  40087e:	bf00      	nop
  400880:	3710      	adds	r7, #16
  400882:	46bd      	mov	sp, r7
  400884:	bd80      	pop	{r7, pc}
  400886:	bf00      	nop
  400888:	004009c1 	.word	0x004009c1
  40088c:	004006b9 	.word	0x004006b9

00400890 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400890:	b580      	push	{r7, lr}
  400892:	b084      	sub	sp, #16
  400894:	af00      	add	r7, sp, #0
  400896:	60f8      	str	r0, [r7, #12]
  400898:	60b9      	str	r1, [r7, #8]
  40089a:	607a      	str	r2, [r7, #4]
  40089c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40089e:	68b9      	ldr	r1, [r7, #8]
  4008a0:	68f8      	ldr	r0, [r7, #12]
  4008a2:	4b12      	ldr	r3, [pc, #72]	; (4008ec <pio_set_output+0x5c>)
  4008a4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4008a6:	69ba      	ldr	r2, [r7, #24]
  4008a8:	68b9      	ldr	r1, [r7, #8]
  4008aa:	68f8      	ldr	r0, [r7, #12]
  4008ac:	4b10      	ldr	r3, [pc, #64]	; (4008f0 <pio_set_output+0x60>)
  4008ae:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4008b0:	683b      	ldr	r3, [r7, #0]
  4008b2:	2b00      	cmp	r3, #0
  4008b4:	d003      	beq.n	4008be <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4008b6:	68fb      	ldr	r3, [r7, #12]
  4008b8:	68ba      	ldr	r2, [r7, #8]
  4008ba:	651a      	str	r2, [r3, #80]	; 0x50
  4008bc:	e002      	b.n	4008c4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4008be:	68fb      	ldr	r3, [r7, #12]
  4008c0:	68ba      	ldr	r2, [r7, #8]
  4008c2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4008c4:	687b      	ldr	r3, [r7, #4]
  4008c6:	2b00      	cmp	r3, #0
  4008c8:	d003      	beq.n	4008d2 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4008ca:	68fb      	ldr	r3, [r7, #12]
  4008cc:	68ba      	ldr	r2, [r7, #8]
  4008ce:	631a      	str	r2, [r3, #48]	; 0x30
  4008d0:	e002      	b.n	4008d8 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4008d2:	68fb      	ldr	r3, [r7, #12]
  4008d4:	68ba      	ldr	r2, [r7, #8]
  4008d6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4008d8:	68fb      	ldr	r3, [r7, #12]
  4008da:	68ba      	ldr	r2, [r7, #8]
  4008dc:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4008de:	68fb      	ldr	r3, [r7, #12]
  4008e0:	68ba      	ldr	r2, [r7, #8]
  4008e2:	601a      	str	r2, [r3, #0]
}
  4008e4:	bf00      	nop
  4008e6:	3710      	adds	r7, #16
  4008e8:	46bd      	mov	sp, r7
  4008ea:	bd80      	pop	{r7, pc}
  4008ec:	004009c1 	.word	0x004009c1
  4008f0:	004006b9 	.word	0x004006b9

004008f4 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  4008f4:	b590      	push	{r4, r7, lr}
  4008f6:	b087      	sub	sp, #28
  4008f8:	af02      	add	r7, sp, #8
  4008fa:	60f8      	str	r0, [r7, #12]
  4008fc:	60b9      	str	r1, [r7, #8]
  4008fe:	607a      	str	r2, [r7, #4]
  400900:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  400902:	68bb      	ldr	r3, [r7, #8]
  400904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400908:	d016      	beq.n	400938 <pio_configure+0x44>
  40090a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40090e:	d809      	bhi.n	400924 <pio_configure+0x30>
  400910:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400914:	d010      	beq.n	400938 <pio_configure+0x44>
  400916:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40091a:	d00d      	beq.n	400938 <pio_configure+0x44>
  40091c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400920:	d00a      	beq.n	400938 <pio_configure+0x44>
  400922:	e03d      	b.n	4009a0 <pio_configure+0xac>
  400924:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400928:	d01a      	beq.n	400960 <pio_configure+0x6c>
  40092a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40092e:	d017      	beq.n	400960 <pio_configure+0x6c>
  400930:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400934:	d00e      	beq.n	400954 <pio_configure+0x60>
  400936:	e033      	b.n	4009a0 <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400938:	687a      	ldr	r2, [r7, #4]
  40093a:	68b9      	ldr	r1, [r7, #8]
  40093c:	68f8      	ldr	r0, [r7, #12]
  40093e:	4b1c      	ldr	r3, [pc, #112]	; (4009b0 <pio_configure+0xbc>)
  400940:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  400942:	683b      	ldr	r3, [r7, #0]
  400944:	f003 0301 	and.w	r3, r3, #1
  400948:	461a      	mov	r2, r3
  40094a:	6879      	ldr	r1, [r7, #4]
  40094c:	68f8      	ldr	r0, [r7, #12]
  40094e:	4b19      	ldr	r3, [pc, #100]	; (4009b4 <pio_configure+0xc0>)
  400950:	4798      	blx	r3
		break;
  400952:	e027      	b.n	4009a4 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400954:	683a      	ldr	r2, [r7, #0]
  400956:	6879      	ldr	r1, [r7, #4]
  400958:	68f8      	ldr	r0, [r7, #12]
  40095a:	4b17      	ldr	r3, [pc, #92]	; (4009b8 <pio_configure+0xc4>)
  40095c:	4798      	blx	r3
		break;
  40095e:	e021      	b.n	4009a4 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400960:	68bb      	ldr	r3, [r7, #8]
  400962:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400966:	bf0c      	ite	eq
  400968:	2301      	moveq	r3, #1
  40096a:	2300      	movne	r3, #0
  40096c:	b2db      	uxtb	r3, r3
  40096e:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  400970:	683b      	ldr	r3, [r7, #0]
  400972:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400976:	2b00      	cmp	r3, #0
  400978:	bf14      	ite	ne
  40097a:	2301      	movne	r3, #1
  40097c:	2300      	moveq	r3, #0
  40097e:	b2db      	uxtb	r3, r3
  400980:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  400982:	683b      	ldr	r3, [r7, #0]
  400984:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400988:	2b00      	cmp	r3, #0
  40098a:	bf14      	ite	ne
  40098c:	2301      	movne	r3, #1
  40098e:	2300      	moveq	r3, #0
  400990:	b2db      	uxtb	r3, r3
  400992:	9300      	str	r3, [sp, #0]
  400994:	460b      	mov	r3, r1
  400996:	6879      	ldr	r1, [r7, #4]
  400998:	68f8      	ldr	r0, [r7, #12]
  40099a:	4c08      	ldr	r4, [pc, #32]	; (4009bc <pio_configure+0xc8>)
  40099c:	47a0      	blx	r4
		break;
  40099e:	e001      	b.n	4009a4 <pio_configure+0xb0>

	default:
		return 0;
  4009a0:	2300      	movs	r3, #0
  4009a2:	e000      	b.n	4009a6 <pio_configure+0xb2>
	}

	return 1;
  4009a4:	2301      	movs	r3, #1
}
  4009a6:	4618      	mov	r0, r3
  4009a8:	3714      	adds	r7, #20
  4009aa:	46bd      	mov	sp, r7
  4009ac:	bd90      	pop	{r4, r7, pc}
  4009ae:	bf00      	nop
  4009b0:	00400701 	.word	0x00400701
  4009b4:	004006b9 	.word	0x004006b9
  4009b8:	00400811 	.word	0x00400811
  4009bc:	00400891 	.word	0x00400891

004009c0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4009c0:	b480      	push	{r7}
  4009c2:	b083      	sub	sp, #12
  4009c4:	af00      	add	r7, sp, #0
  4009c6:	6078      	str	r0, [r7, #4]
  4009c8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4009ca:	687b      	ldr	r3, [r7, #4]
  4009cc:	683a      	ldr	r2, [r7, #0]
  4009ce:	645a      	str	r2, [r3, #68]	; 0x44
}
  4009d0:	bf00      	nop
  4009d2:	370c      	adds	r7, #12
  4009d4:	46bd      	mov	sp, r7
  4009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009da:	4770      	bx	lr

004009dc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4009dc:	b480      	push	{r7}
  4009de:	b083      	sub	sp, #12
  4009e0:	af00      	add	r7, sp, #0
  4009e2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4009e4:	687b      	ldr	r3, [r7, #4]
  4009e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4009e8:	4618      	mov	r0, r3
  4009ea:	370c      	adds	r7, #12
  4009ec:	46bd      	mov	sp, r7
  4009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009f2:	4770      	bx	lr

004009f4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4009f4:	b480      	push	{r7}
  4009f6:	b083      	sub	sp, #12
  4009f8:	af00      	add	r7, sp, #0
  4009fa:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4009fc:	687b      	ldr	r3, [r7, #4]
  4009fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400a00:	4618      	mov	r0, r3
  400a02:	370c      	adds	r7, #12
  400a04:	46bd      	mov	sp, r7
  400a06:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a0a:	4770      	bx	lr

00400a0c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400a0c:	b580      	push	{r7, lr}
  400a0e:	b084      	sub	sp, #16
  400a10:	af00      	add	r7, sp, #0
  400a12:	6078      	str	r0, [r7, #4]
  400a14:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400a16:	6878      	ldr	r0, [r7, #4]
  400a18:	4b26      	ldr	r3, [pc, #152]	; (400ab4 <pio_handler_process+0xa8>)
  400a1a:	4798      	blx	r3
  400a1c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  400a1e:	6878      	ldr	r0, [r7, #4]
  400a20:	4b25      	ldr	r3, [pc, #148]	; (400ab8 <pio_handler_process+0xac>)
  400a22:	4798      	blx	r3
  400a24:	4602      	mov	r2, r0
  400a26:	68fb      	ldr	r3, [r7, #12]
  400a28:	4013      	ands	r3, r2
  400a2a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400a2c:	68fb      	ldr	r3, [r7, #12]
  400a2e:	2b00      	cmp	r3, #0
  400a30:	d03c      	beq.n	400aac <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  400a32:	2300      	movs	r3, #0
  400a34:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400a36:	e034      	b.n	400aa2 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400a38:	4a20      	ldr	r2, [pc, #128]	; (400abc <pio_handler_process+0xb0>)
  400a3a:	68bb      	ldr	r3, [r7, #8]
  400a3c:	011b      	lsls	r3, r3, #4
  400a3e:	4413      	add	r3, r2
  400a40:	681a      	ldr	r2, [r3, #0]
  400a42:	683b      	ldr	r3, [r7, #0]
  400a44:	429a      	cmp	r2, r3
  400a46:	d126      	bne.n	400a96 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400a48:	4a1c      	ldr	r2, [pc, #112]	; (400abc <pio_handler_process+0xb0>)
  400a4a:	68bb      	ldr	r3, [r7, #8]
  400a4c:	011b      	lsls	r3, r3, #4
  400a4e:	4413      	add	r3, r2
  400a50:	3304      	adds	r3, #4
  400a52:	681a      	ldr	r2, [r3, #0]
  400a54:	68fb      	ldr	r3, [r7, #12]
  400a56:	4013      	ands	r3, r2
  400a58:	2b00      	cmp	r3, #0
  400a5a:	d01c      	beq.n	400a96 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400a5c:	4a17      	ldr	r2, [pc, #92]	; (400abc <pio_handler_process+0xb0>)
  400a5e:	68bb      	ldr	r3, [r7, #8]
  400a60:	011b      	lsls	r3, r3, #4
  400a62:	4413      	add	r3, r2
  400a64:	330c      	adds	r3, #12
  400a66:	681b      	ldr	r3, [r3, #0]
  400a68:	4914      	ldr	r1, [pc, #80]	; (400abc <pio_handler_process+0xb0>)
  400a6a:	68ba      	ldr	r2, [r7, #8]
  400a6c:	0112      	lsls	r2, r2, #4
  400a6e:	440a      	add	r2, r1
  400a70:	6810      	ldr	r0, [r2, #0]
  400a72:	4912      	ldr	r1, [pc, #72]	; (400abc <pio_handler_process+0xb0>)
  400a74:	68ba      	ldr	r2, [r7, #8]
  400a76:	0112      	lsls	r2, r2, #4
  400a78:	440a      	add	r2, r1
  400a7a:	3204      	adds	r2, #4
  400a7c:	6812      	ldr	r2, [r2, #0]
  400a7e:	4611      	mov	r1, r2
  400a80:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400a82:	4a0e      	ldr	r2, [pc, #56]	; (400abc <pio_handler_process+0xb0>)
  400a84:	68bb      	ldr	r3, [r7, #8]
  400a86:	011b      	lsls	r3, r3, #4
  400a88:	4413      	add	r3, r2
  400a8a:	3304      	adds	r3, #4
  400a8c:	681b      	ldr	r3, [r3, #0]
  400a8e:	43db      	mvns	r3, r3
  400a90:	68fa      	ldr	r2, [r7, #12]
  400a92:	4013      	ands	r3, r2
  400a94:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  400a96:	68bb      	ldr	r3, [r7, #8]
  400a98:	3301      	adds	r3, #1
  400a9a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  400a9c:	68bb      	ldr	r3, [r7, #8]
  400a9e:	2b06      	cmp	r3, #6
  400aa0:	d803      	bhi.n	400aaa <pio_handler_process+0x9e>
		while (status != 0) {
  400aa2:	68fb      	ldr	r3, [r7, #12]
  400aa4:	2b00      	cmp	r3, #0
  400aa6:	d1c7      	bne.n	400a38 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  400aa8:	e000      	b.n	400aac <pio_handler_process+0xa0>
				break;
  400aaa:	bf00      	nop
}
  400aac:	bf00      	nop
  400aae:	3710      	adds	r7, #16
  400ab0:	46bd      	mov	sp, r7
  400ab2:	bd80      	pop	{r7, pc}
  400ab4:	004009dd 	.word	0x004009dd
  400ab8:	004009f5 	.word	0x004009f5
  400abc:	20400458 	.word	0x20400458

00400ac0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400ac0:	b580      	push	{r7, lr}
  400ac2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  400ac4:	210a      	movs	r1, #10
  400ac6:	4802      	ldr	r0, [pc, #8]	; (400ad0 <PIOA_Handler+0x10>)
  400ac8:	4b02      	ldr	r3, [pc, #8]	; (400ad4 <PIOA_Handler+0x14>)
  400aca:	4798      	blx	r3
}
  400acc:	bf00      	nop
  400ace:	bd80      	pop	{r7, pc}
  400ad0:	400e0e00 	.word	0x400e0e00
  400ad4:	00400a0d 	.word	0x00400a0d

00400ad8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ad8:	b580      	push	{r7, lr}
  400ada:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  400adc:	210b      	movs	r1, #11
  400ade:	4802      	ldr	r0, [pc, #8]	; (400ae8 <PIOB_Handler+0x10>)
  400ae0:	4b02      	ldr	r3, [pc, #8]	; (400aec <PIOB_Handler+0x14>)
  400ae2:	4798      	blx	r3
}
  400ae4:	bf00      	nop
  400ae6:	bd80      	pop	{r7, pc}
  400ae8:	400e1000 	.word	0x400e1000
  400aec:	00400a0d 	.word	0x00400a0d

00400af0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400af0:	b580      	push	{r7, lr}
  400af2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  400af4:	210c      	movs	r1, #12
  400af6:	4802      	ldr	r0, [pc, #8]	; (400b00 <PIOC_Handler+0x10>)
  400af8:	4b02      	ldr	r3, [pc, #8]	; (400b04 <PIOC_Handler+0x14>)
  400afa:	4798      	blx	r3
}
  400afc:	bf00      	nop
  400afe:	bd80      	pop	{r7, pc}
  400b00:	400e1200 	.word	0x400e1200
  400b04:	00400a0d 	.word	0x00400a0d

00400b08 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400b08:	b580      	push	{r7, lr}
  400b0a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  400b0c:	2110      	movs	r1, #16
  400b0e:	4802      	ldr	r0, [pc, #8]	; (400b18 <PIOD_Handler+0x10>)
  400b10:	4b02      	ldr	r3, [pc, #8]	; (400b1c <PIOD_Handler+0x14>)
  400b12:	4798      	blx	r3
}
  400b14:	bf00      	nop
  400b16:	bd80      	pop	{r7, pc}
  400b18:	400e1400 	.word	0x400e1400
  400b1c:	00400a0d 	.word	0x00400a0d

00400b20 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400b20:	b580      	push	{r7, lr}
  400b22:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  400b24:	2111      	movs	r1, #17
  400b26:	4802      	ldr	r0, [pc, #8]	; (400b30 <PIOE_Handler+0x10>)
  400b28:	4b02      	ldr	r3, [pc, #8]	; (400b34 <PIOE_Handler+0x14>)
  400b2a:	4798      	blx	r3
}
  400b2c:	bf00      	nop
  400b2e:	bd80      	pop	{r7, pc}
  400b30:	400e1600 	.word	0x400e1600
  400b34:	00400a0d 	.word	0x00400a0d

00400b38 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  400b38:	b480      	push	{r7}
  400b3a:	b083      	sub	sp, #12
  400b3c:	af00      	add	r7, sp, #0
  400b3e:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  400b40:	687b      	ldr	r3, [r7, #4]
  400b42:	3b01      	subs	r3, #1
  400b44:	2b03      	cmp	r3, #3
  400b46:	d81a      	bhi.n	400b7e <pmc_mck_set_division+0x46>
  400b48:	a201      	add	r2, pc, #4	; (adr r2, 400b50 <pmc_mck_set_division+0x18>)
  400b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400b4e:	bf00      	nop
  400b50:	00400b61 	.word	0x00400b61
  400b54:	00400b67 	.word	0x00400b67
  400b58:	00400b6f 	.word	0x00400b6f
  400b5c:	00400b77 	.word	0x00400b77
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b60:	2300      	movs	r3, #0
  400b62:	607b      	str	r3, [r7, #4]
			break;
  400b64:	e00e      	b.n	400b84 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  400b66:	f44f 7380 	mov.w	r3, #256	; 0x100
  400b6a:	607b      	str	r3, [r7, #4]
			break;
  400b6c:	e00a      	b.n	400b84 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400b6e:	f44f 7340 	mov.w	r3, #768	; 0x300
  400b72:	607b      	str	r3, [r7, #4]
			break;
  400b74:	e006      	b.n	400b84 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400b76:	f44f 7300 	mov.w	r3, #512	; 0x200
  400b7a:	607b      	str	r3, [r7, #4]
			break;
  400b7c:	e002      	b.n	400b84 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400b7e:	2300      	movs	r3, #0
  400b80:	607b      	str	r3, [r7, #4]
			break;
  400b82:	bf00      	nop
	}
	PMC->PMC_MCKR =
  400b84:	490a      	ldr	r1, [pc, #40]	; (400bb0 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400b86:	4b0a      	ldr	r3, [pc, #40]	; (400bb0 <pmc_mck_set_division+0x78>)
  400b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  400b8e:	687b      	ldr	r3, [r7, #4]
  400b90:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  400b92:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b94:	bf00      	nop
  400b96:	4b06      	ldr	r3, [pc, #24]	; (400bb0 <pmc_mck_set_division+0x78>)
  400b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400b9a:	f003 0308 	and.w	r3, r3, #8
  400b9e:	2b00      	cmp	r3, #0
  400ba0:	d0f9      	beq.n	400b96 <pmc_mck_set_division+0x5e>
}
  400ba2:	bf00      	nop
  400ba4:	370c      	adds	r7, #12
  400ba6:	46bd      	mov	sp, r7
  400ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bac:	4770      	bx	lr
  400bae:	bf00      	nop
  400bb0:	400e0600 	.word	0x400e0600

00400bb4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400bb4:	b480      	push	{r7}
  400bb6:	b085      	sub	sp, #20
  400bb8:	af00      	add	r7, sp, #0
  400bba:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400bbc:	491d      	ldr	r1, [pc, #116]	; (400c34 <pmc_switch_mck_to_pllack+0x80>)
  400bbe:	4b1d      	ldr	r3, [pc, #116]	; (400c34 <pmc_switch_mck_to_pllack+0x80>)
  400bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400bc6:	687b      	ldr	r3, [r7, #4]
  400bc8:	4313      	orrs	r3, r2
  400bca:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400bd0:	60fb      	str	r3, [r7, #12]
  400bd2:	e007      	b.n	400be4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400bd4:	68fb      	ldr	r3, [r7, #12]
  400bd6:	2b00      	cmp	r3, #0
  400bd8:	d101      	bne.n	400bde <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400bda:	2301      	movs	r3, #1
  400bdc:	e023      	b.n	400c26 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400bde:	68fb      	ldr	r3, [r7, #12]
  400be0:	3b01      	subs	r3, #1
  400be2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400be4:	4b13      	ldr	r3, [pc, #76]	; (400c34 <pmc_switch_mck_to_pllack+0x80>)
  400be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400be8:	f003 0308 	and.w	r3, r3, #8
  400bec:	2b00      	cmp	r3, #0
  400bee:	d0f1      	beq.n	400bd4 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400bf0:	4a10      	ldr	r2, [pc, #64]	; (400c34 <pmc_switch_mck_to_pllack+0x80>)
  400bf2:	4b10      	ldr	r3, [pc, #64]	; (400c34 <pmc_switch_mck_to_pllack+0x80>)
  400bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bf6:	f023 0303 	bic.w	r3, r3, #3
  400bfa:	f043 0302 	orr.w	r3, r3, #2
  400bfe:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400c04:	60fb      	str	r3, [r7, #12]
  400c06:	e007      	b.n	400c18 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400c08:	68fb      	ldr	r3, [r7, #12]
  400c0a:	2b00      	cmp	r3, #0
  400c0c:	d101      	bne.n	400c12 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400c0e:	2301      	movs	r3, #1
  400c10:	e009      	b.n	400c26 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400c12:	68fb      	ldr	r3, [r7, #12]
  400c14:	3b01      	subs	r3, #1
  400c16:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400c18:	4b06      	ldr	r3, [pc, #24]	; (400c34 <pmc_switch_mck_to_pllack+0x80>)
  400c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c1c:	f003 0308 	and.w	r3, r3, #8
  400c20:	2b00      	cmp	r3, #0
  400c22:	d0f1      	beq.n	400c08 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400c24:	2300      	movs	r3, #0
}
  400c26:	4618      	mov	r0, r3
  400c28:	3714      	adds	r7, #20
  400c2a:	46bd      	mov	sp, r7
  400c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c30:	4770      	bx	lr
  400c32:	bf00      	nop
  400c34:	400e0600 	.word	0x400e0600

00400c38 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400c38:	b480      	push	{r7}
  400c3a:	b083      	sub	sp, #12
  400c3c:	af00      	add	r7, sp, #0
  400c3e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400c40:	687b      	ldr	r3, [r7, #4]
  400c42:	2b01      	cmp	r3, #1
  400c44:	d105      	bne.n	400c52 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400c46:	4907      	ldr	r1, [pc, #28]	; (400c64 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400c48:	4b06      	ldr	r3, [pc, #24]	; (400c64 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400c4a:	689a      	ldr	r2, [r3, #8]
  400c4c:	4b06      	ldr	r3, [pc, #24]	; (400c68 <pmc_switch_sclk_to_32kxtal+0x30>)
  400c4e:	4313      	orrs	r3, r2
  400c50:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400c52:	4b04      	ldr	r3, [pc, #16]	; (400c64 <pmc_switch_sclk_to_32kxtal+0x2c>)
  400c54:	4a05      	ldr	r2, [pc, #20]	; (400c6c <pmc_switch_sclk_to_32kxtal+0x34>)
  400c56:	601a      	str	r2, [r3, #0]
}
  400c58:	bf00      	nop
  400c5a:	370c      	adds	r7, #12
  400c5c:	46bd      	mov	sp, r7
  400c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c62:	4770      	bx	lr
  400c64:	400e1810 	.word	0x400e1810
  400c68:	a5100000 	.word	0xa5100000
  400c6c:	a5000008 	.word	0xa5000008

00400c70 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400c70:	b480      	push	{r7}
  400c72:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400c74:	4b09      	ldr	r3, [pc, #36]	; (400c9c <pmc_osc_is_ready_32kxtal+0x2c>)
  400c76:	695b      	ldr	r3, [r3, #20]
  400c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400c7c:	2b00      	cmp	r3, #0
  400c7e:	d007      	beq.n	400c90 <pmc_osc_is_ready_32kxtal+0x20>
  400c80:	4b07      	ldr	r3, [pc, #28]	; (400ca0 <pmc_osc_is_ready_32kxtal+0x30>)
  400c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400c88:	2b00      	cmp	r3, #0
  400c8a:	d001      	beq.n	400c90 <pmc_osc_is_ready_32kxtal+0x20>
  400c8c:	2301      	movs	r3, #1
  400c8e:	e000      	b.n	400c92 <pmc_osc_is_ready_32kxtal+0x22>
  400c90:	2300      	movs	r3, #0
}
  400c92:	4618      	mov	r0, r3
  400c94:	46bd      	mov	sp, r7
  400c96:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c9a:	4770      	bx	lr
  400c9c:	400e1810 	.word	0x400e1810
  400ca0:	400e0600 	.word	0x400e0600

00400ca4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400ca4:	b480      	push	{r7}
  400ca6:	b083      	sub	sp, #12
  400ca8:	af00      	add	r7, sp, #0
  400caa:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400cac:	4915      	ldr	r1, [pc, #84]	; (400d04 <pmc_switch_mainck_to_fastrc+0x60>)
  400cae:	4b15      	ldr	r3, [pc, #84]	; (400d04 <pmc_switch_mainck_to_fastrc+0x60>)
  400cb0:	6a1a      	ldr	r2, [r3, #32]
  400cb2:	4b15      	ldr	r3, [pc, #84]	; (400d08 <pmc_switch_mainck_to_fastrc+0x64>)
  400cb4:	4313      	orrs	r3, r2
  400cb6:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400cb8:	bf00      	nop
  400cba:	4b12      	ldr	r3, [pc, #72]	; (400d04 <pmc_switch_mainck_to_fastrc+0x60>)
  400cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400cc2:	2b00      	cmp	r3, #0
  400cc4:	d0f9      	beq.n	400cba <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400cc6:	490f      	ldr	r1, [pc, #60]	; (400d04 <pmc_switch_mainck_to_fastrc+0x60>)
  400cc8:	4b0e      	ldr	r3, [pc, #56]	; (400d04 <pmc_switch_mainck_to_fastrc+0x60>)
  400cca:	6a1a      	ldr	r2, [r3, #32]
  400ccc:	4b0f      	ldr	r3, [pc, #60]	; (400d0c <pmc_switch_mainck_to_fastrc+0x68>)
  400cce:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400cd0:	687a      	ldr	r2, [r7, #4]
  400cd2:	4313      	orrs	r3, r2
  400cd4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400cd8:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400cda:	bf00      	nop
  400cdc:	4b09      	ldr	r3, [pc, #36]	; (400d04 <pmc_switch_mainck_to_fastrc+0x60>)
  400cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400ce4:	2b00      	cmp	r3, #0
  400ce6:	d0f9      	beq.n	400cdc <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400ce8:	4906      	ldr	r1, [pc, #24]	; (400d04 <pmc_switch_mainck_to_fastrc+0x60>)
  400cea:	4b06      	ldr	r3, [pc, #24]	; (400d04 <pmc_switch_mainck_to_fastrc+0x60>)
  400cec:	6a1a      	ldr	r2, [r3, #32]
  400cee:	4b08      	ldr	r3, [pc, #32]	; (400d10 <pmc_switch_mainck_to_fastrc+0x6c>)
  400cf0:	4013      	ands	r3, r2
  400cf2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400cf6:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400cf8:	bf00      	nop
  400cfa:	370c      	adds	r7, #12
  400cfc:	46bd      	mov	sp, r7
  400cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d02:	4770      	bx	lr
  400d04:	400e0600 	.word	0x400e0600
  400d08:	00370008 	.word	0x00370008
  400d0c:	ffc8ff8f 	.word	0xffc8ff8f
  400d10:	fec8ffff 	.word	0xfec8ffff

00400d14 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400d14:	b480      	push	{r7}
  400d16:	b083      	sub	sp, #12
  400d18:	af00      	add	r7, sp, #0
  400d1a:	6078      	str	r0, [r7, #4]
  400d1c:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400d1e:	687b      	ldr	r3, [r7, #4]
  400d20:	2b00      	cmp	r3, #0
  400d22:	d008      	beq.n	400d36 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400d24:	4913      	ldr	r1, [pc, #76]	; (400d74 <pmc_switch_mainck_to_xtal+0x60>)
  400d26:	4b13      	ldr	r3, [pc, #76]	; (400d74 <pmc_switch_mainck_to_xtal+0x60>)
  400d28:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400d2a:	4a13      	ldr	r2, [pc, #76]	; (400d78 <pmc_switch_mainck_to_xtal+0x64>)
  400d2c:	401a      	ands	r2, r3
  400d2e:	4b13      	ldr	r3, [pc, #76]	; (400d7c <pmc_switch_mainck_to_xtal+0x68>)
  400d30:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400d32:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400d34:	e018      	b.n	400d68 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d36:	490f      	ldr	r1, [pc, #60]	; (400d74 <pmc_switch_mainck_to_xtal+0x60>)
  400d38:	4b0e      	ldr	r3, [pc, #56]	; (400d74 <pmc_switch_mainck_to_xtal+0x60>)
  400d3a:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d3c:	4b10      	ldr	r3, [pc, #64]	; (400d80 <pmc_switch_mainck_to_xtal+0x6c>)
  400d3e:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400d40:	683a      	ldr	r2, [r7, #0]
  400d42:	0212      	lsls	r2, r2, #8
  400d44:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d46:	431a      	orrs	r2, r3
  400d48:	4b0e      	ldr	r3, [pc, #56]	; (400d84 <pmc_switch_mainck_to_xtal+0x70>)
  400d4a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d4c:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400d4e:	bf00      	nop
  400d50:	4b08      	ldr	r3, [pc, #32]	; (400d74 <pmc_switch_mainck_to_xtal+0x60>)
  400d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d54:	f003 0301 	and.w	r3, r3, #1
  400d58:	2b00      	cmp	r3, #0
  400d5a:	d0f9      	beq.n	400d50 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400d5c:	4905      	ldr	r1, [pc, #20]	; (400d74 <pmc_switch_mainck_to_xtal+0x60>)
  400d5e:	4b05      	ldr	r3, [pc, #20]	; (400d74 <pmc_switch_mainck_to_xtal+0x60>)
  400d60:	6a1a      	ldr	r2, [r3, #32]
  400d62:	4b09      	ldr	r3, [pc, #36]	; (400d88 <pmc_switch_mainck_to_xtal+0x74>)
  400d64:	4313      	orrs	r3, r2
  400d66:	620b      	str	r3, [r1, #32]
}
  400d68:	bf00      	nop
  400d6a:	370c      	adds	r7, #12
  400d6c:	46bd      	mov	sp, r7
  400d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d72:	4770      	bx	lr
  400d74:	400e0600 	.word	0x400e0600
  400d78:	fec8fffc 	.word	0xfec8fffc
  400d7c:	01370002 	.word	0x01370002
  400d80:	ffc8fffc 	.word	0xffc8fffc
  400d84:	00370001 	.word	0x00370001
  400d88:	01370000 	.word	0x01370000

00400d8c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  400d8c:	b480      	push	{r7}
  400d8e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400d90:	4b04      	ldr	r3, [pc, #16]	; (400da4 <pmc_osc_is_ready_mainck+0x18>)
  400d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  400d98:	4618      	mov	r0, r3
  400d9a:	46bd      	mov	sp, r7
  400d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400da0:	4770      	bx	lr
  400da2:	bf00      	nop
  400da4:	400e0600 	.word	0x400e0600

00400da8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  400da8:	b480      	push	{r7}
  400daa:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400dac:	4b04      	ldr	r3, [pc, #16]	; (400dc0 <pmc_disable_pllack+0x18>)
  400dae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400db2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  400db4:	bf00      	nop
  400db6:	46bd      	mov	sp, r7
  400db8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400dbc:	4770      	bx	lr
  400dbe:	bf00      	nop
  400dc0:	400e0600 	.word	0x400e0600

00400dc4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  400dc4:	b480      	push	{r7}
  400dc6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400dc8:	4b04      	ldr	r3, [pc, #16]	; (400ddc <pmc_is_locked_pllack+0x18>)
  400dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400dcc:	f003 0302 	and.w	r3, r3, #2
}
  400dd0:	4618      	mov	r0, r3
  400dd2:	46bd      	mov	sp, r7
  400dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400dd8:	4770      	bx	lr
  400dda:	bf00      	nop
  400ddc:	400e0600 	.word	0x400e0600

00400de0 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  400de0:	b480      	push	{r7}
  400de2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  400de4:	4b04      	ldr	r3, [pc, #16]	; (400df8 <pmc_is_locked_upll+0x18>)
  400de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  400dec:	4618      	mov	r0, r3
  400dee:	46bd      	mov	sp, r7
  400df0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400df4:	4770      	bx	lr
  400df6:	bf00      	nop
  400df8:	400e0600 	.word	0x400e0600

00400dfc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  400dfc:	b480      	push	{r7}
  400dfe:	b083      	sub	sp, #12
  400e00:	af00      	add	r7, sp, #0
  400e02:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  400e04:	687b      	ldr	r3, [r7, #4]
  400e06:	2b3f      	cmp	r3, #63	; 0x3f
  400e08:	d901      	bls.n	400e0e <pmc_enable_periph_clk+0x12>
		return 1;
  400e0a:	2301      	movs	r3, #1
  400e0c:	e02f      	b.n	400e6e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  400e0e:	687b      	ldr	r3, [r7, #4]
  400e10:	2b1f      	cmp	r3, #31
  400e12:	d813      	bhi.n	400e3c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400e14:	4b19      	ldr	r3, [pc, #100]	; (400e7c <pmc_enable_periph_clk+0x80>)
  400e16:	699a      	ldr	r2, [r3, #24]
  400e18:	2101      	movs	r1, #1
  400e1a:	687b      	ldr	r3, [r7, #4]
  400e1c:	fa01 f303 	lsl.w	r3, r1, r3
  400e20:	401a      	ands	r2, r3
  400e22:	2101      	movs	r1, #1
  400e24:	687b      	ldr	r3, [r7, #4]
  400e26:	fa01 f303 	lsl.w	r3, r1, r3
  400e2a:	429a      	cmp	r2, r3
  400e2c:	d01e      	beq.n	400e6c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  400e2e:	4a13      	ldr	r2, [pc, #76]	; (400e7c <pmc_enable_periph_clk+0x80>)
  400e30:	2101      	movs	r1, #1
  400e32:	687b      	ldr	r3, [r7, #4]
  400e34:	fa01 f303 	lsl.w	r3, r1, r3
  400e38:	6113      	str	r3, [r2, #16]
  400e3a:	e017      	b.n	400e6c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400e3c:	687b      	ldr	r3, [r7, #4]
  400e3e:	3b20      	subs	r3, #32
  400e40:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e42:	4b0e      	ldr	r3, [pc, #56]	; (400e7c <pmc_enable_periph_clk+0x80>)
  400e44:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400e48:	2101      	movs	r1, #1
  400e4a:	687b      	ldr	r3, [r7, #4]
  400e4c:	fa01 f303 	lsl.w	r3, r1, r3
  400e50:	401a      	ands	r2, r3
  400e52:	2101      	movs	r1, #1
  400e54:	687b      	ldr	r3, [r7, #4]
  400e56:	fa01 f303 	lsl.w	r3, r1, r3
  400e5a:	429a      	cmp	r2, r3
  400e5c:	d006      	beq.n	400e6c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  400e5e:	4a07      	ldr	r2, [pc, #28]	; (400e7c <pmc_enable_periph_clk+0x80>)
  400e60:	2101      	movs	r1, #1
  400e62:	687b      	ldr	r3, [r7, #4]
  400e64:	fa01 f303 	lsl.w	r3, r1, r3
  400e68:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  400e6c:	2300      	movs	r3, #0
}
  400e6e:	4618      	mov	r0, r3
  400e70:	370c      	adds	r7, #12
  400e72:	46bd      	mov	sp, r7
  400e74:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e78:	4770      	bx	lr
  400e7a:	bf00      	nop
  400e7c:	400e0600 	.word	0x400e0600

00400e80 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  400e80:	b480      	push	{r7}
  400e82:	b083      	sub	sp, #12
  400e84:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400e86:	f3ef 8310 	mrs	r3, PRIMASK
  400e8a:	607b      	str	r3, [r7, #4]
  return(result);
  400e8c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400e8e:	2b00      	cmp	r3, #0
  400e90:	bf0c      	ite	eq
  400e92:	2301      	moveq	r3, #1
  400e94:	2300      	movne	r3, #0
  400e96:	b2db      	uxtb	r3, r3
  400e98:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400e9a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400e9c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400ea0:	4b04      	ldr	r3, [pc, #16]	; (400eb4 <cpu_irq_save+0x34>)
  400ea2:	2200      	movs	r2, #0
  400ea4:	701a      	strb	r2, [r3, #0]
	return flags;
  400ea6:	683b      	ldr	r3, [r7, #0]
}
  400ea8:	4618      	mov	r0, r3
  400eaa:	370c      	adds	r7, #12
  400eac:	46bd      	mov	sp, r7
  400eae:	f85d 7b04 	ldr.w	r7, [sp], #4
  400eb2:	4770      	bx	lr
  400eb4:	2040000a 	.word	0x2040000a

00400eb8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  400eb8:	b480      	push	{r7}
  400eba:	b083      	sub	sp, #12
  400ebc:	af00      	add	r7, sp, #0
  400ebe:	6078      	str	r0, [r7, #4]
	return (flags);
  400ec0:	687b      	ldr	r3, [r7, #4]
  400ec2:	2b00      	cmp	r3, #0
  400ec4:	bf14      	ite	ne
  400ec6:	2301      	movne	r3, #1
  400ec8:	2300      	moveq	r3, #0
  400eca:	b2db      	uxtb	r3, r3
}
  400ecc:	4618      	mov	r0, r3
  400ece:	370c      	adds	r7, #12
  400ed0:	46bd      	mov	sp, r7
  400ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ed6:	4770      	bx	lr

00400ed8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  400ed8:	b580      	push	{r7, lr}
  400eda:	b082      	sub	sp, #8
  400edc:	af00      	add	r7, sp, #0
  400ede:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  400ee0:	6878      	ldr	r0, [r7, #4]
  400ee2:	4b07      	ldr	r3, [pc, #28]	; (400f00 <cpu_irq_restore+0x28>)
  400ee4:	4798      	blx	r3
  400ee6:	4603      	mov	r3, r0
  400ee8:	2b00      	cmp	r3, #0
  400eea:	d005      	beq.n	400ef8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  400eec:	4b05      	ldr	r3, [pc, #20]	; (400f04 <cpu_irq_restore+0x2c>)
  400eee:	2201      	movs	r2, #1
  400ef0:	701a      	strb	r2, [r3, #0]
  400ef2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400ef6:	b662      	cpsie	i
}
  400ef8:	bf00      	nop
  400efa:	3708      	adds	r7, #8
  400efc:	46bd      	mov	sp, r7
  400efe:	bd80      	pop	{r7, pc}
  400f00:	00400eb9 	.word	0x00400eb9
  400f04:	2040000a 	.word	0x2040000a

00400f08 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400f08:	b580      	push	{r7, lr}
  400f0a:	b084      	sub	sp, #16
  400f0c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  400f0e:	4b1e      	ldr	r3, [pc, #120]	; (400f88 <Reset_Handler+0x80>)
  400f10:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  400f12:	4b1e      	ldr	r3, [pc, #120]	; (400f8c <Reset_Handler+0x84>)
  400f14:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  400f16:	68fa      	ldr	r2, [r7, #12]
  400f18:	68bb      	ldr	r3, [r7, #8]
  400f1a:	429a      	cmp	r2, r3
  400f1c:	d00c      	beq.n	400f38 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  400f1e:	e007      	b.n	400f30 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  400f20:	68bb      	ldr	r3, [r7, #8]
  400f22:	1d1a      	adds	r2, r3, #4
  400f24:	60ba      	str	r2, [r7, #8]
  400f26:	68fa      	ldr	r2, [r7, #12]
  400f28:	1d11      	adds	r1, r2, #4
  400f2a:	60f9      	str	r1, [r7, #12]
  400f2c:	6812      	ldr	r2, [r2, #0]
  400f2e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  400f30:	68bb      	ldr	r3, [r7, #8]
  400f32:	4a17      	ldr	r2, [pc, #92]	; (400f90 <Reset_Handler+0x88>)
  400f34:	4293      	cmp	r3, r2
  400f36:	d3f3      	bcc.n	400f20 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400f38:	4b16      	ldr	r3, [pc, #88]	; (400f94 <Reset_Handler+0x8c>)
  400f3a:	60bb      	str	r3, [r7, #8]
  400f3c:	e004      	b.n	400f48 <Reset_Handler+0x40>
                *pDest++ = 0;
  400f3e:	68bb      	ldr	r3, [r7, #8]
  400f40:	1d1a      	adds	r2, r3, #4
  400f42:	60ba      	str	r2, [r7, #8]
  400f44:	2200      	movs	r2, #0
  400f46:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  400f48:	68bb      	ldr	r3, [r7, #8]
  400f4a:	4a13      	ldr	r2, [pc, #76]	; (400f98 <Reset_Handler+0x90>)
  400f4c:	4293      	cmp	r3, r2
  400f4e:	d3f6      	bcc.n	400f3e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  400f50:	4b12      	ldr	r3, [pc, #72]	; (400f9c <Reset_Handler+0x94>)
  400f52:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400f54:	4a12      	ldr	r2, [pc, #72]	; (400fa0 <Reset_Handler+0x98>)
  400f56:	68fb      	ldr	r3, [r7, #12]
  400f58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400f5c:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  400f5e:	4b11      	ldr	r3, [pc, #68]	; (400fa4 <Reset_Handler+0x9c>)
  400f60:	4798      	blx	r3
  400f62:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  400f64:	4a10      	ldr	r2, [pc, #64]	; (400fa8 <Reset_Handler+0xa0>)
  400f66:	4b10      	ldr	r3, [pc, #64]	; (400fa8 <Reset_Handler+0xa0>)
  400f68:	681b      	ldr	r3, [r3, #0]
  400f6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400f6e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400f70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f74:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  400f78:	6878      	ldr	r0, [r7, #4]
  400f7a:	4b0c      	ldr	r3, [pc, #48]	; (400fac <Reset_Handler+0xa4>)
  400f7c:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  400f7e:	4b0c      	ldr	r3, [pc, #48]	; (400fb0 <Reset_Handler+0xa8>)
  400f80:	4798      	blx	r3

        /* Branch to main function */
        main();
  400f82:	4b0c      	ldr	r3, [pc, #48]	; (400fb4 <Reset_Handler+0xac>)
  400f84:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  400f86:	e7fe      	b.n	400f86 <Reset_Handler+0x7e>
  400f88:	00406358 	.word	0x00406358
  400f8c:	20400000 	.word	0x20400000
  400f90:	2040043c 	.word	0x2040043c
  400f94:	2040043c 	.word	0x2040043c
  400f98:	2040056c 	.word	0x2040056c
  400f9c:	00400000 	.word	0x00400000
  400fa0:	e000ed00 	.word	0xe000ed00
  400fa4:	00400e81 	.word	0x00400e81
  400fa8:	e000ed88 	.word	0xe000ed88
  400fac:	00400ed9 	.word	0x00400ed9
  400fb0:	004061b1 	.word	0x004061b1
  400fb4:	004057ed 	.word	0x004057ed

00400fb8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400fb8:	b480      	push	{r7}
  400fba:	af00      	add	r7, sp, #0
        while (1) {
  400fbc:	e7fe      	b.n	400fbc <Dummy_Handler+0x4>
	...

00400fc0 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  400fc0:	b480      	push	{r7}
  400fc2:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400fc4:	4b52      	ldr	r3, [pc, #328]	; (401110 <SystemCoreClockUpdate+0x150>)
  400fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fc8:	f003 0303 	and.w	r3, r3, #3
  400fcc:	2b01      	cmp	r3, #1
  400fce:	d014      	beq.n	400ffa <SystemCoreClockUpdate+0x3a>
  400fd0:	2b01      	cmp	r3, #1
  400fd2:	d302      	bcc.n	400fda <SystemCoreClockUpdate+0x1a>
  400fd4:	2b02      	cmp	r3, #2
  400fd6:	d038      	beq.n	40104a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  400fd8:	e07a      	b.n	4010d0 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400fda:	4b4e      	ldr	r3, [pc, #312]	; (401114 <SystemCoreClockUpdate+0x154>)
  400fdc:	695b      	ldr	r3, [r3, #20]
  400fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400fe2:	2b00      	cmp	r3, #0
  400fe4:	d004      	beq.n	400ff0 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400fe6:	4b4c      	ldr	r3, [pc, #304]	; (401118 <SystemCoreClockUpdate+0x158>)
  400fe8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400fec:	601a      	str	r2, [r3, #0]
    break;
  400fee:	e06f      	b.n	4010d0 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400ff0:	4b49      	ldr	r3, [pc, #292]	; (401118 <SystemCoreClockUpdate+0x158>)
  400ff2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  400ff6:	601a      	str	r2, [r3, #0]
    break;
  400ff8:	e06a      	b.n	4010d0 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ffa:	4b45      	ldr	r3, [pc, #276]	; (401110 <SystemCoreClockUpdate+0x150>)
  400ffc:	6a1b      	ldr	r3, [r3, #32]
  400ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401002:	2b00      	cmp	r3, #0
  401004:	d003      	beq.n	40100e <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401006:	4b44      	ldr	r3, [pc, #272]	; (401118 <SystemCoreClockUpdate+0x158>)
  401008:	4a44      	ldr	r2, [pc, #272]	; (40111c <SystemCoreClockUpdate+0x15c>)
  40100a:	601a      	str	r2, [r3, #0]
    break;
  40100c:	e060      	b.n	4010d0 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40100e:	4b42      	ldr	r3, [pc, #264]	; (401118 <SystemCoreClockUpdate+0x158>)
  401010:	4a43      	ldr	r2, [pc, #268]	; (401120 <SystemCoreClockUpdate+0x160>)
  401012:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401014:	4b3e      	ldr	r3, [pc, #248]	; (401110 <SystemCoreClockUpdate+0x150>)
  401016:	6a1b      	ldr	r3, [r3, #32]
  401018:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40101c:	2b10      	cmp	r3, #16
  40101e:	d004      	beq.n	40102a <SystemCoreClockUpdate+0x6a>
  401020:	2b20      	cmp	r3, #32
  401022:	d008      	beq.n	401036 <SystemCoreClockUpdate+0x76>
  401024:	2b00      	cmp	r3, #0
  401026:	d00e      	beq.n	401046 <SystemCoreClockUpdate+0x86>
          break;
  401028:	e00e      	b.n	401048 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  40102a:	4b3b      	ldr	r3, [pc, #236]	; (401118 <SystemCoreClockUpdate+0x158>)
  40102c:	681b      	ldr	r3, [r3, #0]
  40102e:	005b      	lsls	r3, r3, #1
  401030:	4a39      	ldr	r2, [pc, #228]	; (401118 <SystemCoreClockUpdate+0x158>)
  401032:	6013      	str	r3, [r2, #0]
          break;
  401034:	e008      	b.n	401048 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  401036:	4b38      	ldr	r3, [pc, #224]	; (401118 <SystemCoreClockUpdate+0x158>)
  401038:	681a      	ldr	r2, [r3, #0]
  40103a:	4613      	mov	r3, r2
  40103c:	005b      	lsls	r3, r3, #1
  40103e:	4413      	add	r3, r2
  401040:	4a35      	ldr	r2, [pc, #212]	; (401118 <SystemCoreClockUpdate+0x158>)
  401042:	6013      	str	r3, [r2, #0]
          break;
  401044:	e000      	b.n	401048 <SystemCoreClockUpdate+0x88>
          break;
  401046:	bf00      	nop
    break;
  401048:	e042      	b.n	4010d0 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40104a:	4b31      	ldr	r3, [pc, #196]	; (401110 <SystemCoreClockUpdate+0x150>)
  40104c:	6a1b      	ldr	r3, [r3, #32]
  40104e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401052:	2b00      	cmp	r3, #0
  401054:	d003      	beq.n	40105e <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401056:	4b30      	ldr	r3, [pc, #192]	; (401118 <SystemCoreClockUpdate+0x158>)
  401058:	4a30      	ldr	r2, [pc, #192]	; (40111c <SystemCoreClockUpdate+0x15c>)
  40105a:	601a      	str	r2, [r3, #0]
  40105c:	e01c      	b.n	401098 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40105e:	4b2e      	ldr	r3, [pc, #184]	; (401118 <SystemCoreClockUpdate+0x158>)
  401060:	4a2f      	ldr	r2, [pc, #188]	; (401120 <SystemCoreClockUpdate+0x160>)
  401062:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401064:	4b2a      	ldr	r3, [pc, #168]	; (401110 <SystemCoreClockUpdate+0x150>)
  401066:	6a1b      	ldr	r3, [r3, #32]
  401068:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40106c:	2b10      	cmp	r3, #16
  40106e:	d004      	beq.n	40107a <SystemCoreClockUpdate+0xba>
  401070:	2b20      	cmp	r3, #32
  401072:	d008      	beq.n	401086 <SystemCoreClockUpdate+0xc6>
  401074:	2b00      	cmp	r3, #0
  401076:	d00e      	beq.n	401096 <SystemCoreClockUpdate+0xd6>
          break;
  401078:	e00e      	b.n	401098 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  40107a:	4b27      	ldr	r3, [pc, #156]	; (401118 <SystemCoreClockUpdate+0x158>)
  40107c:	681b      	ldr	r3, [r3, #0]
  40107e:	005b      	lsls	r3, r3, #1
  401080:	4a25      	ldr	r2, [pc, #148]	; (401118 <SystemCoreClockUpdate+0x158>)
  401082:	6013      	str	r3, [r2, #0]
          break;
  401084:	e008      	b.n	401098 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  401086:	4b24      	ldr	r3, [pc, #144]	; (401118 <SystemCoreClockUpdate+0x158>)
  401088:	681a      	ldr	r2, [r3, #0]
  40108a:	4613      	mov	r3, r2
  40108c:	005b      	lsls	r3, r3, #1
  40108e:	4413      	add	r3, r2
  401090:	4a21      	ldr	r2, [pc, #132]	; (401118 <SystemCoreClockUpdate+0x158>)
  401092:	6013      	str	r3, [r2, #0]
          break;
  401094:	e000      	b.n	401098 <SystemCoreClockUpdate+0xd8>
          break;
  401096:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401098:	4b1d      	ldr	r3, [pc, #116]	; (401110 <SystemCoreClockUpdate+0x150>)
  40109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40109c:	f003 0303 	and.w	r3, r3, #3
  4010a0:	2b02      	cmp	r3, #2
  4010a2:	d114      	bne.n	4010ce <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4010a4:	4b1a      	ldr	r3, [pc, #104]	; (401110 <SystemCoreClockUpdate+0x150>)
  4010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4010a8:	0c1b      	lsrs	r3, r3, #16
  4010aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4010ae:	3301      	adds	r3, #1
  4010b0:	4a19      	ldr	r2, [pc, #100]	; (401118 <SystemCoreClockUpdate+0x158>)
  4010b2:	6812      	ldr	r2, [r2, #0]
  4010b4:	fb02 f303 	mul.w	r3, r2, r3
  4010b8:	4a17      	ldr	r2, [pc, #92]	; (401118 <SystemCoreClockUpdate+0x158>)
  4010ba:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4010bc:	4b14      	ldr	r3, [pc, #80]	; (401110 <SystemCoreClockUpdate+0x150>)
  4010be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4010c0:	b2db      	uxtb	r3, r3
  4010c2:	4a15      	ldr	r2, [pc, #84]	; (401118 <SystemCoreClockUpdate+0x158>)
  4010c4:	6812      	ldr	r2, [r2, #0]
  4010c6:	fbb2 f3f3 	udiv	r3, r2, r3
  4010ca:	4a13      	ldr	r2, [pc, #76]	; (401118 <SystemCoreClockUpdate+0x158>)
  4010cc:	6013      	str	r3, [r2, #0]
    break;
  4010ce:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4010d0:	4b0f      	ldr	r3, [pc, #60]	; (401110 <SystemCoreClockUpdate+0x150>)
  4010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010d8:	2b70      	cmp	r3, #112	; 0x70
  4010da:	d108      	bne.n	4010ee <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  4010dc:	4b0e      	ldr	r3, [pc, #56]	; (401118 <SystemCoreClockUpdate+0x158>)
  4010de:	681b      	ldr	r3, [r3, #0]
  4010e0:	4a10      	ldr	r2, [pc, #64]	; (401124 <SystemCoreClockUpdate+0x164>)
  4010e2:	fba2 2303 	umull	r2, r3, r2, r3
  4010e6:	085b      	lsrs	r3, r3, #1
  4010e8:	4a0b      	ldr	r2, [pc, #44]	; (401118 <SystemCoreClockUpdate+0x158>)
  4010ea:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  4010ec:	e00a      	b.n	401104 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4010ee:	4b08      	ldr	r3, [pc, #32]	; (401110 <SystemCoreClockUpdate+0x150>)
  4010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010f2:	091b      	lsrs	r3, r3, #4
  4010f4:	f003 0307 	and.w	r3, r3, #7
  4010f8:	4a07      	ldr	r2, [pc, #28]	; (401118 <SystemCoreClockUpdate+0x158>)
  4010fa:	6812      	ldr	r2, [r2, #0]
  4010fc:	fa22 f303 	lsr.w	r3, r2, r3
  401100:	4a05      	ldr	r2, [pc, #20]	; (401118 <SystemCoreClockUpdate+0x158>)
  401102:	6013      	str	r3, [r2, #0]
}
  401104:	bf00      	nop
  401106:	46bd      	mov	sp, r7
  401108:	f85d 7b04 	ldr.w	r7, [sp], #4
  40110c:	4770      	bx	lr
  40110e:	bf00      	nop
  401110:	400e0600 	.word	0x400e0600
  401114:	400e1810 	.word	0x400e1810
  401118:	2040000c 	.word	0x2040000c
  40111c:	00b71b00 	.word	0x00b71b00
  401120:	003d0900 	.word	0x003d0900
  401124:	aaaaaaab 	.word	0xaaaaaaab

00401128 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401128:	b480      	push	{r7}
  40112a:	b083      	sub	sp, #12
  40112c:	af00      	add	r7, sp, #0
  40112e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401130:	687b      	ldr	r3, [r7, #4]
  401132:	4a19      	ldr	r2, [pc, #100]	; (401198 <system_init_flash+0x70>)
  401134:	4293      	cmp	r3, r2
  401136:	d804      	bhi.n	401142 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401138:	4b18      	ldr	r3, [pc, #96]	; (40119c <system_init_flash+0x74>)
  40113a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40113e:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401140:	e023      	b.n	40118a <system_init_flash+0x62>
    if (ul_clk < CHIP_FREQ_FWS_1)
  401142:	687b      	ldr	r3, [r7, #4]
  401144:	4a16      	ldr	r2, [pc, #88]	; (4011a0 <system_init_flash+0x78>)
  401146:	4293      	cmp	r3, r2
  401148:	d803      	bhi.n	401152 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40114a:	4b14      	ldr	r3, [pc, #80]	; (40119c <system_init_flash+0x74>)
  40114c:	4a15      	ldr	r2, [pc, #84]	; (4011a4 <system_init_flash+0x7c>)
  40114e:	601a      	str	r2, [r3, #0]
}
  401150:	e01b      	b.n	40118a <system_init_flash+0x62>
      if (ul_clk < CHIP_FREQ_FWS_2)
  401152:	687b      	ldr	r3, [r7, #4]
  401154:	4a14      	ldr	r2, [pc, #80]	; (4011a8 <system_init_flash+0x80>)
  401156:	4293      	cmp	r3, r2
  401158:	d803      	bhi.n	401162 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40115a:	4b10      	ldr	r3, [pc, #64]	; (40119c <system_init_flash+0x74>)
  40115c:	4a13      	ldr	r2, [pc, #76]	; (4011ac <system_init_flash+0x84>)
  40115e:	601a      	str	r2, [r3, #0]
}
  401160:	e013      	b.n	40118a <system_init_flash+0x62>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401162:	687b      	ldr	r3, [r7, #4]
  401164:	4a12      	ldr	r2, [pc, #72]	; (4011b0 <system_init_flash+0x88>)
  401166:	4293      	cmp	r3, r2
  401168:	d803      	bhi.n	401172 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40116a:	4b0c      	ldr	r3, [pc, #48]	; (40119c <system_init_flash+0x74>)
  40116c:	4a11      	ldr	r2, [pc, #68]	; (4011b4 <system_init_flash+0x8c>)
  40116e:	601a      	str	r2, [r3, #0]
}
  401170:	e00b      	b.n	40118a <system_init_flash+0x62>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401172:	687b      	ldr	r3, [r7, #4]
  401174:	4a10      	ldr	r2, [pc, #64]	; (4011b8 <system_init_flash+0x90>)
  401176:	4293      	cmp	r3, r2
  401178:	d804      	bhi.n	401184 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40117a:	4b08      	ldr	r3, [pc, #32]	; (40119c <system_init_flash+0x74>)
  40117c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401180:	601a      	str	r2, [r3, #0]
}
  401182:	e002      	b.n	40118a <system_init_flash+0x62>
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401184:	4b05      	ldr	r3, [pc, #20]	; (40119c <system_init_flash+0x74>)
  401186:	4a0d      	ldr	r2, [pc, #52]	; (4011bc <system_init_flash+0x94>)
  401188:	601a      	str	r2, [r3, #0]
}
  40118a:	bf00      	nop
  40118c:	370c      	adds	r7, #12
  40118e:	46bd      	mov	sp, r7
  401190:	f85d 7b04 	ldr.w	r7, [sp], #4
  401194:	4770      	bx	lr
  401196:	bf00      	nop
  401198:	01312cff 	.word	0x01312cff
  40119c:	400e0c00 	.word	0x400e0c00
  4011a0:	026259ff 	.word	0x026259ff
  4011a4:	04000100 	.word	0x04000100
  4011a8:	039386ff 	.word	0x039386ff
  4011ac:	04000200 	.word	0x04000200
  4011b0:	04c4b3ff 	.word	0x04c4b3ff
  4011b4:	04000300 	.word	0x04000300
  4011b8:	05f5e0ff 	.word	0x05f5e0ff
  4011bc:	04000500 	.word	0x04000500

004011c0 <osc_get_rate>:
{
  4011c0:	b480      	push	{r7}
  4011c2:	b083      	sub	sp, #12
  4011c4:	af00      	add	r7, sp, #0
  4011c6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4011c8:	687b      	ldr	r3, [r7, #4]
  4011ca:	2b07      	cmp	r3, #7
  4011cc:	d825      	bhi.n	40121a <osc_get_rate+0x5a>
  4011ce:	a201      	add	r2, pc, #4	; (adr r2, 4011d4 <osc_get_rate+0x14>)
  4011d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4011d4:	004011f5 	.word	0x004011f5
  4011d8:	004011fb 	.word	0x004011fb
  4011dc:	00401201 	.word	0x00401201
  4011e0:	00401207 	.word	0x00401207
  4011e4:	0040120b 	.word	0x0040120b
  4011e8:	0040120f 	.word	0x0040120f
  4011ec:	00401213 	.word	0x00401213
  4011f0:	00401217 	.word	0x00401217
		return OSC_SLCK_32K_RC_HZ;
  4011f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4011f8:	e010      	b.n	40121c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4011fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4011fe:	e00d      	b.n	40121c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401204:	e00a      	b.n	40121c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401206:	4b08      	ldr	r3, [pc, #32]	; (401228 <osc_get_rate+0x68>)
  401208:	e008      	b.n	40121c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40120a:	4b08      	ldr	r3, [pc, #32]	; (40122c <osc_get_rate+0x6c>)
  40120c:	e006      	b.n	40121c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40120e:	4b08      	ldr	r3, [pc, #32]	; (401230 <osc_get_rate+0x70>)
  401210:	e004      	b.n	40121c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  401212:	4b07      	ldr	r3, [pc, #28]	; (401230 <osc_get_rate+0x70>)
  401214:	e002      	b.n	40121c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401216:	4b06      	ldr	r3, [pc, #24]	; (401230 <osc_get_rate+0x70>)
  401218:	e000      	b.n	40121c <osc_get_rate+0x5c>
	return 0;
  40121a:	2300      	movs	r3, #0
}
  40121c:	4618      	mov	r0, r3
  40121e:	370c      	adds	r7, #12
  401220:	46bd      	mov	sp, r7
  401222:	f85d 7b04 	ldr.w	r7, [sp], #4
  401226:	4770      	bx	lr
  401228:	003d0900 	.word	0x003d0900
  40122c:	007a1200 	.word	0x007a1200
  401230:	00b71b00 	.word	0x00b71b00

00401234 <sysclk_get_main_hz>:
{
  401234:	b580      	push	{r7, lr}
  401236:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401238:	2006      	movs	r0, #6
  40123a:	4b05      	ldr	r3, [pc, #20]	; (401250 <sysclk_get_main_hz+0x1c>)
  40123c:	4798      	blx	r3
  40123e:	4602      	mov	r2, r0
  401240:	4613      	mov	r3, r2
  401242:	009b      	lsls	r3, r3, #2
  401244:	4413      	add	r3, r2
  401246:	009a      	lsls	r2, r3, #2
  401248:	4413      	add	r3, r2
}
  40124a:	4618      	mov	r0, r3
  40124c:	bd80      	pop	{r7, pc}
  40124e:	bf00      	nop
  401250:	004011c1 	.word	0x004011c1

00401254 <sysclk_get_cpu_hz>:
{
  401254:	b580      	push	{r7, lr}
  401256:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401258:	4b02      	ldr	r3, [pc, #8]	; (401264 <sysclk_get_cpu_hz+0x10>)
  40125a:	4798      	blx	r3
  40125c:	4603      	mov	r3, r0
}
  40125e:	4618      	mov	r0, r3
  401260:	bd80      	pop	{r7, pc}
  401262:	bf00      	nop
  401264:	00401235 	.word	0x00401235

00401268 <data_0>:


///////WS2812/////////
//****************************************

void data_0(void){
  401268:	b480      	push	{r7}
  40126a:	b083      	sub	sp, #12
  40126c:	af00      	add	r7, sp, #0
	
	PIN_DATA->PIO_SODR = PIN_DATA_IDX_MASK;	//350ns
  40126e:	4b14      	ldr	r3, [pc, #80]	; (4012c0 <data_0+0x58>)
  401270:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401274:	631a      	str	r2, [r3, #48]	; 0x30
	for(uint8_t i=0; i<0; i++){}			//350ns
  401276:	2300      	movs	r3, #0
  401278:	71bb      	strb	r3, [r7, #6]
  40127a:	bf00      	nop
	PIN_DATA->PIO_SODR = PIN_DATA_IDX_MASK;	//350ns
  40127c:	4b10      	ldr	r3, [pc, #64]	; (4012c0 <data_0+0x58>)
  40127e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401282:	631a      	str	r2, [r3, #48]	; 0x30
	for(uint8_t i=0; i<0; i++){}			//350ns
  401284:	2300      	movs	r3, #0
  401286:	717b      	strb	r3, [r7, #5]
  401288:	bf00      	nop
	PIN_DATA->PIO_SODR = PIN_DATA_IDX_MASK;	//350ns
  40128a:	4b0d      	ldr	r3, [pc, #52]	; (4012c0 <data_0+0x58>)
  40128c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401290:	631a      	str	r2, [r3, #48]	; 0x30
	
	PIN_DATA->PIO_CODR = PIN_DATA_IDX_MASK;	//800ns
  401292:	4b0b      	ldr	r3, [pc, #44]	; (4012c0 <data_0+0x58>)
  401294:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401298:	635a      	str	r2, [r3, #52]	; 0x34
	for(uint8_t i=0; i<1; i++){}			//800ns
  40129a:	2300      	movs	r3, #0
  40129c:	71fb      	strb	r3, [r7, #7]
  40129e:	e002      	b.n	4012a6 <data_0+0x3e>
  4012a0:	79fb      	ldrb	r3, [r7, #7]
  4012a2:	3301      	adds	r3, #1
  4012a4:	71fb      	strb	r3, [r7, #7]
  4012a6:	79fb      	ldrb	r3, [r7, #7]
  4012a8:	2b00      	cmp	r3, #0
  4012aa:	d0f9      	beq.n	4012a0 <data_0+0x38>
	PIN_DATA->PIO_CODR = PIN_DATA_IDX_MASK;	//800ns
  4012ac:	4b04      	ldr	r3, [pc, #16]	; (4012c0 <data_0+0x58>)
  4012ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4012b2:	635a      	str	r2, [r3, #52]	; 0x34
}
  4012b4:	bf00      	nop
  4012b6:	370c      	adds	r7, #12
  4012b8:	46bd      	mov	sp, r7
  4012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012be:	4770      	bx	lr
  4012c0:	400e1400 	.word	0x400e1400

004012c4 <data_1>:

void data_1(void){
  4012c4:	b480      	push	{r7}
  4012c6:	b085      	sub	sp, #20
  4012c8:	af00      	add	r7, sp, #0
	int i = 0;
  4012ca:	2300      	movs	r3, #0
  4012cc:	60bb      	str	r3, [r7, #8]
	PIN_DATA->PIO_SODR = PIN_DATA_IDX_MASK; //700ns
  4012ce:	4b17      	ldr	r3, [pc, #92]	; (40132c <data_1+0x68>)
  4012d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4012d4:	631a      	str	r2, [r3, #48]	; 0x30
	for(uint8_t i=0; i<20; i++){}			//700ns
  4012d6:	2300      	movs	r3, #0
  4012d8:	73fb      	strb	r3, [r7, #15]
  4012da:	e002      	b.n	4012e2 <data_1+0x1e>
  4012dc:	7bfb      	ldrb	r3, [r7, #15]
  4012de:	3301      	adds	r3, #1
  4012e0:	73fb      	strb	r3, [r7, #15]
  4012e2:	7bfb      	ldrb	r3, [r7, #15]
  4012e4:	2b13      	cmp	r3, #19
  4012e6:	d9f9      	bls.n	4012dc <data_1+0x18>

	PIN_DATA->PIO_CODR = PIN_DATA_IDX_MASK;	// 600ns
  4012e8:	4b10      	ldr	r3, [pc, #64]	; (40132c <data_1+0x68>)
  4012ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4012ee:	635a      	str	r2, [r3, #52]	; 0x34
	for(uint8_t i=0; i<0; i++){}			// 600ns
  4012f0:	2300      	movs	r3, #0
  4012f2:	71fb      	strb	r3, [r7, #7]
  4012f4:	bf00      	nop
	PIN_DATA->PIO_CODR = PIN_DATA_IDX_MASK; // 600ns
  4012f6:	4b0d      	ldr	r3, [pc, #52]	; (40132c <data_1+0x68>)
  4012f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4012fc:	635a      	str	r2, [r3, #52]	; 0x34
	for(uint8_t i=0; i<0; i++){}			// 600ns
  4012fe:	2300      	movs	r3, #0
  401300:	71bb      	strb	r3, [r7, #6]
  401302:	bf00      	nop
	PIN_DATA->PIO_CODR = PIN_DATA_IDX_MASK; // 600ns
  401304:	4b09      	ldr	r3, [pc, #36]	; (40132c <data_1+0x68>)
  401306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40130a:	635a      	str	r2, [r3, #52]	; 0x34
	for(uint8_t i=0; i<0; i++){}			// 600ns
  40130c:	2300      	movs	r3, #0
  40130e:	717b      	strb	r3, [r7, #5]
  401310:	bf00      	nop
	PIN_DATA->PIO_CODR = PIN_DATA_IDX_MASK; // 600ns
  401312:	4b06      	ldr	r3, [pc, #24]	; (40132c <data_1+0x68>)
  401314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401318:	635a      	str	r2, [r3, #52]	; 0x34
	for(uint8_t i=0; i<0; i++){}			// 600ns
  40131a:	2300      	movs	r3, #0
  40131c:	713b      	strb	r3, [r7, #4]
  40131e:	bf00      	nop
	}
  401320:	bf00      	nop
  401322:	3714      	adds	r7, #20
  401324:	46bd      	mov	sp, r7
  401326:	f85d 7b04 	ldr.w	r7, [sp], #4
  40132a:	4770      	bx	lr
  40132c:	400e1400 	.word	0x400e1400

00401330 <data_reset>:
//****************************************
///////WS2812/////////



void data_reset(void){
  401330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401334:	af00      	add	r7, sp, #0
	
	pio_clear(PIN_DATA, PIN_DATA_IDX_MASK);
  401336:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40133a:	4819      	ldr	r0, [pc, #100]	; (4013a0 <data_reset+0x70>)
  40133c:	4b19      	ldr	r3, [pc, #100]	; (4013a4 <data_reset+0x74>)
  40133e:	4798      	blx	r3
	delay_us(60);
  401340:	4b19      	ldr	r3, [pc, #100]	; (4013a8 <data_reset+0x78>)
  401342:	4798      	blx	r3
  401344:	4603      	mov	r3, r0
  401346:	4619      	mov	r1, r3
  401348:	f04f 0200 	mov.w	r2, #0
  40134c:	460b      	mov	r3, r1
  40134e:	4614      	mov	r4, r2
  401350:	ea4f 1904 	mov.w	r9, r4, lsl #4
  401354:	ea49 7913 	orr.w	r9, r9, r3, lsr #28
  401358:	ea4f 1803 	mov.w	r8, r3, lsl #4
  40135c:	4643      	mov	r3, r8
  40135e:	464c      	mov	r4, r9
  401360:	1a5b      	subs	r3, r3, r1
  401362:	eb64 0402 	sbc.w	r4, r4, r2
  401366:	00a6      	lsls	r6, r4, #2
  401368:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40136c:	009d      	lsls	r5, r3, #2
  40136e:	462b      	mov	r3, r5
  401370:	4634      	mov	r4, r6
  401372:	4619      	mov	r1, r3
  401374:	4622      	mov	r2, r4
  401376:	4b0d      	ldr	r3, [pc, #52]	; (4013ac <data_reset+0x7c>)
  401378:	f04f 0400 	mov.w	r4, #0
  40137c:	18cd      	adds	r5, r1, r3
  40137e:	eb42 0604 	adc.w	r6, r2, r4
  401382:	4628      	mov	r0, r5
  401384:	4631      	mov	r1, r6
  401386:	4c0a      	ldr	r4, [pc, #40]	; (4013b0 <data_reset+0x80>)
  401388:	4a0a      	ldr	r2, [pc, #40]	; (4013b4 <data_reset+0x84>)
  40138a:	f04f 0300 	mov.w	r3, #0
  40138e:	47a0      	blx	r4
  401390:	4603      	mov	r3, r0
  401392:	460c      	mov	r4, r1
  401394:	4618      	mov	r0, r3
  401396:	4b08      	ldr	r3, [pc, #32]	; (4013b8 <data_reset+0x88>)
  401398:	4798      	blx	r3

}
  40139a:	bf00      	nop
  40139c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4013a0:	400e1400 	.word	0x400e1400
  4013a4:	004006e5 	.word	0x004006e5
  4013a8:	00401255 	.word	0x00401255
  4013ac:	005a83df 	.word	0x005a83df
  4013b0:	00405ea1 	.word	0x00405ea1
  4013b4:	005a83e0 	.word	0x005a83e0
  4013b8:	20400001 	.word	0x20400001

004013bc <colorBLACK>:
	for(uint8_t cor=0; cor<8; cor++) data_1();
	for(uint8_t cor=0; cor<8; cor++) data_1();
}

void colorBLACK(void)
{
  4013bc:	b580      	push	{r7, lr}
  4013be:	b082      	sub	sp, #8
  4013c0:	af00      	add	r7, sp, #0
	for(uint8_t cor=0; cor<8; cor++) data_0();
  4013c2:	2300      	movs	r3, #0
  4013c4:	71fb      	strb	r3, [r7, #7]
  4013c6:	e004      	b.n	4013d2 <colorBLACK+0x16>
  4013c8:	4b10      	ldr	r3, [pc, #64]	; (40140c <colorBLACK+0x50>)
  4013ca:	4798      	blx	r3
  4013cc:	79fb      	ldrb	r3, [r7, #7]
  4013ce:	3301      	adds	r3, #1
  4013d0:	71fb      	strb	r3, [r7, #7]
  4013d2:	79fb      	ldrb	r3, [r7, #7]
  4013d4:	2b07      	cmp	r3, #7
  4013d6:	d9f7      	bls.n	4013c8 <colorBLACK+0xc>
	for(uint8_t cor=0; cor<8; cor++) data_0();
  4013d8:	2300      	movs	r3, #0
  4013da:	71bb      	strb	r3, [r7, #6]
  4013dc:	e004      	b.n	4013e8 <colorBLACK+0x2c>
  4013de:	4b0b      	ldr	r3, [pc, #44]	; (40140c <colorBLACK+0x50>)
  4013e0:	4798      	blx	r3
  4013e2:	79bb      	ldrb	r3, [r7, #6]
  4013e4:	3301      	adds	r3, #1
  4013e6:	71bb      	strb	r3, [r7, #6]
  4013e8:	79bb      	ldrb	r3, [r7, #6]
  4013ea:	2b07      	cmp	r3, #7
  4013ec:	d9f7      	bls.n	4013de <colorBLACK+0x22>
	for(uint8_t cor=0; cor<8; cor++) data_0();
  4013ee:	2300      	movs	r3, #0
  4013f0:	717b      	strb	r3, [r7, #5]
  4013f2:	e004      	b.n	4013fe <colorBLACK+0x42>
  4013f4:	4b05      	ldr	r3, [pc, #20]	; (40140c <colorBLACK+0x50>)
  4013f6:	4798      	blx	r3
  4013f8:	797b      	ldrb	r3, [r7, #5]
  4013fa:	3301      	adds	r3, #1
  4013fc:	717b      	strb	r3, [r7, #5]
  4013fe:	797b      	ldrb	r3, [r7, #5]
  401400:	2b07      	cmp	r3, #7
  401402:	d9f7      	bls.n	4013f4 <colorBLACK+0x38>
}
  401404:	bf00      	nop
  401406:	3708      	adds	r7, #8
  401408:	46bd      	mov	sp, r7
  40140a:	bd80      	pop	{r7, pc}
  40140c:	00401269 	.word	0x00401269

00401410 <colorDEFINE>:

void colorDEFINE(int8_t red, int8_t green, int8_t blue)
{
  401410:	b580      	push	{r7, lr}
  401412:	b084      	sub	sp, #16
  401414:	af00      	add	r7, sp, #0
  401416:	4603      	mov	r3, r0
  401418:	71fb      	strb	r3, [r7, #7]
  40141a:	460b      	mov	r3, r1
  40141c:	71bb      	strb	r3, [r7, #6]
  40141e:	4613      	mov	r3, r2
  401420:	717b      	strb	r3, [r7, #5]
	int8_t count;
	int8_t bit;
	
	for (count = 7; count >= 0; count--)
  401422:	2307      	movs	r3, #7
  401424:	73fb      	strb	r3, [r7, #15]
  401426:	e016      	b.n	401456 <colorDEFINE+0x46>
	{
		bit = green >> count;
  401428:	f997 2006 	ldrsb.w	r2, [r7, #6]
  40142c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401430:	fa42 f303 	asr.w	r3, r2, r3
  401434:	73bb      	strb	r3, [r7, #14]
		if (bit & 1) data_1();
  401436:	7bbb      	ldrb	r3, [r7, #14]
  401438:	f003 0301 	and.w	r3, r3, #1
  40143c:	2b00      	cmp	r3, #0
  40143e:	d002      	beq.n	401446 <colorDEFINE+0x36>
  401440:	4b27      	ldr	r3, [pc, #156]	; (4014e0 <colorDEFINE+0xd0>)
  401442:	4798      	blx	r3
  401444:	e001      	b.n	40144a <colorDEFINE+0x3a>
		else data_0();
  401446:	4b27      	ldr	r3, [pc, #156]	; (4014e4 <colorDEFINE+0xd4>)
  401448:	4798      	blx	r3
	for (count = 7; count >= 0; count--)
  40144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40144e:	b2db      	uxtb	r3, r3
  401450:	3b01      	subs	r3, #1
  401452:	b2db      	uxtb	r3, r3
  401454:	73fb      	strb	r3, [r7, #15]
  401456:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40145a:	2b00      	cmp	r3, #0
  40145c:	dae4      	bge.n	401428 <colorDEFINE+0x18>
	}
	for (count = 7; count >= 0; count--)
  40145e:	2307      	movs	r3, #7
  401460:	73fb      	strb	r3, [r7, #15]
  401462:	e016      	b.n	401492 <colorDEFINE+0x82>
	{
		bit = red >> count;
  401464:	f997 2007 	ldrsb.w	r2, [r7, #7]
  401468:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40146c:	fa42 f303 	asr.w	r3, r2, r3
  401470:	73bb      	strb	r3, [r7, #14]
		if (bit & 1) data_1();
  401472:	7bbb      	ldrb	r3, [r7, #14]
  401474:	f003 0301 	and.w	r3, r3, #1
  401478:	2b00      	cmp	r3, #0
  40147a:	d002      	beq.n	401482 <colorDEFINE+0x72>
  40147c:	4b18      	ldr	r3, [pc, #96]	; (4014e0 <colorDEFINE+0xd0>)
  40147e:	4798      	blx	r3
  401480:	e001      	b.n	401486 <colorDEFINE+0x76>
		else data_0();
  401482:	4b18      	ldr	r3, [pc, #96]	; (4014e4 <colorDEFINE+0xd4>)
  401484:	4798      	blx	r3
	for (count = 7; count >= 0; count--)
  401486:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40148a:	b2db      	uxtb	r3, r3
  40148c:	3b01      	subs	r3, #1
  40148e:	b2db      	uxtb	r3, r3
  401490:	73fb      	strb	r3, [r7, #15]
  401492:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401496:	2b00      	cmp	r3, #0
  401498:	dae4      	bge.n	401464 <colorDEFINE+0x54>
	}
	for (count = 7; count >= 0; count--)
  40149a:	2307      	movs	r3, #7
  40149c:	73fb      	strb	r3, [r7, #15]
  40149e:	e016      	b.n	4014ce <colorDEFINE+0xbe>
	{
		bit = blue >> count;
  4014a0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4014a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4014a8:	fa42 f303 	asr.w	r3, r2, r3
  4014ac:	73bb      	strb	r3, [r7, #14]
		if (bit & 1) data_1();
  4014ae:	7bbb      	ldrb	r3, [r7, #14]
  4014b0:	f003 0301 	and.w	r3, r3, #1
  4014b4:	2b00      	cmp	r3, #0
  4014b6:	d002      	beq.n	4014be <colorDEFINE+0xae>
  4014b8:	4b09      	ldr	r3, [pc, #36]	; (4014e0 <colorDEFINE+0xd0>)
  4014ba:	4798      	blx	r3
  4014bc:	e001      	b.n	4014c2 <colorDEFINE+0xb2>
		else data_0();
  4014be:	4b09      	ldr	r3, [pc, #36]	; (4014e4 <colorDEFINE+0xd4>)
  4014c0:	4798      	blx	r3
	for (count = 7; count >= 0; count--)
  4014c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4014c6:	b2db      	uxtb	r3, r3
  4014c8:	3b01      	subs	r3, #1
  4014ca:	b2db      	uxtb	r3, r3
  4014cc:	73fb      	strb	r3, [r7, #15]
  4014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4014d2:	2b00      	cmp	r3, #0
  4014d4:	dae4      	bge.n	4014a0 <colorDEFINE+0x90>
	}
}
  4014d6:	bf00      	nop
  4014d8:	3710      	adds	r7, #16
  4014da:	46bd      	mov	sp, r7
  4014dc:	bd80      	pop	{r7, pc}
  4014de:	bf00      	nop
  4014e0:	004012c5 	.word	0x004012c5
  4014e4:	00401269 	.word	0x00401269

004014e8 <clearLEDs>:
}



void clearLEDs(void)
{
  4014e8:	b580      	push	{r7, lr}
  4014ea:	b082      	sub	sp, #8
  4014ec:	af00      	add	r7, sp, #0
	for(int i=0;i<256;i++)
  4014ee:	2300      	movs	r3, #0
  4014f0:	607b      	str	r3, [r7, #4]
  4014f2:	e004      	b.n	4014fe <clearLEDs+0x16>
	{
		colorBLACK();
  4014f4:	4b06      	ldr	r3, [pc, #24]	; (401510 <clearLEDs+0x28>)
  4014f6:	4798      	blx	r3
	for(int i=0;i<256;i++)
  4014f8:	687b      	ldr	r3, [r7, #4]
  4014fa:	3301      	adds	r3, #1
  4014fc:	607b      	str	r3, [r7, #4]
  4014fe:	687b      	ldr	r3, [r7, #4]
  401500:	2bff      	cmp	r3, #255	; 0xff
  401502:	ddf7      	ble.n	4014f4 <clearLEDs+0xc>
	}
	data_reset();
  401504:	4b03      	ldr	r3, [pc, #12]	; (401514 <clearLEDs+0x2c>)
  401506:	4798      	blx	r3
}
  401508:	bf00      	nop
  40150a:	3708      	adds	r7, #8
  40150c:	46bd      	mov	sp, r7
  40150e:	bd80      	pop	{r7, pc}
  401510:	004013bd 	.word	0x004013bd
  401514:	00401331 	.word	0x00401331

00401518 <letraA>:




void letraA(int8_t red, int8_t green, int8_t blue)
{
  401518:	b580      	push	{r7, lr}
  40151a:	b082      	sub	sp, #8
  40151c:	af00      	add	r7, sp, #0
  40151e:	4603      	mov	r3, r0
  401520:	71fb      	strb	r3, [r7, #7]
  401522:	460b      	mov	r3, r1
  401524:	71bb      	strb	r3, [r7, #6]
  401526:	4613      	mov	r3, r2
  401528:	717b      	strb	r3, [r7, #5]
	//A
	colorBLACK();
  40152a:	4bab      	ldr	r3, [pc, #684]	; (4017d8 <letraA+0x2c0>)
  40152c:	4798      	blx	r3
	colorBLACK();
  40152e:	4baa      	ldr	r3, [pc, #680]	; (4017d8 <letraA+0x2c0>)
  401530:	4798      	blx	r3
	colorBLACK();
  401532:	4ba9      	ldr	r3, [pc, #676]	; (4017d8 <letraA+0x2c0>)
  401534:	4798      	blx	r3
	colorBLACK();
  401536:	4ba8      	ldr	r3, [pc, #672]	; (4017d8 <letraA+0x2c0>)
  401538:	4798      	blx	r3
	colorBLACK();
  40153a:	4ba7      	ldr	r3, [pc, #668]	; (4017d8 <letraA+0x2c0>)
  40153c:	4798      	blx	r3
	colorBLACK();
  40153e:	4ba6      	ldr	r3, [pc, #664]	; (4017d8 <letraA+0x2c0>)
  401540:	4798      	blx	r3
	colorBLACK();
  401542:	4ba5      	ldr	r3, [pc, #660]	; (4017d8 <letraA+0x2c0>)
  401544:	4798      	blx	r3
	colorBLACK();
  401546:	4ba4      	ldr	r3, [pc, #656]	; (4017d8 <letraA+0x2c0>)
  401548:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  40154a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40154e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401552:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401556:	4618      	mov	r0, r3
  401558:	4ba0      	ldr	r3, [pc, #640]	; (4017dc <letraA+0x2c4>)
  40155a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40155c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401560:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401564:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401568:	4618      	mov	r0, r3
  40156a:	4b9c      	ldr	r3, [pc, #624]	; (4017dc <letraA+0x2c4>)
  40156c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40156e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401572:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401576:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40157a:	4618      	mov	r0, r3
  40157c:	4b97      	ldr	r3, [pc, #604]	; (4017dc <letraA+0x2c4>)
  40157e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401580:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401584:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401588:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40158c:	4618      	mov	r0, r3
  40158e:	4b93      	ldr	r3, [pc, #588]	; (4017dc <letraA+0x2c4>)
  401590:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401592:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401596:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40159e:	4618      	mov	r0, r3
  4015a0:	4b8e      	ldr	r3, [pc, #568]	; (4017dc <letraA+0x2c4>)
  4015a2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4015a4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4015a8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4015b0:	4618      	mov	r0, r3
  4015b2:	4b8a      	ldr	r3, [pc, #552]	; (4017dc <letraA+0x2c4>)
  4015b4:	4798      	blx	r3
	colorBLACK();
  4015b6:	4b88      	ldr	r3, [pc, #544]	; (4017d8 <letraA+0x2c0>)
  4015b8:	4798      	blx	r3
	colorBLACK();
  4015ba:	4b87      	ldr	r3, [pc, #540]	; (4017d8 <letraA+0x2c0>)
  4015bc:	4798      	blx	r3
	
	colorBLACK();
  4015be:	4b86      	ldr	r3, [pc, #536]	; (4017d8 <letraA+0x2c0>)
  4015c0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4015c2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4015c6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4015ce:	4618      	mov	r0, r3
  4015d0:	4b82      	ldr	r3, [pc, #520]	; (4017dc <letraA+0x2c4>)
  4015d2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4015d4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4015d8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4015e0:	4618      	mov	r0, r3
  4015e2:	4b7e      	ldr	r3, [pc, #504]	; (4017dc <letraA+0x2c4>)
  4015e4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4015e6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4015ea:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4015f2:	4618      	mov	r0, r3
  4015f4:	4b79      	ldr	r3, [pc, #484]	; (4017dc <letraA+0x2c4>)
  4015f6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4015f8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4015fc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401600:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401604:	4618      	mov	r0, r3
  401606:	4b75      	ldr	r3, [pc, #468]	; (4017dc <letraA+0x2c4>)
  401608:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40160a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40160e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401612:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401616:	4618      	mov	r0, r3
  401618:	4b70      	ldr	r3, [pc, #448]	; (4017dc <letraA+0x2c4>)
  40161a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40161c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401620:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401624:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401628:	4618      	mov	r0, r3
  40162a:	4b6c      	ldr	r3, [pc, #432]	; (4017dc <letraA+0x2c4>)
  40162c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40162e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401632:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401636:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40163a:	4618      	mov	r0, r3
  40163c:	4b67      	ldr	r3, [pc, #412]	; (4017dc <letraA+0x2c4>)
  40163e:	4798      	blx	r3
	
	colorBLACK();
  401640:	4b65      	ldr	r3, [pc, #404]	; (4017d8 <letraA+0x2c0>)
  401642:	4798      	blx	r3
	colorBLACK();
  401644:	4b64      	ldr	r3, [pc, #400]	; (4017d8 <letraA+0x2c0>)
  401646:	4798      	blx	r3
	colorBLACK();
  401648:	4b63      	ldr	r3, [pc, #396]	; (4017d8 <letraA+0x2c0>)
  40164a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40164c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401650:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401654:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401658:	4618      	mov	r0, r3
  40165a:	4b60      	ldr	r3, [pc, #384]	; (4017dc <letraA+0x2c4>)
  40165c:	4798      	blx	r3
	colorBLACK();
  40165e:	4b5e      	ldr	r3, [pc, #376]	; (4017d8 <letraA+0x2c0>)
  401660:	4798      	blx	r3
	colorBLACK();
  401662:	4b5d      	ldr	r3, [pc, #372]	; (4017d8 <letraA+0x2c0>)
  401664:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401666:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40166a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401672:	4618      	mov	r0, r3
  401674:	4b59      	ldr	r3, [pc, #356]	; (4017dc <letraA+0x2c4>)
  401676:	4798      	blx	r3
	colorBLACK();
  401678:	4b57      	ldr	r3, [pc, #348]	; (4017d8 <letraA+0x2c0>)
  40167a:	4798      	blx	r3
	
	colorBLACK();
  40167c:	4b56      	ldr	r3, [pc, #344]	; (4017d8 <letraA+0x2c0>)
  40167e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401680:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401684:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401688:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40168c:	4618      	mov	r0, r3
  40168e:	4b53      	ldr	r3, [pc, #332]	; (4017dc <letraA+0x2c4>)
  401690:	4798      	blx	r3
	colorBLACK();
  401692:	4b51      	ldr	r3, [pc, #324]	; (4017d8 <letraA+0x2c0>)
  401694:	4798      	blx	r3
	colorBLACK();
  401696:	4b50      	ldr	r3, [pc, #320]	; (4017d8 <letraA+0x2c0>)
  401698:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40169a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40169e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4016a6:	4618      	mov	r0, r3
  4016a8:	4b4c      	ldr	r3, [pc, #304]	; (4017dc <letraA+0x2c4>)
  4016aa:	4798      	blx	r3
	colorBLACK();
  4016ac:	4b4a      	ldr	r3, [pc, #296]	; (4017d8 <letraA+0x2c0>)
  4016ae:	4798      	blx	r3
	colorBLACK();
  4016b0:	4b49      	ldr	r3, [pc, #292]	; (4017d8 <letraA+0x2c0>)
  4016b2:	4798      	blx	r3
	colorBLACK();
  4016b4:	4b48      	ldr	r3, [pc, #288]	; (4017d8 <letraA+0x2c0>)
  4016b6:	4798      	blx	r3
	
	
	
	colorDEFINE(red,green,blue);
  4016b8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4016bc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4016c4:	4618      	mov	r0, r3
  4016c6:	4b45      	ldr	r3, [pc, #276]	; (4017dc <letraA+0x2c4>)
  4016c8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4016ca:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4016ce:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4016d6:	4618      	mov	r0, r3
  4016d8:	4b40      	ldr	r3, [pc, #256]	; (4017dc <letraA+0x2c4>)
  4016da:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4016dc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4016e0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4016e8:	4618      	mov	r0, r3
  4016ea:	4b3c      	ldr	r3, [pc, #240]	; (4017dc <letraA+0x2c4>)
  4016ec:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4016ee:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4016f2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4016fa:	4618      	mov	r0, r3
  4016fc:	4b37      	ldr	r3, [pc, #220]	; (4017dc <letraA+0x2c4>)
  4016fe:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401700:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401704:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401708:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40170c:	4618      	mov	r0, r3
  40170e:	4b33      	ldr	r3, [pc, #204]	; (4017dc <letraA+0x2c4>)
  401710:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401712:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401716:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40171e:	4618      	mov	r0, r3
  401720:	4b2e      	ldr	r3, [pc, #184]	; (4017dc <letraA+0x2c4>)
  401722:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401724:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401728:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401730:	4618      	mov	r0, r3
  401732:	4b2a      	ldr	r3, [pc, #168]	; (4017dc <letraA+0x2c4>)
  401734:	4798      	blx	r3
	colorBLACK();
  401736:	4b28      	ldr	r3, [pc, #160]	; (4017d8 <letraA+0x2c0>)
  401738:	4798      	blx	r3
	
	
	colorBLACK();
  40173a:	4b27      	ldr	r3, [pc, #156]	; (4017d8 <letraA+0x2c0>)
  40173c:	4798      	blx	r3
	colorBLACK();
  40173e:	4b26      	ldr	r3, [pc, #152]	; (4017d8 <letraA+0x2c0>)
  401740:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401742:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401746:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40174e:	4618      	mov	r0, r3
  401750:	4b22      	ldr	r3, [pc, #136]	; (4017dc <letraA+0x2c4>)
  401752:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401754:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401758:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401760:	4618      	mov	r0, r3
  401762:	4b1e      	ldr	r3, [pc, #120]	; (4017dc <letraA+0x2c4>)
  401764:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401766:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40176a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401772:	4618      	mov	r0, r3
  401774:	4b19      	ldr	r3, [pc, #100]	; (4017dc <letraA+0x2c4>)
  401776:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401778:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40177c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401780:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401784:	4618      	mov	r0, r3
  401786:	4b15      	ldr	r3, [pc, #84]	; (4017dc <letraA+0x2c4>)
  401788:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40178a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40178e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401792:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401796:	4618      	mov	r0, r3
  401798:	4b10      	ldr	r3, [pc, #64]	; (4017dc <letraA+0x2c4>)
  40179a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40179c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4017a0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4017a8:	4618      	mov	r0, r3
  4017aa:	4b0c      	ldr	r3, [pc, #48]	; (4017dc <letraA+0x2c4>)
  4017ac:	4798      	blx	r3
	
	
	
	colorBLACK();
  4017ae:	4b0a      	ldr	r3, [pc, #40]	; (4017d8 <letraA+0x2c0>)
  4017b0:	4798      	blx	r3
	colorBLACK();
  4017b2:	4b09      	ldr	r3, [pc, #36]	; (4017d8 <letraA+0x2c0>)
  4017b4:	4798      	blx	r3
	colorBLACK();
  4017b6:	4b08      	ldr	r3, [pc, #32]	; (4017d8 <letraA+0x2c0>)
  4017b8:	4798      	blx	r3
	colorBLACK();
  4017ba:	4b07      	ldr	r3, [pc, #28]	; (4017d8 <letraA+0x2c0>)
  4017bc:	4798      	blx	r3
	colorBLACK();
  4017be:	4b06      	ldr	r3, [pc, #24]	; (4017d8 <letraA+0x2c0>)
  4017c0:	4798      	blx	r3
	colorBLACK();
  4017c2:	4b05      	ldr	r3, [pc, #20]	; (4017d8 <letraA+0x2c0>)
  4017c4:	4798      	blx	r3
	colorBLACK();
  4017c6:	4b04      	ldr	r3, [pc, #16]	; (4017d8 <letraA+0x2c0>)
  4017c8:	4798      	blx	r3
	colorBLACK();
  4017ca:	4b03      	ldr	r3, [pc, #12]	; (4017d8 <letraA+0x2c0>)
  4017cc:	4798      	blx	r3
}
  4017ce:	bf00      	nop
  4017d0:	3708      	adds	r7, #8
  4017d2:	46bd      	mov	sp, r7
  4017d4:	bd80      	pop	{r7, pc}
  4017d6:	bf00      	nop
  4017d8:	004013bd 	.word	0x004013bd
  4017dc:	00401411 	.word	0x00401411

004017e0 <letraB>:




void letraB(int8_t red, int8_t green, int8_t blue)
{
  4017e0:	b580      	push	{r7, lr}
  4017e2:	b082      	sub	sp, #8
  4017e4:	af00      	add	r7, sp, #0
  4017e6:	4603      	mov	r3, r0
  4017e8:	71fb      	strb	r3, [r7, #7]
  4017ea:	460b      	mov	r3, r1
  4017ec:	71bb      	strb	r3, [r7, #6]
  4017ee:	4613      	mov	r3, r2
  4017f0:	717b      	strb	r3, [r7, #5]
	//B
	colorBLACK();
  4017f2:	4bae      	ldr	r3, [pc, #696]	; (401aac <letraB+0x2cc>)
  4017f4:	4798      	blx	r3
	colorBLACK();
  4017f6:	4bad      	ldr	r3, [pc, #692]	; (401aac <letraB+0x2cc>)
  4017f8:	4798      	blx	r3
	colorBLACK();
  4017fa:	4bac      	ldr	r3, [pc, #688]	; (401aac <letraB+0x2cc>)
  4017fc:	4798      	blx	r3
	colorBLACK();
  4017fe:	4bab      	ldr	r3, [pc, #684]	; (401aac <letraB+0x2cc>)
  401800:	4798      	blx	r3
	colorBLACK();
  401802:	4baa      	ldr	r3, [pc, #680]	; (401aac <letraB+0x2cc>)
  401804:	4798      	blx	r3
	colorBLACK();
  401806:	4ba9      	ldr	r3, [pc, #676]	; (401aac <letraB+0x2cc>)
  401808:	4798      	blx	r3
	colorBLACK();
  40180a:	4ba8      	ldr	r3, [pc, #672]	; (401aac <letraB+0x2cc>)
  40180c:	4798      	blx	r3
	colorBLACK();
  40180e:	4ba7      	ldr	r3, [pc, #668]	; (401aac <letraB+0x2cc>)
  401810:	4798      	blx	r3
	
	
	
	colorDEFINE(red,green,blue);
  401812:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401816:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40181e:	4618      	mov	r0, r3
  401820:	4ba3      	ldr	r3, [pc, #652]	; (401ab0 <letraB+0x2d0>)
  401822:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401824:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401828:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401830:	4618      	mov	r0, r3
  401832:	4b9f      	ldr	r3, [pc, #636]	; (401ab0 <letraB+0x2d0>)
  401834:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401836:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40183a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401842:	4618      	mov	r0, r3
  401844:	4b9a      	ldr	r3, [pc, #616]	; (401ab0 <letraB+0x2d0>)
  401846:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401848:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40184c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401850:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401854:	4618      	mov	r0, r3
  401856:	4b96      	ldr	r3, [pc, #600]	; (401ab0 <letraB+0x2d0>)
  401858:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40185a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40185e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401862:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401866:	4618      	mov	r0, r3
  401868:	4b91      	ldr	r3, [pc, #580]	; (401ab0 <letraB+0x2d0>)
  40186a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40186c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401870:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401874:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401878:	4618      	mov	r0, r3
  40187a:	4b8d      	ldr	r3, [pc, #564]	; (401ab0 <letraB+0x2d0>)
  40187c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40187e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401882:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401886:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40188a:	4618      	mov	r0, r3
  40188c:	4b88      	ldr	r3, [pc, #544]	; (401ab0 <letraB+0x2d0>)
  40188e:	4798      	blx	r3
	colorBLACK();
  401890:	4b86      	ldr	r3, [pc, #536]	; (401aac <letraB+0x2cc>)
  401892:	4798      	blx	r3
	
	colorBLACK();
  401894:	4b85      	ldr	r3, [pc, #532]	; (401aac <letraB+0x2cc>)
  401896:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401898:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40189c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4018a4:	4618      	mov	r0, r3
  4018a6:	4b82      	ldr	r3, [pc, #520]	; (401ab0 <letraB+0x2d0>)
  4018a8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4018aa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4018ae:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4018b6:	4618      	mov	r0, r3
  4018b8:	4b7d      	ldr	r3, [pc, #500]	; (401ab0 <letraB+0x2d0>)
  4018ba:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4018bc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4018c0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4018c8:	4618      	mov	r0, r3
  4018ca:	4b79      	ldr	r3, [pc, #484]	; (401ab0 <letraB+0x2d0>)
  4018cc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4018ce:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4018d2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4018da:	4618      	mov	r0, r3
  4018dc:	4b74      	ldr	r3, [pc, #464]	; (401ab0 <letraB+0x2d0>)
  4018de:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4018e0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4018e4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4018ec:	4618      	mov	r0, r3
  4018ee:	4b70      	ldr	r3, [pc, #448]	; (401ab0 <letraB+0x2d0>)
  4018f0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4018f2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4018f6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4018fe:	4618      	mov	r0, r3
  401900:	4b6b      	ldr	r3, [pc, #428]	; (401ab0 <letraB+0x2d0>)
  401902:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401904:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401908:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401910:	4618      	mov	r0, r3
  401912:	4b67      	ldr	r3, [pc, #412]	; (401ab0 <letraB+0x2d0>)
  401914:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  401916:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40191a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401922:	4618      	mov	r0, r3
  401924:	4b62      	ldr	r3, [pc, #392]	; (401ab0 <letraB+0x2d0>)
  401926:	4798      	blx	r3
	colorBLACK();
  401928:	4b60      	ldr	r3, [pc, #384]	; (401aac <letraB+0x2cc>)
  40192a:	4798      	blx	r3
	colorBLACK();
  40192c:	4b5f      	ldr	r3, [pc, #380]	; (401aac <letraB+0x2cc>)
  40192e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401930:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401934:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401938:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40193c:	4618      	mov	r0, r3
  40193e:	4b5c      	ldr	r3, [pc, #368]	; (401ab0 <letraB+0x2d0>)
  401940:	4798      	blx	r3
	colorBLACK();
  401942:	4b5a      	ldr	r3, [pc, #360]	; (401aac <letraB+0x2cc>)
  401944:	4798      	blx	r3
	colorBLACK();
  401946:	4b59      	ldr	r3, [pc, #356]	; (401aac <letraB+0x2cc>)
  401948:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40194a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40194e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401952:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401956:	4618      	mov	r0, r3
  401958:	4b55      	ldr	r3, [pc, #340]	; (401ab0 <letraB+0x2d0>)
  40195a:	4798      	blx	r3
	colorBLACK();
  40195c:	4b53      	ldr	r3, [pc, #332]	; (401aac <letraB+0x2cc>)
  40195e:	4798      	blx	r3
	
	colorBLACK();
  401960:	4b52      	ldr	r3, [pc, #328]	; (401aac <letraB+0x2cc>)
  401962:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401964:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401968:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401970:	4618      	mov	r0, r3
  401972:	4b4f      	ldr	r3, [pc, #316]	; (401ab0 <letraB+0x2d0>)
  401974:	4798      	blx	r3
	colorBLACK();
  401976:	4b4d      	ldr	r3, [pc, #308]	; (401aac <letraB+0x2cc>)
  401978:	4798      	blx	r3
	colorBLACK();
  40197a:	4b4c      	ldr	r3, [pc, #304]	; (401aac <letraB+0x2cc>)
  40197c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40197e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401982:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401986:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40198a:	4618      	mov	r0, r3
  40198c:	4b48      	ldr	r3, [pc, #288]	; (401ab0 <letraB+0x2d0>)
  40198e:	4798      	blx	r3
	colorBLACK();
  401990:	4b46      	ldr	r3, [pc, #280]	; (401aac <letraB+0x2cc>)
  401992:	4798      	blx	r3
	colorBLACK();
  401994:	4b45      	ldr	r3, [pc, #276]	; (401aac <letraB+0x2cc>)
  401996:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401998:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40199c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4019a4:	4618      	mov	r0, r3
  4019a6:	4b42      	ldr	r3, [pc, #264]	; (401ab0 <letraB+0x2d0>)
  4019a8:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  4019aa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4019ae:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4019b6:	4618      	mov	r0, r3
  4019b8:	4b3d      	ldr	r3, [pc, #244]	; (401ab0 <letraB+0x2d0>)
  4019ba:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4019bc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4019c0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4019c8:	4618      	mov	r0, r3
  4019ca:	4b39      	ldr	r3, [pc, #228]	; (401ab0 <letraB+0x2d0>)
  4019cc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4019ce:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4019d2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4019da:	4618      	mov	r0, r3
  4019dc:	4b34      	ldr	r3, [pc, #208]	; (401ab0 <letraB+0x2d0>)
  4019de:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4019e0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4019e4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4019ec:	4618      	mov	r0, r3
  4019ee:	4b30      	ldr	r3, [pc, #192]	; (401ab0 <letraB+0x2d0>)
  4019f0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4019f2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4019f6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4019fe:	4618      	mov	r0, r3
  401a00:	4b2b      	ldr	r3, [pc, #172]	; (401ab0 <letraB+0x2d0>)
  401a02:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401a04:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401a08:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401a10:	4618      	mov	r0, r3
  401a12:	4b27      	ldr	r3, [pc, #156]	; (401ab0 <letraB+0x2d0>)
  401a14:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401a16:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401a1a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401a22:	4618      	mov	r0, r3
  401a24:	4b22      	ldr	r3, [pc, #136]	; (401ab0 <letraB+0x2d0>)
  401a26:	4798      	blx	r3
	colorBLACK();	
  401a28:	4b20      	ldr	r3, [pc, #128]	; (401aac <letraB+0x2cc>)
  401a2a:	4798      	blx	r3
	
	colorBLACK();
  401a2c:	4b1f      	ldr	r3, [pc, #124]	; (401aac <letraB+0x2cc>)
  401a2e:	4798      	blx	r3
	colorBLACK();
  401a30:	4b1e      	ldr	r3, [pc, #120]	; (401aac <letraB+0x2cc>)
  401a32:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401a34:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401a38:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401a40:	4618      	mov	r0, r3
  401a42:	4b1b      	ldr	r3, [pc, #108]	; (401ab0 <letraB+0x2d0>)
  401a44:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401a46:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401a4a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401a52:	4618      	mov	r0, r3
  401a54:	4b16      	ldr	r3, [pc, #88]	; (401ab0 <letraB+0x2d0>)
  401a56:	4798      	blx	r3
	colorBLACK();
  401a58:	4b14      	ldr	r3, [pc, #80]	; (401aac <letraB+0x2cc>)
  401a5a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401a5c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401a60:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401a68:	4618      	mov	r0, r3
  401a6a:	4b11      	ldr	r3, [pc, #68]	; (401ab0 <letraB+0x2d0>)
  401a6c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401a6e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401a72:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401a7a:	4618      	mov	r0, r3
  401a7c:	4b0c      	ldr	r3, [pc, #48]	; (401ab0 <letraB+0x2d0>)
  401a7e:	4798      	blx	r3
	colorBLACK();
  401a80:	4b0a      	ldr	r3, [pc, #40]	; (401aac <letraB+0x2cc>)
  401a82:	4798      	blx	r3
		
	
	colorBLACK();
  401a84:	4b09      	ldr	r3, [pc, #36]	; (401aac <letraB+0x2cc>)
  401a86:	4798      	blx	r3
	colorBLACK();
  401a88:	4b08      	ldr	r3, [pc, #32]	; (401aac <letraB+0x2cc>)
  401a8a:	4798      	blx	r3
	colorBLACK();
  401a8c:	4b07      	ldr	r3, [pc, #28]	; (401aac <letraB+0x2cc>)
  401a8e:	4798      	blx	r3
	colorBLACK();
  401a90:	4b06      	ldr	r3, [pc, #24]	; (401aac <letraB+0x2cc>)
  401a92:	4798      	blx	r3
	colorBLACK();
  401a94:	4b05      	ldr	r3, [pc, #20]	; (401aac <letraB+0x2cc>)
  401a96:	4798      	blx	r3
	colorBLACK();
  401a98:	4b04      	ldr	r3, [pc, #16]	; (401aac <letraB+0x2cc>)
  401a9a:	4798      	blx	r3
	colorBLACK();
  401a9c:	4b03      	ldr	r3, [pc, #12]	; (401aac <letraB+0x2cc>)
  401a9e:	4798      	blx	r3
	colorBLACK();
  401aa0:	4b02      	ldr	r3, [pc, #8]	; (401aac <letraB+0x2cc>)
  401aa2:	4798      	blx	r3
}
  401aa4:	bf00      	nop
  401aa6:	3708      	adds	r7, #8
  401aa8:	46bd      	mov	sp, r7
  401aaa:	bd80      	pop	{r7, pc}
  401aac:	004013bd 	.word	0x004013bd
  401ab0:	00401411 	.word	0x00401411

00401ab4 <letraC>:


void letraC(int8_t red, int8_t green, int8_t blue)
{
  401ab4:	b580      	push	{r7, lr}
  401ab6:	b082      	sub	sp, #8
  401ab8:	af00      	add	r7, sp, #0
  401aba:	4603      	mov	r3, r0
  401abc:	71fb      	strb	r3, [r7, #7]
  401abe:	460b      	mov	r3, r1
  401ac0:	71bb      	strb	r3, [r7, #6]
  401ac2:	4613      	mov	r3, r2
  401ac4:	717b      	strb	r3, [r7, #5]
	//C
	colorBLACK();
  401ac6:	4b8f      	ldr	r3, [pc, #572]	; (401d04 <letraC+0x250>)
  401ac8:	4798      	blx	r3
	colorBLACK();
  401aca:	4b8e      	ldr	r3, [pc, #568]	; (401d04 <letraC+0x250>)
  401acc:	4798      	blx	r3
	colorBLACK();
  401ace:	4b8d      	ldr	r3, [pc, #564]	; (401d04 <letraC+0x250>)
  401ad0:	4798      	blx	r3
	colorBLACK();
  401ad2:	4b8c      	ldr	r3, [pc, #560]	; (401d04 <letraC+0x250>)
  401ad4:	4798      	blx	r3
	colorBLACK();
  401ad6:	4b8b      	ldr	r3, [pc, #556]	; (401d04 <letraC+0x250>)
  401ad8:	4798      	blx	r3
	colorBLACK();
  401ada:	4b8a      	ldr	r3, [pc, #552]	; (401d04 <letraC+0x250>)
  401adc:	4798      	blx	r3
	colorBLACK();
  401ade:	4b89      	ldr	r3, [pc, #548]	; (401d04 <letraC+0x250>)
  401ae0:	4798      	blx	r3
	colorBLACK();
  401ae2:	4b88      	ldr	r3, [pc, #544]	; (401d04 <letraC+0x250>)
  401ae4:	4798      	blx	r3
	
	
	colorBLACK();
  401ae6:	4b87      	ldr	r3, [pc, #540]	; (401d04 <letraC+0x250>)
  401ae8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401aea:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401aee:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401af6:	4618      	mov	r0, r3
  401af8:	4b83      	ldr	r3, [pc, #524]	; (401d08 <letraC+0x254>)
  401afa:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401afc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401b00:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b08:	4618      	mov	r0, r3
  401b0a:	4b7f      	ldr	r3, [pc, #508]	; (401d08 <letraC+0x254>)
  401b0c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401b0e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401b12:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b1a:	4618      	mov	r0, r3
  401b1c:	4b7a      	ldr	r3, [pc, #488]	; (401d08 <letraC+0x254>)
  401b1e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401b20:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401b24:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b2c:	4618      	mov	r0, r3
  401b2e:	4b76      	ldr	r3, [pc, #472]	; (401d08 <letraC+0x254>)
  401b30:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401b32:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401b36:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b3e:	4618      	mov	r0, r3
  401b40:	4b71      	ldr	r3, [pc, #452]	; (401d08 <letraC+0x254>)
  401b42:	4798      	blx	r3
	colorBLACK();
  401b44:	4b6f      	ldr	r3, [pc, #444]	; (401d04 <letraC+0x250>)
  401b46:	4798      	blx	r3
	colorBLACK();
  401b48:	4b6e      	ldr	r3, [pc, #440]	; (401d04 <letraC+0x250>)
  401b4a:	4798      	blx	r3
	
	colorBLACK();
  401b4c:	4b6d      	ldr	r3, [pc, #436]	; (401d04 <letraC+0x250>)
  401b4e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401b50:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401b54:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b5c:	4618      	mov	r0, r3
  401b5e:	4b6a      	ldr	r3, [pc, #424]	; (401d08 <letraC+0x254>)
  401b60:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401b62:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401b66:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b6e:	4618      	mov	r0, r3
  401b70:	4b65      	ldr	r3, [pc, #404]	; (401d08 <letraC+0x254>)
  401b72:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401b74:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401b78:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b80:	4618      	mov	r0, r3
  401b82:	4b61      	ldr	r3, [pc, #388]	; (401d08 <letraC+0x254>)
  401b84:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401b86:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401b8a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401b92:	4618      	mov	r0, r3
  401b94:	4b5c      	ldr	r3, [pc, #368]	; (401d08 <letraC+0x254>)
  401b96:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401b98:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401b9c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401ba4:	4618      	mov	r0, r3
  401ba6:	4b58      	ldr	r3, [pc, #352]	; (401d08 <letraC+0x254>)
  401ba8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401baa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401bae:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401bb6:	4618      	mov	r0, r3
  401bb8:	4b53      	ldr	r3, [pc, #332]	; (401d08 <letraC+0x254>)
  401bba:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401bbc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401bc0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401bc8:	4618      	mov	r0, r3
  401bca:	4b4f      	ldr	r3, [pc, #316]	; (401d08 <letraC+0x254>)
  401bcc:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  401bce:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401bd2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401bda:	4618      	mov	r0, r3
  401bdc:	4b4a      	ldr	r3, [pc, #296]	; (401d08 <letraC+0x254>)
  401bde:	4798      	blx	r3
	colorBLACK();
  401be0:	4b48      	ldr	r3, [pc, #288]	; (401d04 <letraC+0x250>)
  401be2:	4798      	blx	r3
	colorBLACK();
  401be4:	4b47      	ldr	r3, [pc, #284]	; (401d04 <letraC+0x250>)
  401be6:	4798      	blx	r3
	colorBLACK();
  401be8:	4b46      	ldr	r3, [pc, #280]	; (401d04 <letraC+0x250>)
  401bea:	4798      	blx	r3
	colorBLACK();
  401bec:	4b45      	ldr	r3, [pc, #276]	; (401d04 <letraC+0x250>)
  401bee:	4798      	blx	r3
	colorBLACK();
  401bf0:	4b44      	ldr	r3, [pc, #272]	; (401d04 <letraC+0x250>)
  401bf2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401bf4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401bf8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401c00:	4618      	mov	r0, r3
  401c02:	4b41      	ldr	r3, [pc, #260]	; (401d08 <letraC+0x254>)
  401c04:	4798      	blx	r3
	colorBLACK();
  401c06:	4b3f      	ldr	r3, [pc, #252]	; (401d04 <letraC+0x250>)
  401c08:	4798      	blx	r3
	
	
	
	colorBLACK();
  401c0a:	4b3e      	ldr	r3, [pc, #248]	; (401d04 <letraC+0x250>)
  401c0c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401c0e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401c12:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401c1a:	4618      	mov	r0, r3
  401c1c:	4b3a      	ldr	r3, [pc, #232]	; (401d08 <letraC+0x254>)
  401c1e:	4798      	blx	r3
	colorBLACK();
  401c20:	4b38      	ldr	r3, [pc, #224]	; (401d04 <letraC+0x250>)
  401c22:	4798      	blx	r3
	colorBLACK();
  401c24:	4b37      	ldr	r3, [pc, #220]	; (401d04 <letraC+0x250>)
  401c26:	4798      	blx	r3
	colorBLACK();
  401c28:	4b36      	ldr	r3, [pc, #216]	; (401d04 <letraC+0x250>)
  401c2a:	4798      	blx	r3
	colorBLACK();
  401c2c:	4b35      	ldr	r3, [pc, #212]	; (401d04 <letraC+0x250>)
  401c2e:	4798      	blx	r3
	colorBLACK();
  401c30:	4b34      	ldr	r3, [pc, #208]	; (401d04 <letraC+0x250>)
  401c32:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401c34:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401c38:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401c40:	4618      	mov	r0, r3
  401c42:	4b31      	ldr	r3, [pc, #196]	; (401d08 <letraC+0x254>)
  401c44:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  401c46:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401c4a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401c52:	4618      	mov	r0, r3
  401c54:	4b2c      	ldr	r3, [pc, #176]	; (401d08 <letraC+0x254>)
  401c56:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401c58:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401c5c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401c64:	4618      	mov	r0, r3
  401c66:	4b28      	ldr	r3, [pc, #160]	; (401d08 <letraC+0x254>)
  401c68:	4798      	blx	r3
	colorBLACK();
  401c6a:	4b26      	ldr	r3, [pc, #152]	; (401d04 <letraC+0x250>)
  401c6c:	4798      	blx	r3
	colorBLACK();
  401c6e:	4b25      	ldr	r3, [pc, #148]	; (401d04 <letraC+0x250>)
  401c70:	4798      	blx	r3
	colorBLACK();
  401c72:	4b24      	ldr	r3, [pc, #144]	; (401d04 <letraC+0x250>)
  401c74:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401c76:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401c7a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401c82:	4618      	mov	r0, r3
  401c84:	4b20      	ldr	r3, [pc, #128]	; (401d08 <letraC+0x254>)
  401c86:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401c88:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401c8c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401c94:	4618      	mov	r0, r3
  401c96:	4b1c      	ldr	r3, [pc, #112]	; (401d08 <letraC+0x254>)
  401c98:	4798      	blx	r3
	colorBLACK();
  401c9a:	4b1a      	ldr	r3, [pc, #104]	; (401d04 <letraC+0x250>)
  401c9c:	4798      	blx	r3
	
	colorBLACK();
  401c9e:	4b19      	ldr	r3, [pc, #100]	; (401d04 <letraC+0x250>)
  401ca0:	4798      	blx	r3
	colorBLACK();
  401ca2:	4b18      	ldr	r3, [pc, #96]	; (401d04 <letraC+0x250>)
  401ca4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401ca6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401caa:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401cb2:	4618      	mov	r0, r3
  401cb4:	4b14      	ldr	r3, [pc, #80]	; (401d08 <letraC+0x254>)
  401cb6:	4798      	blx	r3
	colorBLACK();
  401cb8:	4b12      	ldr	r3, [pc, #72]	; (401d04 <letraC+0x250>)
  401cba:	4798      	blx	r3
	colorBLACK();
  401cbc:	4b11      	ldr	r3, [pc, #68]	; (401d04 <letraC+0x250>)
  401cbe:	4798      	blx	r3
	colorBLACK();
  401cc0:	4b10      	ldr	r3, [pc, #64]	; (401d04 <letraC+0x250>)
  401cc2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401cc4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401cc8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401cd0:	4618      	mov	r0, r3
  401cd2:	4b0d      	ldr	r3, [pc, #52]	; (401d08 <letraC+0x254>)
  401cd4:	4798      	blx	r3
	colorBLACK();
  401cd6:	4b0b      	ldr	r3, [pc, #44]	; (401d04 <letraC+0x250>)
  401cd8:	4798      	blx	r3
	
	
	colorBLACK();
  401cda:	4b0a      	ldr	r3, [pc, #40]	; (401d04 <letraC+0x250>)
  401cdc:	4798      	blx	r3
	colorBLACK();
  401cde:	4b09      	ldr	r3, [pc, #36]	; (401d04 <letraC+0x250>)
  401ce0:	4798      	blx	r3
	colorBLACK();
  401ce2:	4b08      	ldr	r3, [pc, #32]	; (401d04 <letraC+0x250>)
  401ce4:	4798      	blx	r3
	colorBLACK();
  401ce6:	4b07      	ldr	r3, [pc, #28]	; (401d04 <letraC+0x250>)
  401ce8:	4798      	blx	r3
	colorBLACK();
  401cea:	4b06      	ldr	r3, [pc, #24]	; (401d04 <letraC+0x250>)
  401cec:	4798      	blx	r3
	colorBLACK();
  401cee:	4b05      	ldr	r3, [pc, #20]	; (401d04 <letraC+0x250>)
  401cf0:	4798      	blx	r3
	colorBLACK();
  401cf2:	4b04      	ldr	r3, [pc, #16]	; (401d04 <letraC+0x250>)
  401cf4:	4798      	blx	r3
	colorBLACK();
  401cf6:	4b03      	ldr	r3, [pc, #12]	; (401d04 <letraC+0x250>)
  401cf8:	4798      	blx	r3
}
  401cfa:	bf00      	nop
  401cfc:	3708      	adds	r7, #8
  401cfe:	46bd      	mov	sp, r7
  401d00:	bd80      	pop	{r7, pc}
  401d02:	bf00      	nop
  401d04:	004013bd 	.word	0x004013bd
  401d08:	00401411 	.word	0x00401411

00401d0c <letraD>:



void letraD(int8_t red, int8_t green, int8_t blue)
{
  401d0c:	b580      	push	{r7, lr}
  401d0e:	b082      	sub	sp, #8
  401d10:	af00      	add	r7, sp, #0
  401d12:	4603      	mov	r3, r0
  401d14:	71fb      	strb	r3, [r7, #7]
  401d16:	460b      	mov	r3, r1
  401d18:	71bb      	strb	r3, [r7, #6]
  401d1a:	4613      	mov	r3, r2
  401d1c:	717b      	strb	r3, [r7, #5]
	//D
	colorBLACK();
  401d1e:	4bab      	ldr	r3, [pc, #684]	; (401fcc <letraD+0x2c0>)
  401d20:	4798      	blx	r3
	colorBLACK();
  401d22:	4baa      	ldr	r3, [pc, #680]	; (401fcc <letraD+0x2c0>)
  401d24:	4798      	blx	r3
	colorBLACK();
  401d26:	4ba9      	ldr	r3, [pc, #676]	; (401fcc <letraD+0x2c0>)
  401d28:	4798      	blx	r3
	colorBLACK();
  401d2a:	4ba8      	ldr	r3, [pc, #672]	; (401fcc <letraD+0x2c0>)
  401d2c:	4798      	blx	r3
	colorBLACK();
  401d2e:	4ba7      	ldr	r3, [pc, #668]	; (401fcc <letraD+0x2c0>)
  401d30:	4798      	blx	r3
	colorBLACK();
  401d32:	4ba6      	ldr	r3, [pc, #664]	; (401fcc <letraD+0x2c0>)
  401d34:	4798      	blx	r3
	colorBLACK();
  401d36:	4ba5      	ldr	r3, [pc, #660]	; (401fcc <letraD+0x2c0>)
  401d38:	4798      	blx	r3
	colorBLACK();
  401d3a:	4ba4      	ldr	r3, [pc, #656]	; (401fcc <letraD+0x2c0>)
  401d3c:	4798      	blx	r3
	
	
	
	colorDEFINE(red,green,blue);
  401d3e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401d42:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401d4a:	4618      	mov	r0, r3
  401d4c:	4ba0      	ldr	r3, [pc, #640]	; (401fd0 <letraD+0x2c4>)
  401d4e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401d50:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401d54:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401d5c:	4618      	mov	r0, r3
  401d5e:	4b9c      	ldr	r3, [pc, #624]	; (401fd0 <letraD+0x2c4>)
  401d60:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401d62:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401d66:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401d6e:	4618      	mov	r0, r3
  401d70:	4b97      	ldr	r3, [pc, #604]	; (401fd0 <letraD+0x2c4>)
  401d72:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401d74:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401d78:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401d80:	4618      	mov	r0, r3
  401d82:	4b93      	ldr	r3, [pc, #588]	; (401fd0 <letraD+0x2c4>)
  401d84:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401d86:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401d8a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401d92:	4618      	mov	r0, r3
  401d94:	4b8e      	ldr	r3, [pc, #568]	; (401fd0 <letraD+0x2c4>)
  401d96:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401d98:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401d9c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401da4:	4618      	mov	r0, r3
  401da6:	4b8a      	ldr	r3, [pc, #552]	; (401fd0 <letraD+0x2c4>)
  401da8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401daa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401dae:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401db6:	4618      	mov	r0, r3
  401db8:	4b85      	ldr	r3, [pc, #532]	; (401fd0 <letraD+0x2c4>)
  401dba:	4798      	blx	r3
	colorBLACK();
  401dbc:	4b83      	ldr	r3, [pc, #524]	; (401fcc <letraD+0x2c0>)
  401dbe:	4798      	blx	r3
	
	colorBLACK();
  401dc0:	4b82      	ldr	r3, [pc, #520]	; (401fcc <letraD+0x2c0>)
  401dc2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401dc4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401dc8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401dd0:	4618      	mov	r0, r3
  401dd2:	4b7f      	ldr	r3, [pc, #508]	; (401fd0 <letraD+0x2c4>)
  401dd4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401dd6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401dda:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401de2:	4618      	mov	r0, r3
  401de4:	4b7a      	ldr	r3, [pc, #488]	; (401fd0 <letraD+0x2c4>)
  401de6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401de8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401dec:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401df4:	4618      	mov	r0, r3
  401df6:	4b76      	ldr	r3, [pc, #472]	; (401fd0 <letraD+0x2c4>)
  401df8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401dfa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401dfe:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e06:	4618      	mov	r0, r3
  401e08:	4b71      	ldr	r3, [pc, #452]	; (401fd0 <letraD+0x2c4>)
  401e0a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401e0c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401e10:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e18:	4618      	mov	r0, r3
  401e1a:	4b6d      	ldr	r3, [pc, #436]	; (401fd0 <letraD+0x2c4>)
  401e1c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401e1e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401e22:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e2a:	4618      	mov	r0, r3
  401e2c:	4b68      	ldr	r3, [pc, #416]	; (401fd0 <letraD+0x2c4>)
  401e2e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401e30:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401e34:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e3c:	4618      	mov	r0, r3
  401e3e:	4b64      	ldr	r3, [pc, #400]	; (401fd0 <letraD+0x2c4>)
  401e40:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  401e42:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401e46:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e4e:	4618      	mov	r0, r3
  401e50:	4b5f      	ldr	r3, [pc, #380]	; (401fd0 <letraD+0x2c4>)
  401e52:	4798      	blx	r3
	colorBLACK();
  401e54:	4b5d      	ldr	r3, [pc, #372]	; (401fcc <letraD+0x2c0>)
  401e56:	4798      	blx	r3
	colorBLACK();
  401e58:	4b5c      	ldr	r3, [pc, #368]	; (401fcc <letraD+0x2c0>)
  401e5a:	4798      	blx	r3
	colorBLACK();
  401e5c:	4b5b      	ldr	r3, [pc, #364]	; (401fcc <letraD+0x2c0>)
  401e5e:	4798      	blx	r3
	colorBLACK();
  401e60:	4b5a      	ldr	r3, [pc, #360]	; (401fcc <letraD+0x2c0>)
  401e62:	4798      	blx	r3
	colorBLACK();
  401e64:	4b59      	ldr	r3, [pc, #356]	; (401fcc <letraD+0x2c0>)
  401e66:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401e68:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401e6c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e74:	4618      	mov	r0, r3
  401e76:	4b56      	ldr	r3, [pc, #344]	; (401fd0 <letraD+0x2c4>)
  401e78:	4798      	blx	r3
	colorBLACK();
  401e7a:	4b54      	ldr	r3, [pc, #336]	; (401fcc <letraD+0x2c0>)
  401e7c:	4798      	blx	r3
	
	colorBLACK();
  401e7e:	4b53      	ldr	r3, [pc, #332]	; (401fcc <letraD+0x2c0>)
  401e80:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401e82:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401e86:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401e8e:	4618      	mov	r0, r3
  401e90:	4b4f      	ldr	r3, [pc, #316]	; (401fd0 <letraD+0x2c4>)
  401e92:	4798      	blx	r3
	colorBLACK();
  401e94:	4b4d      	ldr	r3, [pc, #308]	; (401fcc <letraD+0x2c0>)
  401e96:	4798      	blx	r3
	colorBLACK();
  401e98:	4b4c      	ldr	r3, [pc, #304]	; (401fcc <letraD+0x2c0>)
  401e9a:	4798      	blx	r3
	colorBLACK();
  401e9c:	4b4b      	ldr	r3, [pc, #300]	; (401fcc <letraD+0x2c0>)
  401e9e:	4798      	blx	r3
	colorBLACK();
  401ea0:	4b4a      	ldr	r3, [pc, #296]	; (401fcc <letraD+0x2c0>)
  401ea2:	4798      	blx	r3
	colorBLACK();
  401ea4:	4b49      	ldr	r3, [pc, #292]	; (401fcc <letraD+0x2c0>)
  401ea6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401ea8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401eac:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401eb4:	4618      	mov	r0, r3
  401eb6:	4b46      	ldr	r3, [pc, #280]	; (401fd0 <letraD+0x2c4>)
  401eb8:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  401eba:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401ebe:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401ec6:	4618      	mov	r0, r3
  401ec8:	4b41      	ldr	r3, [pc, #260]	; (401fd0 <letraD+0x2c4>)
  401eca:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401ecc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401ed0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401ed8:	4618      	mov	r0, r3
  401eda:	4b3d      	ldr	r3, [pc, #244]	; (401fd0 <letraD+0x2c4>)
  401edc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401ede:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401ee2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401eea:	4618      	mov	r0, r3
  401eec:	4b38      	ldr	r3, [pc, #224]	; (401fd0 <letraD+0x2c4>)
  401eee:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401ef0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401ef4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401efc:	4618      	mov	r0, r3
  401efe:	4b34      	ldr	r3, [pc, #208]	; (401fd0 <letraD+0x2c4>)
  401f00:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401f02:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401f06:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401f0e:	4618      	mov	r0, r3
  401f10:	4b2f      	ldr	r3, [pc, #188]	; (401fd0 <letraD+0x2c4>)
  401f12:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401f14:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401f18:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401f20:	4618      	mov	r0, r3
  401f22:	4b2b      	ldr	r3, [pc, #172]	; (401fd0 <letraD+0x2c4>)
  401f24:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401f26:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401f2a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401f32:	4618      	mov	r0, r3
  401f34:	4b26      	ldr	r3, [pc, #152]	; (401fd0 <letraD+0x2c4>)
  401f36:	4798      	blx	r3
	colorBLACK();
  401f38:	4b24      	ldr	r3, [pc, #144]	; (401fcc <letraD+0x2c0>)
  401f3a:	4798      	blx	r3
	
	colorBLACK();
  401f3c:	4b23      	ldr	r3, [pc, #140]	; (401fcc <letraD+0x2c0>)
  401f3e:	4798      	blx	r3
	colorBLACK();
  401f40:	4b22      	ldr	r3, [pc, #136]	; (401fcc <letraD+0x2c0>)
  401f42:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401f44:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401f48:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401f50:	4618      	mov	r0, r3
  401f52:	4b1f      	ldr	r3, [pc, #124]	; (401fd0 <letraD+0x2c4>)
  401f54:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401f56:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401f5a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401f62:	4618      	mov	r0, r3
  401f64:	4b1a      	ldr	r3, [pc, #104]	; (401fd0 <letraD+0x2c4>)
  401f66:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401f68:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401f6c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401f74:	4618      	mov	r0, r3
  401f76:	4b16      	ldr	r3, [pc, #88]	; (401fd0 <letraD+0x2c4>)
  401f78:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401f7a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401f7e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401f86:	4618      	mov	r0, r3
  401f88:	4b11      	ldr	r3, [pc, #68]	; (401fd0 <letraD+0x2c4>)
  401f8a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  401f8c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  401f90:	f997 1006 	ldrsb.w	r1, [r7, #6]
  401f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401f98:	4618      	mov	r0, r3
  401f9a:	4b0d      	ldr	r3, [pc, #52]	; (401fd0 <letraD+0x2c4>)
  401f9c:	4798      	blx	r3
	colorBLACK();
  401f9e:	4b0b      	ldr	r3, [pc, #44]	; (401fcc <letraD+0x2c0>)
  401fa0:	4798      	blx	r3
	
	
	colorBLACK();
  401fa2:	4b0a      	ldr	r3, [pc, #40]	; (401fcc <letraD+0x2c0>)
  401fa4:	4798      	blx	r3
	colorBLACK();
  401fa6:	4b09      	ldr	r3, [pc, #36]	; (401fcc <letraD+0x2c0>)
  401fa8:	4798      	blx	r3
	colorBLACK();
  401faa:	4b08      	ldr	r3, [pc, #32]	; (401fcc <letraD+0x2c0>)
  401fac:	4798      	blx	r3
	colorBLACK();
  401fae:	4b07      	ldr	r3, [pc, #28]	; (401fcc <letraD+0x2c0>)
  401fb0:	4798      	blx	r3
	colorBLACK();
  401fb2:	4b06      	ldr	r3, [pc, #24]	; (401fcc <letraD+0x2c0>)
  401fb4:	4798      	blx	r3
	colorBLACK();
  401fb6:	4b05      	ldr	r3, [pc, #20]	; (401fcc <letraD+0x2c0>)
  401fb8:	4798      	blx	r3
	colorBLACK();
  401fba:	4b04      	ldr	r3, [pc, #16]	; (401fcc <letraD+0x2c0>)
  401fbc:	4798      	blx	r3
	colorBLACK();
  401fbe:	4b03      	ldr	r3, [pc, #12]	; (401fcc <letraD+0x2c0>)
  401fc0:	4798      	blx	r3
}
  401fc2:	bf00      	nop
  401fc4:	3708      	adds	r7, #8
  401fc6:	46bd      	mov	sp, r7
  401fc8:	bd80      	pop	{r7, pc}
  401fca:	bf00      	nop
  401fcc:	004013bd 	.word	0x004013bd
  401fd0:	00401411 	.word	0x00401411

00401fd4 <letraE>:


void letraE(int8_t red, int8_t green, int8_t blue)
{
  401fd4:	b580      	push	{r7, lr}
  401fd6:	b082      	sub	sp, #8
  401fd8:	af00      	add	r7, sp, #0
  401fda:	4603      	mov	r3, r0
  401fdc:	71fb      	strb	r3, [r7, #7]
  401fde:	460b      	mov	r3, r1
  401fe0:	71bb      	strb	r3, [r7, #6]
  401fe2:	4613      	mov	r3, r2
  401fe4:	717b      	strb	r3, [r7, #5]
	//E
	colorBLACK();
  401fe6:	4b99      	ldr	r3, [pc, #612]	; (40224c <letraE+0x278>)
  401fe8:	4798      	blx	r3
	colorBLACK();
  401fea:	4b98      	ldr	r3, [pc, #608]	; (40224c <letraE+0x278>)
  401fec:	4798      	blx	r3
	colorBLACK();
  401fee:	4b97      	ldr	r3, [pc, #604]	; (40224c <letraE+0x278>)
  401ff0:	4798      	blx	r3
	colorBLACK();
  401ff2:	4b96      	ldr	r3, [pc, #600]	; (40224c <letraE+0x278>)
  401ff4:	4798      	blx	r3
	colorBLACK();
  401ff6:	4b95      	ldr	r3, [pc, #596]	; (40224c <letraE+0x278>)
  401ff8:	4798      	blx	r3
	colorBLACK();
  401ffa:	4b94      	ldr	r3, [pc, #592]	; (40224c <letraE+0x278>)
  401ffc:	4798      	blx	r3
	colorBLACK();
  401ffe:	4b93      	ldr	r3, [pc, #588]	; (40224c <letraE+0x278>)
  402000:	4798      	blx	r3
	colorBLACK();
  402002:	4b92      	ldr	r3, [pc, #584]	; (40224c <letraE+0x278>)
  402004:	4798      	blx	r3
	
	
	
	colorDEFINE(red,green,blue);
  402006:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40200a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402012:	4618      	mov	r0, r3
  402014:	4b8e      	ldr	r3, [pc, #568]	; (402250 <letraE+0x27c>)
  402016:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402018:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40201c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402020:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402024:	4618      	mov	r0, r3
  402026:	4b8a      	ldr	r3, [pc, #552]	; (402250 <letraE+0x27c>)
  402028:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40202a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40202e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402032:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402036:	4618      	mov	r0, r3
  402038:	4b85      	ldr	r3, [pc, #532]	; (402250 <letraE+0x27c>)
  40203a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40203c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402040:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402044:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402048:	4618      	mov	r0, r3
  40204a:	4b81      	ldr	r3, [pc, #516]	; (402250 <letraE+0x27c>)
  40204c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40204e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402052:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402056:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40205a:	4618      	mov	r0, r3
  40205c:	4b7c      	ldr	r3, [pc, #496]	; (402250 <letraE+0x27c>)
  40205e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402060:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402064:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402068:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40206c:	4618      	mov	r0, r3
  40206e:	4b78      	ldr	r3, [pc, #480]	; (402250 <letraE+0x27c>)
  402070:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402072:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402076:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40207e:	4618      	mov	r0, r3
  402080:	4b73      	ldr	r3, [pc, #460]	; (402250 <letraE+0x27c>)
  402082:	4798      	blx	r3
	colorBLACK();
  402084:	4b71      	ldr	r3, [pc, #452]	; (40224c <letraE+0x278>)
  402086:	4798      	blx	r3
	
	colorBLACK();
  402088:	4b70      	ldr	r3, [pc, #448]	; (40224c <letraE+0x278>)
  40208a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40208c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402090:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402094:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402098:	4618      	mov	r0, r3
  40209a:	4b6d      	ldr	r3, [pc, #436]	; (402250 <letraE+0x27c>)
  40209c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40209e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4020a2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4020aa:	4618      	mov	r0, r3
  4020ac:	4b68      	ldr	r3, [pc, #416]	; (402250 <letraE+0x27c>)
  4020ae:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4020b0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4020b4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4020bc:	4618      	mov	r0, r3
  4020be:	4b64      	ldr	r3, [pc, #400]	; (402250 <letraE+0x27c>)
  4020c0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4020c2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4020c6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4020ce:	4618      	mov	r0, r3
  4020d0:	4b5f      	ldr	r3, [pc, #380]	; (402250 <letraE+0x27c>)
  4020d2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4020d4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4020d8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4020e0:	4618      	mov	r0, r3
  4020e2:	4b5b      	ldr	r3, [pc, #364]	; (402250 <letraE+0x27c>)
  4020e4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4020e6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4020ea:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4020f2:	4618      	mov	r0, r3
  4020f4:	4b56      	ldr	r3, [pc, #344]	; (402250 <letraE+0x27c>)
  4020f6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4020f8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4020fc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402100:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402104:	4618      	mov	r0, r3
  402106:	4b52      	ldr	r3, [pc, #328]	; (402250 <letraE+0x27c>)
  402108:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  40210a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40210e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402112:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402116:	4618      	mov	r0, r3
  402118:	4b4d      	ldr	r3, [pc, #308]	; (402250 <letraE+0x27c>)
  40211a:	4798      	blx	r3
	colorBLACK();
  40211c:	4b4b      	ldr	r3, [pc, #300]	; (40224c <letraE+0x278>)
  40211e:	4798      	blx	r3
	colorBLACK();
  402120:	4b4a      	ldr	r3, [pc, #296]	; (40224c <letraE+0x278>)
  402122:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402124:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402128:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402130:	4618      	mov	r0, r3
  402132:	4b47      	ldr	r3, [pc, #284]	; (402250 <letraE+0x27c>)
  402134:	4798      	blx	r3
	colorBLACK();
  402136:	4b45      	ldr	r3, [pc, #276]	; (40224c <letraE+0x278>)
  402138:	4798      	blx	r3
	colorBLACK();
  40213a:	4b44      	ldr	r3, [pc, #272]	; (40224c <letraE+0x278>)
  40213c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40213e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402142:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402146:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40214a:	4618      	mov	r0, r3
  40214c:	4b40      	ldr	r3, [pc, #256]	; (402250 <letraE+0x27c>)
  40214e:	4798      	blx	r3
	colorBLACK();
  402150:	4b3e      	ldr	r3, [pc, #248]	; (40224c <letraE+0x278>)
  402152:	4798      	blx	r3
	
	
	colorBLACK();
  402154:	4b3d      	ldr	r3, [pc, #244]	; (40224c <letraE+0x278>)
  402156:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402158:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40215c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402160:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402164:	4618      	mov	r0, r3
  402166:	4b3a      	ldr	r3, [pc, #232]	; (402250 <letraE+0x27c>)
  402168:	4798      	blx	r3
	colorBLACK();
  40216a:	4b38      	ldr	r3, [pc, #224]	; (40224c <letraE+0x278>)
  40216c:	4798      	blx	r3
	colorBLACK();
  40216e:	4b37      	ldr	r3, [pc, #220]	; (40224c <letraE+0x278>)
  402170:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402172:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402176:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40217e:	4618      	mov	r0, r3
  402180:	4b33      	ldr	r3, [pc, #204]	; (402250 <letraE+0x27c>)
  402182:	4798      	blx	r3
	colorBLACK();
  402184:	4b31      	ldr	r3, [pc, #196]	; (40224c <letraE+0x278>)
  402186:	4798      	blx	r3
	colorBLACK();
  402188:	4b30      	ldr	r3, [pc, #192]	; (40224c <letraE+0x278>)
  40218a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40218c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402190:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402194:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402198:	4618      	mov	r0, r3
  40219a:	4b2d      	ldr	r3, [pc, #180]	; (402250 <letraE+0x27c>)
  40219c:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  40219e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4021a2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4021aa:	4618      	mov	r0, r3
  4021ac:	4b28      	ldr	r3, [pc, #160]	; (402250 <letraE+0x27c>)
  4021ae:	4798      	blx	r3
	colorBLACK();
  4021b0:	4b26      	ldr	r3, [pc, #152]	; (40224c <letraE+0x278>)
  4021b2:	4798      	blx	r3
	colorBLACK();
  4021b4:	4b25      	ldr	r3, [pc, #148]	; (40224c <letraE+0x278>)
  4021b6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4021b8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4021bc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4021c4:	4618      	mov	r0, r3
  4021c6:	4b22      	ldr	r3, [pc, #136]	; (402250 <letraE+0x27c>)
  4021c8:	4798      	blx	r3
	colorBLACK();
  4021ca:	4b20      	ldr	r3, [pc, #128]	; (40224c <letraE+0x278>)
  4021cc:	4798      	blx	r3
	colorBLACK();
  4021ce:	4b1f      	ldr	r3, [pc, #124]	; (40224c <letraE+0x278>)
  4021d0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4021d2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4021d6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4021de:	4618      	mov	r0, r3
  4021e0:	4b1b      	ldr	r3, [pc, #108]	; (402250 <letraE+0x27c>)
  4021e2:	4798      	blx	r3
	colorBLACK();
  4021e4:	4b19      	ldr	r3, [pc, #100]	; (40224c <letraE+0x278>)
  4021e6:	4798      	blx	r3
	
	
	
	colorBLACK();
  4021e8:	4b18      	ldr	r3, [pc, #96]	; (40224c <letraE+0x278>)
  4021ea:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4021ec:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4021f0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4021f8:	4618      	mov	r0, r3
  4021fa:	4b15      	ldr	r3, [pc, #84]	; (402250 <letraE+0x27c>)
  4021fc:	4798      	blx	r3
	colorBLACK();
  4021fe:	4b13      	ldr	r3, [pc, #76]	; (40224c <letraE+0x278>)
  402200:	4798      	blx	r3
	colorBLACK();
  402202:	4b12      	ldr	r3, [pc, #72]	; (40224c <letraE+0x278>)
  402204:	4798      	blx	r3
	colorBLACK();
  402206:	4b11      	ldr	r3, [pc, #68]	; (40224c <letraE+0x278>)
  402208:	4798      	blx	r3
	colorBLACK();
  40220a:	4b10      	ldr	r3, [pc, #64]	; (40224c <letraE+0x278>)
  40220c:	4798      	blx	r3
	colorBLACK();
  40220e:	4b0f      	ldr	r3, [pc, #60]	; (40224c <letraE+0x278>)
  402210:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402212:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402216:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40221e:	4618      	mov	r0, r3
  402220:	4b0b      	ldr	r3, [pc, #44]	; (402250 <letraE+0x27c>)
  402222:	4798      	blx	r3
	
	
	colorBLACK();
  402224:	4b09      	ldr	r3, [pc, #36]	; (40224c <letraE+0x278>)
  402226:	4798      	blx	r3
	colorBLACK();
  402228:	4b08      	ldr	r3, [pc, #32]	; (40224c <letraE+0x278>)
  40222a:	4798      	blx	r3
	colorBLACK();
  40222c:	4b07      	ldr	r3, [pc, #28]	; (40224c <letraE+0x278>)
  40222e:	4798      	blx	r3
	colorBLACK();
  402230:	4b06      	ldr	r3, [pc, #24]	; (40224c <letraE+0x278>)
  402232:	4798      	blx	r3
	colorBLACK();
  402234:	4b05      	ldr	r3, [pc, #20]	; (40224c <letraE+0x278>)
  402236:	4798      	blx	r3
	colorBLACK();
  402238:	4b04      	ldr	r3, [pc, #16]	; (40224c <letraE+0x278>)
  40223a:	4798      	blx	r3
	colorBLACK();
  40223c:	4b03      	ldr	r3, [pc, #12]	; (40224c <letraE+0x278>)
  40223e:	4798      	blx	r3
	colorBLACK();
  402240:	4b02      	ldr	r3, [pc, #8]	; (40224c <letraE+0x278>)
  402242:	4798      	blx	r3
}
  402244:	bf00      	nop
  402246:	3708      	adds	r7, #8
  402248:	46bd      	mov	sp, r7
  40224a:	bd80      	pop	{r7, pc}
  40224c:	004013bd 	.word	0x004013bd
  402250:	00401411 	.word	0x00401411

00402254 <letraF>:



void letraF(int8_t red, int8_t green, int8_t blue)
{
  402254:	b580      	push	{r7, lr}
  402256:	b082      	sub	sp, #8
  402258:	af00      	add	r7, sp, #0
  40225a:	4603      	mov	r3, r0
  40225c:	71fb      	strb	r3, [r7, #7]
  40225e:	460b      	mov	r3, r1
  402260:	71bb      	strb	r3, [r7, #6]
  402262:	4613      	mov	r3, r2
  402264:	717b      	strb	r3, [r7, #5]
	//F
	colorBLACK();
  402266:	4b8b      	ldr	r3, [pc, #556]	; (402494 <letraF+0x240>)
  402268:	4798      	blx	r3
	colorBLACK();
  40226a:	4b8a      	ldr	r3, [pc, #552]	; (402494 <letraF+0x240>)
  40226c:	4798      	blx	r3
	colorBLACK();
  40226e:	4b89      	ldr	r3, [pc, #548]	; (402494 <letraF+0x240>)
  402270:	4798      	blx	r3
	colorBLACK();
  402272:	4b88      	ldr	r3, [pc, #544]	; (402494 <letraF+0x240>)
  402274:	4798      	blx	r3
	colorBLACK();
  402276:	4b87      	ldr	r3, [pc, #540]	; (402494 <letraF+0x240>)
  402278:	4798      	blx	r3
	colorBLACK();
  40227a:	4b86      	ldr	r3, [pc, #536]	; (402494 <letraF+0x240>)
  40227c:	4798      	blx	r3
	colorBLACK();
  40227e:	4b85      	ldr	r3, [pc, #532]	; (402494 <letraF+0x240>)
  402280:	4798      	blx	r3
	colorBLACK();
  402282:	4b84      	ldr	r3, [pc, #528]	; (402494 <letraF+0x240>)
  402284:	4798      	blx	r3
	
	
	
	colorDEFINE(red,green,blue);
  402286:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40228a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402292:	4618      	mov	r0, r3
  402294:	4b80      	ldr	r3, [pc, #512]	; (402498 <letraF+0x244>)
  402296:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402298:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40229c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4022a4:	4618      	mov	r0, r3
  4022a6:	4b7c      	ldr	r3, [pc, #496]	; (402498 <letraF+0x244>)
  4022a8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4022aa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4022ae:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4022b6:	4618      	mov	r0, r3
  4022b8:	4b77      	ldr	r3, [pc, #476]	; (402498 <letraF+0x244>)
  4022ba:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4022bc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4022c0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4022c8:	4618      	mov	r0, r3
  4022ca:	4b73      	ldr	r3, [pc, #460]	; (402498 <letraF+0x244>)
  4022cc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4022ce:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4022d2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4022da:	4618      	mov	r0, r3
  4022dc:	4b6e      	ldr	r3, [pc, #440]	; (402498 <letraF+0x244>)
  4022de:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4022e0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4022e4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4022ec:	4618      	mov	r0, r3
  4022ee:	4b6a      	ldr	r3, [pc, #424]	; (402498 <letraF+0x244>)
  4022f0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4022f2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4022f6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4022fe:	4618      	mov	r0, r3
  402300:	4b65      	ldr	r3, [pc, #404]	; (402498 <letraF+0x244>)
  402302:	4798      	blx	r3
	colorBLACK();
  402304:	4b63      	ldr	r3, [pc, #396]	; (402494 <letraF+0x240>)
  402306:	4798      	blx	r3
	
	colorBLACK();
  402308:	4b62      	ldr	r3, [pc, #392]	; (402494 <letraF+0x240>)
  40230a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40230c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402310:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402314:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402318:	4618      	mov	r0, r3
  40231a:	4b5f      	ldr	r3, [pc, #380]	; (402498 <letraF+0x244>)
  40231c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40231e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402322:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402326:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40232a:	4618      	mov	r0, r3
  40232c:	4b5a      	ldr	r3, [pc, #360]	; (402498 <letraF+0x244>)
  40232e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402330:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402334:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402338:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40233c:	4618      	mov	r0, r3
  40233e:	4b56      	ldr	r3, [pc, #344]	; (402498 <letraF+0x244>)
  402340:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402342:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402346:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40234e:	4618      	mov	r0, r3
  402350:	4b51      	ldr	r3, [pc, #324]	; (402498 <letraF+0x244>)
  402352:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402354:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402358:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402360:	4618      	mov	r0, r3
  402362:	4b4d      	ldr	r3, [pc, #308]	; (402498 <letraF+0x244>)
  402364:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402366:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40236a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402372:	4618      	mov	r0, r3
  402374:	4b48      	ldr	r3, [pc, #288]	; (402498 <letraF+0x244>)
  402376:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402378:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40237c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402380:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402384:	4618      	mov	r0, r3
  402386:	4b44      	ldr	r3, [pc, #272]	; (402498 <letraF+0x244>)
  402388:	4798      	blx	r3
	
	colorBLACK();
  40238a:	4b42      	ldr	r3, [pc, #264]	; (402494 <letraF+0x240>)
  40238c:	4798      	blx	r3
	colorBLACK();
  40238e:	4b41      	ldr	r3, [pc, #260]	; (402494 <letraF+0x240>)
  402390:	4798      	blx	r3
	colorBLACK();
  402392:	4b40      	ldr	r3, [pc, #256]	; (402494 <letraF+0x240>)
  402394:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402396:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40239a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4023a2:	4618      	mov	r0, r3
  4023a4:	4b3c      	ldr	r3, [pc, #240]	; (402498 <letraF+0x244>)
  4023a6:	4798      	blx	r3
	colorBLACK();
  4023a8:	4b3a      	ldr	r3, [pc, #232]	; (402494 <letraF+0x240>)
  4023aa:	4798      	blx	r3
	colorBLACK();
  4023ac:	4b39      	ldr	r3, [pc, #228]	; (402494 <letraF+0x240>)
  4023ae:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4023b0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4023b4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4023bc:	4618      	mov	r0, r3
  4023be:	4b36      	ldr	r3, [pc, #216]	; (402498 <letraF+0x244>)
  4023c0:	4798      	blx	r3
	colorBLACK();
  4023c2:	4b34      	ldr	r3, [pc, #208]	; (402494 <letraF+0x240>)
  4023c4:	4798      	blx	r3
	
	
	colorBLACK();
  4023c6:	4b33      	ldr	r3, [pc, #204]	; (402494 <letraF+0x240>)
  4023c8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4023ca:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4023ce:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4023d6:	4618      	mov	r0, r3
  4023d8:	4b2f      	ldr	r3, [pc, #188]	; (402498 <letraF+0x244>)
  4023da:	4798      	blx	r3
	colorBLACK();
  4023dc:	4b2d      	ldr	r3, [pc, #180]	; (402494 <letraF+0x240>)
  4023de:	4798      	blx	r3
	colorBLACK();
  4023e0:	4b2c      	ldr	r3, [pc, #176]	; (402494 <letraF+0x240>)
  4023e2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4023e4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4023e8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4023f0:	4618      	mov	r0, r3
  4023f2:	4b29      	ldr	r3, [pc, #164]	; (402498 <letraF+0x244>)
  4023f4:	4798      	blx	r3
	colorBLACK();
  4023f6:	4b27      	ldr	r3, [pc, #156]	; (402494 <letraF+0x240>)
  4023f8:	4798      	blx	r3
	colorBLACK();
  4023fa:	4b26      	ldr	r3, [pc, #152]	; (402494 <letraF+0x240>)
  4023fc:	4798      	blx	r3
	colorBLACK();
  4023fe:	4b25      	ldr	r3, [pc, #148]	; (402494 <letraF+0x240>)
  402400:	4798      	blx	r3
	
	
	colorBLACK();
  402402:	4b24      	ldr	r3, [pc, #144]	; (402494 <letraF+0x240>)
  402404:	4798      	blx	r3
	colorBLACK();
  402406:	4b23      	ldr	r3, [pc, #140]	; (402494 <letraF+0x240>)
  402408:	4798      	blx	r3
	colorBLACK();
  40240a:	4b22      	ldr	r3, [pc, #136]	; (402494 <letraF+0x240>)
  40240c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40240e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402412:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402416:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40241a:	4618      	mov	r0, r3
  40241c:	4b1e      	ldr	r3, [pc, #120]	; (402498 <letraF+0x244>)
  40241e:	4798      	blx	r3
	colorBLACK();
  402420:	4b1c      	ldr	r3, [pc, #112]	; (402494 <letraF+0x240>)
  402422:	4798      	blx	r3
	colorBLACK();
  402424:	4b1b      	ldr	r3, [pc, #108]	; (402494 <letraF+0x240>)
  402426:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402428:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40242c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402430:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402434:	4618      	mov	r0, r3
  402436:	4b18      	ldr	r3, [pc, #96]	; (402498 <letraF+0x244>)
  402438:	4798      	blx	r3
	colorBLACK();
  40243a:	4b16      	ldr	r3, [pc, #88]	; (402494 <letraF+0x240>)
  40243c:	4798      	blx	r3
	
	
	
	colorBLACK();
  40243e:	4b15      	ldr	r3, [pc, #84]	; (402494 <letraF+0x240>)
  402440:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402442:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402446:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40244e:	4618      	mov	r0, r3
  402450:	4b11      	ldr	r3, [pc, #68]	; (402498 <letraF+0x244>)
  402452:	4798      	blx	r3
	colorBLACK();
  402454:	4b0f      	ldr	r3, [pc, #60]	; (402494 <letraF+0x240>)
  402456:	4798      	blx	r3
	colorBLACK();
  402458:	4b0e      	ldr	r3, [pc, #56]	; (402494 <letraF+0x240>)
  40245a:	4798      	blx	r3
	colorBLACK();
  40245c:	4b0d      	ldr	r3, [pc, #52]	; (402494 <letraF+0x240>)
  40245e:	4798      	blx	r3
	colorBLACK();
  402460:	4b0c      	ldr	r3, [pc, #48]	; (402494 <letraF+0x240>)
  402462:	4798      	blx	r3
	colorBLACK();
  402464:	4b0b      	ldr	r3, [pc, #44]	; (402494 <letraF+0x240>)
  402466:	4798      	blx	r3
	colorBLACK();
  402468:	4b0a      	ldr	r3, [pc, #40]	; (402494 <letraF+0x240>)
  40246a:	4798      	blx	r3
	
	
	colorBLACK();
  40246c:	4b09      	ldr	r3, [pc, #36]	; (402494 <letraF+0x240>)
  40246e:	4798      	blx	r3
	colorBLACK();
  402470:	4b08      	ldr	r3, [pc, #32]	; (402494 <letraF+0x240>)
  402472:	4798      	blx	r3
	colorBLACK();
  402474:	4b07      	ldr	r3, [pc, #28]	; (402494 <letraF+0x240>)
  402476:	4798      	blx	r3
	colorBLACK();
  402478:	4b06      	ldr	r3, [pc, #24]	; (402494 <letraF+0x240>)
  40247a:	4798      	blx	r3
	colorBLACK();
  40247c:	4b05      	ldr	r3, [pc, #20]	; (402494 <letraF+0x240>)
  40247e:	4798      	blx	r3
	colorBLACK();
  402480:	4b04      	ldr	r3, [pc, #16]	; (402494 <letraF+0x240>)
  402482:	4798      	blx	r3
	colorBLACK();
  402484:	4b03      	ldr	r3, [pc, #12]	; (402494 <letraF+0x240>)
  402486:	4798      	blx	r3
	colorBLACK();
  402488:	4b02      	ldr	r3, [pc, #8]	; (402494 <letraF+0x240>)
  40248a:	4798      	blx	r3
}
  40248c:	bf00      	nop
  40248e:	3708      	adds	r7, #8
  402490:	46bd      	mov	sp, r7
  402492:	bd80      	pop	{r7, pc}
  402494:	004013bd 	.word	0x004013bd
  402498:	00401411 	.word	0x00401411

0040249c <letraG>:




void letraG(int8_t red, int8_t green, int8_t blue)
{
  40249c:	b580      	push	{r7, lr}
  40249e:	b082      	sub	sp, #8
  4024a0:	af00      	add	r7, sp, #0
  4024a2:	4603      	mov	r3, r0
  4024a4:	71fb      	strb	r3, [r7, #7]
  4024a6:	460b      	mov	r3, r1
  4024a8:	71bb      	strb	r3, [r7, #6]
  4024aa:	4613      	mov	r3, r2
  4024ac:	717b      	strb	r3, [r7, #5]
	//G
	colorBLACK();
  4024ae:	4b99      	ldr	r3, [pc, #612]	; (402714 <letraG+0x278>)
  4024b0:	4798      	blx	r3
	colorBLACK();
  4024b2:	4b98      	ldr	r3, [pc, #608]	; (402714 <letraG+0x278>)
  4024b4:	4798      	blx	r3
	colorBLACK();
  4024b6:	4b97      	ldr	r3, [pc, #604]	; (402714 <letraG+0x278>)
  4024b8:	4798      	blx	r3
	colorBLACK();
  4024ba:	4b96      	ldr	r3, [pc, #600]	; (402714 <letraG+0x278>)
  4024bc:	4798      	blx	r3
	colorBLACK();
  4024be:	4b95      	ldr	r3, [pc, #596]	; (402714 <letraG+0x278>)
  4024c0:	4798      	blx	r3
	colorBLACK();
  4024c2:	4b94      	ldr	r3, [pc, #592]	; (402714 <letraG+0x278>)
  4024c4:	4798      	blx	r3
	colorBLACK();
  4024c6:	4b93      	ldr	r3, [pc, #588]	; (402714 <letraG+0x278>)
  4024c8:	4798      	blx	r3
	colorBLACK();
  4024ca:	4b92      	ldr	r3, [pc, #584]	; (402714 <letraG+0x278>)
  4024cc:	4798      	blx	r3
	
	
	colorBLACK();
  4024ce:	4b91      	ldr	r3, [pc, #580]	; (402714 <letraG+0x278>)
  4024d0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4024d2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4024d6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4024de:	4618      	mov	r0, r3
  4024e0:	4b8d      	ldr	r3, [pc, #564]	; (402718 <letraG+0x27c>)
  4024e2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4024e4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4024e8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4024f0:	4618      	mov	r0, r3
  4024f2:	4b89      	ldr	r3, [pc, #548]	; (402718 <letraG+0x27c>)
  4024f4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4024f6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4024fa:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402502:	4618      	mov	r0, r3
  402504:	4b84      	ldr	r3, [pc, #528]	; (402718 <letraG+0x27c>)
  402506:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402508:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40250c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402510:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402514:	4618      	mov	r0, r3
  402516:	4b80      	ldr	r3, [pc, #512]	; (402718 <letraG+0x27c>)
  402518:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40251a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40251e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402522:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402526:	4618      	mov	r0, r3
  402528:	4b7b      	ldr	r3, [pc, #492]	; (402718 <letraG+0x27c>)
  40252a:	4798      	blx	r3
	colorBLACK();
  40252c:	4b79      	ldr	r3, [pc, #484]	; (402714 <letraG+0x278>)
  40252e:	4798      	blx	r3
	colorBLACK();
  402530:	4b78      	ldr	r3, [pc, #480]	; (402714 <letraG+0x278>)
  402532:	4798      	blx	r3
	
	colorBLACK();
  402534:	4b77      	ldr	r3, [pc, #476]	; (402714 <letraG+0x278>)
  402536:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402538:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40253c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402540:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402544:	4618      	mov	r0, r3
  402546:	4b74      	ldr	r3, [pc, #464]	; (402718 <letraG+0x27c>)
  402548:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40254a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40254e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402552:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402556:	4618      	mov	r0, r3
  402558:	4b6f      	ldr	r3, [pc, #444]	; (402718 <letraG+0x27c>)
  40255a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40255c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402560:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402564:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402568:	4618      	mov	r0, r3
  40256a:	4b6b      	ldr	r3, [pc, #428]	; (402718 <letraG+0x27c>)
  40256c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40256e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402572:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402576:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40257a:	4618      	mov	r0, r3
  40257c:	4b66      	ldr	r3, [pc, #408]	; (402718 <letraG+0x27c>)
  40257e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402580:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402584:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402588:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40258c:	4618      	mov	r0, r3
  40258e:	4b62      	ldr	r3, [pc, #392]	; (402718 <letraG+0x27c>)
  402590:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402592:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402596:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40259e:	4618      	mov	r0, r3
  4025a0:	4b5d      	ldr	r3, [pc, #372]	; (402718 <letraG+0x27c>)
  4025a2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4025a4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4025a8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4025b0:	4618      	mov	r0, r3
  4025b2:	4b59      	ldr	r3, [pc, #356]	; (402718 <letraG+0x27c>)
  4025b4:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  4025b6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4025ba:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4025c2:	4618      	mov	r0, r3
  4025c4:	4b54      	ldr	r3, [pc, #336]	; (402718 <letraG+0x27c>)
  4025c6:	4798      	blx	r3
	colorBLACK();
  4025c8:	4b52      	ldr	r3, [pc, #328]	; (402714 <letraG+0x278>)
  4025ca:	4798      	blx	r3
	colorBLACK();
  4025cc:	4b51      	ldr	r3, [pc, #324]	; (402714 <letraG+0x278>)
  4025ce:	4798      	blx	r3
	colorBLACK();
  4025d0:	4b50      	ldr	r3, [pc, #320]	; (402714 <letraG+0x278>)
  4025d2:	4798      	blx	r3
	colorBLACK();
  4025d4:	4b4f      	ldr	r3, [pc, #316]	; (402714 <letraG+0x278>)
  4025d6:	4798      	blx	r3
	colorBLACK();
  4025d8:	4b4e      	ldr	r3, [pc, #312]	; (402714 <letraG+0x278>)
  4025da:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4025dc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4025e0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4025e8:	4618      	mov	r0, r3
  4025ea:	4b4b      	ldr	r3, [pc, #300]	; (402718 <letraG+0x27c>)
  4025ec:	4798      	blx	r3
	colorBLACK();
  4025ee:	4b49      	ldr	r3, [pc, #292]	; (402714 <letraG+0x278>)
  4025f0:	4798      	blx	r3
	
	
	
	colorBLACK();
  4025f2:	4b48      	ldr	r3, [pc, #288]	; (402714 <letraG+0x278>)
  4025f4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4025f6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4025fa:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402602:	4618      	mov	r0, r3
  402604:	4b44      	ldr	r3, [pc, #272]	; (402718 <letraG+0x27c>)
  402606:	4798      	blx	r3
	colorBLACK();
  402608:	4b42      	ldr	r3, [pc, #264]	; (402714 <letraG+0x278>)
  40260a:	4798      	blx	r3
	colorBLACK();
  40260c:	4b41      	ldr	r3, [pc, #260]	; (402714 <letraG+0x278>)
  40260e:	4798      	blx	r3
	colorBLACK();
  402610:	4b40      	ldr	r3, [pc, #256]	; (402714 <letraG+0x278>)
  402612:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402614:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402618:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402620:	4618      	mov	r0, r3
  402622:	4b3d      	ldr	r3, [pc, #244]	; (402718 <letraG+0x27c>)
  402624:	4798      	blx	r3
	colorBLACK();
  402626:	4b3b      	ldr	r3, [pc, #236]	; (402714 <letraG+0x278>)
  402628:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40262a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40262e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402632:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402636:	4618      	mov	r0, r3
  402638:	4b37      	ldr	r3, [pc, #220]	; (402718 <letraG+0x27c>)
  40263a:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  40263c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402640:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402644:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402648:	4618      	mov	r0, r3
  40264a:	4b33      	ldr	r3, [pc, #204]	; (402718 <letraG+0x27c>)
  40264c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40264e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402652:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402656:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40265a:	4618      	mov	r0, r3
  40265c:	4b2e      	ldr	r3, [pc, #184]	; (402718 <letraG+0x27c>)
  40265e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402660:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402664:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402668:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40266c:	4618      	mov	r0, r3
  40266e:	4b2a      	ldr	r3, [pc, #168]	; (402718 <letraG+0x27c>)
  402670:	4798      	blx	r3
	colorBLACK();
  402672:	4b28      	ldr	r3, [pc, #160]	; (402714 <letraG+0x278>)
  402674:	4798      	blx	r3
	colorBLACK();
  402676:	4b27      	ldr	r3, [pc, #156]	; (402714 <letraG+0x278>)
  402678:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40267a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40267e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402682:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402686:	4618      	mov	r0, r3
  402688:	4b23      	ldr	r3, [pc, #140]	; (402718 <letraG+0x27c>)
  40268a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40268c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402690:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402694:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402698:	4618      	mov	r0, r3
  40269a:	4b1f      	ldr	r3, [pc, #124]	; (402718 <letraG+0x27c>)
  40269c:	4798      	blx	r3
	colorBLACK();
  40269e:	4b1d      	ldr	r3, [pc, #116]	; (402714 <letraG+0x278>)
  4026a0:	4798      	blx	r3
	
	colorBLACK();
  4026a2:	4b1c      	ldr	r3, [pc, #112]	; (402714 <letraG+0x278>)
  4026a4:	4798      	blx	r3
	colorBLACK();
  4026a6:	4b1b      	ldr	r3, [pc, #108]	; (402714 <letraG+0x278>)
  4026a8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4026aa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4026ae:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4026b6:	4618      	mov	r0, r3
  4026b8:	4b17      	ldr	r3, [pc, #92]	; (402718 <letraG+0x27c>)
  4026ba:	4798      	blx	r3
	colorBLACK();
  4026bc:	4b15      	ldr	r3, [pc, #84]	; (402714 <letraG+0x278>)
  4026be:	4798      	blx	r3
	colorBLACK();
  4026c0:	4b14      	ldr	r3, [pc, #80]	; (402714 <letraG+0x278>)
  4026c2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4026c4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4026c8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4026d0:	4618      	mov	r0, r3
  4026d2:	4b11      	ldr	r3, [pc, #68]	; (402718 <letraG+0x27c>)
  4026d4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4026d6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4026da:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4026e2:	4618      	mov	r0, r3
  4026e4:	4b0c      	ldr	r3, [pc, #48]	; (402718 <letraG+0x27c>)
  4026e6:	4798      	blx	r3
	colorBLACK();
  4026e8:	4b0a      	ldr	r3, [pc, #40]	; (402714 <letraG+0x278>)
  4026ea:	4798      	blx	r3
	
	
	colorBLACK();
  4026ec:	4b09      	ldr	r3, [pc, #36]	; (402714 <letraG+0x278>)
  4026ee:	4798      	blx	r3
	colorBLACK();
  4026f0:	4b08      	ldr	r3, [pc, #32]	; (402714 <letraG+0x278>)
  4026f2:	4798      	blx	r3
	colorBLACK();
  4026f4:	4b07      	ldr	r3, [pc, #28]	; (402714 <letraG+0x278>)
  4026f6:	4798      	blx	r3
	colorBLACK();
  4026f8:	4b06      	ldr	r3, [pc, #24]	; (402714 <letraG+0x278>)
  4026fa:	4798      	blx	r3
	colorBLACK();
  4026fc:	4b05      	ldr	r3, [pc, #20]	; (402714 <letraG+0x278>)
  4026fe:	4798      	blx	r3
	colorBLACK();
  402700:	4b04      	ldr	r3, [pc, #16]	; (402714 <letraG+0x278>)
  402702:	4798      	blx	r3
	colorBLACK();
  402704:	4b03      	ldr	r3, [pc, #12]	; (402714 <letraG+0x278>)
  402706:	4798      	blx	r3
	colorBLACK();
  402708:	4b02      	ldr	r3, [pc, #8]	; (402714 <letraG+0x278>)
  40270a:	4798      	blx	r3
}
  40270c:	bf00      	nop
  40270e:	3708      	adds	r7, #8
  402710:	46bd      	mov	sp, r7
  402712:	bd80      	pop	{r7, pc}
  402714:	004013bd 	.word	0x004013bd
  402718:	00401411 	.word	0x00401411

0040271c <letraH>:


void letraH(int8_t red, int8_t green, int8_t blue)
{
  40271c:	b580      	push	{r7, lr}
  40271e:	b082      	sub	sp, #8
  402720:	af00      	add	r7, sp, #0
  402722:	4603      	mov	r3, r0
  402724:	71fb      	strb	r3, [r7, #7]
  402726:	460b      	mov	r3, r1
  402728:	71bb      	strb	r3, [r7, #6]
  40272a:	4613      	mov	r3, r2
  40272c:	717b      	strb	r3, [r7, #5]
	//H
	colorBLACK();
  40272e:	4bab      	ldr	r3, [pc, #684]	; (4029dc <letraH+0x2c0>)
  402730:	4798      	blx	r3
	colorBLACK();
  402732:	4baa      	ldr	r3, [pc, #680]	; (4029dc <letraH+0x2c0>)
  402734:	4798      	blx	r3
	colorBLACK();
  402736:	4ba9      	ldr	r3, [pc, #676]	; (4029dc <letraH+0x2c0>)
  402738:	4798      	blx	r3
	colorBLACK();
  40273a:	4ba8      	ldr	r3, [pc, #672]	; (4029dc <letraH+0x2c0>)
  40273c:	4798      	blx	r3
	colorBLACK();
  40273e:	4ba7      	ldr	r3, [pc, #668]	; (4029dc <letraH+0x2c0>)
  402740:	4798      	blx	r3
	colorBLACK();
  402742:	4ba6      	ldr	r3, [pc, #664]	; (4029dc <letraH+0x2c0>)
  402744:	4798      	blx	r3
	colorBLACK();
  402746:	4ba5      	ldr	r3, [pc, #660]	; (4029dc <letraH+0x2c0>)
  402748:	4798      	blx	r3
	colorBLACK();
  40274a:	4ba4      	ldr	r3, [pc, #656]	; (4029dc <letraH+0x2c0>)
  40274c:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  40274e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402752:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402756:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40275a:	4618      	mov	r0, r3
  40275c:	4ba0      	ldr	r3, [pc, #640]	; (4029e0 <letraH+0x2c4>)
  40275e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402760:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402764:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402768:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40276c:	4618      	mov	r0, r3
  40276e:	4b9c      	ldr	r3, [pc, #624]	; (4029e0 <letraH+0x2c4>)
  402770:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402772:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402776:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40277e:	4618      	mov	r0, r3
  402780:	4b97      	ldr	r3, [pc, #604]	; (4029e0 <letraH+0x2c4>)
  402782:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402784:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402788:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402790:	4618      	mov	r0, r3
  402792:	4b93      	ldr	r3, [pc, #588]	; (4029e0 <letraH+0x2c4>)
  402794:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402796:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40279a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4027a2:	4618      	mov	r0, r3
  4027a4:	4b8e      	ldr	r3, [pc, #568]	; (4029e0 <letraH+0x2c4>)
  4027a6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4027a8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4027ac:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4027b4:	4618      	mov	r0, r3
  4027b6:	4b8a      	ldr	r3, [pc, #552]	; (4029e0 <letraH+0x2c4>)
  4027b8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4027ba:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4027be:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4027c6:	4618      	mov	r0, r3
  4027c8:	4b85      	ldr	r3, [pc, #532]	; (4029e0 <letraH+0x2c4>)
  4027ca:	4798      	blx	r3
	colorBLACK();
  4027cc:	4b83      	ldr	r3, [pc, #524]	; (4029dc <letraH+0x2c0>)
  4027ce:	4798      	blx	r3
	
	colorBLACK();
  4027d0:	4b82      	ldr	r3, [pc, #520]	; (4029dc <letraH+0x2c0>)
  4027d2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4027d4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4027d8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4027dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4027e0:	4618      	mov	r0, r3
  4027e2:	4b7f      	ldr	r3, [pc, #508]	; (4029e0 <letraH+0x2c4>)
  4027e4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4027e6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4027ea:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4027f2:	4618      	mov	r0, r3
  4027f4:	4b7a      	ldr	r3, [pc, #488]	; (4029e0 <letraH+0x2c4>)
  4027f6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4027f8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4027fc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402800:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402804:	4618      	mov	r0, r3
  402806:	4b76      	ldr	r3, [pc, #472]	; (4029e0 <letraH+0x2c4>)
  402808:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40280a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40280e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402812:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402816:	4618      	mov	r0, r3
  402818:	4b71      	ldr	r3, [pc, #452]	; (4029e0 <letraH+0x2c4>)
  40281a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40281c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402820:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402824:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402828:	4618      	mov	r0, r3
  40282a:	4b6d      	ldr	r3, [pc, #436]	; (4029e0 <letraH+0x2c4>)
  40282c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40282e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402832:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402836:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40283a:	4618      	mov	r0, r3
  40283c:	4b68      	ldr	r3, [pc, #416]	; (4029e0 <letraH+0x2c4>)
  40283e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402840:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402844:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402848:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40284c:	4618      	mov	r0, r3
  40284e:	4b64      	ldr	r3, [pc, #400]	; (4029e0 <letraH+0x2c4>)
  402850:	4798      	blx	r3
	
	colorBLACK();
  402852:	4b62      	ldr	r3, [pc, #392]	; (4029dc <letraH+0x2c0>)
  402854:	4798      	blx	r3
	colorBLACK();
  402856:	4b61      	ldr	r3, [pc, #388]	; (4029dc <letraH+0x2c0>)
  402858:	4798      	blx	r3
	colorBLACK();
  40285a:	4b60      	ldr	r3, [pc, #384]	; (4029dc <letraH+0x2c0>)
  40285c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40285e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402862:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402866:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40286a:	4618      	mov	r0, r3
  40286c:	4b5c      	ldr	r3, [pc, #368]	; (4029e0 <letraH+0x2c4>)
  40286e:	4798      	blx	r3
	colorBLACK();
  402870:	4b5a      	ldr	r3, [pc, #360]	; (4029dc <letraH+0x2c0>)
  402872:	4798      	blx	r3
	colorBLACK();
  402874:	4b59      	ldr	r3, [pc, #356]	; (4029dc <letraH+0x2c0>)
  402876:	4798      	blx	r3
	colorBLACK();
  402878:	4b58      	ldr	r3, [pc, #352]	; (4029dc <letraH+0x2c0>)
  40287a:	4798      	blx	r3
	colorBLACK();
  40287c:	4b57      	ldr	r3, [pc, #348]	; (4029dc <letraH+0x2c0>)
  40287e:	4798      	blx	r3
	
	colorBLACK();
  402880:	4b56      	ldr	r3, [pc, #344]	; (4029dc <letraH+0x2c0>)
  402882:	4798      	blx	r3
	colorBLACK();
  402884:	4b55      	ldr	r3, [pc, #340]	; (4029dc <letraH+0x2c0>)
  402886:	4798      	blx	r3
	colorBLACK();
  402888:	4b54      	ldr	r3, [pc, #336]	; (4029dc <letraH+0x2c0>)
  40288a:	4798      	blx	r3
	colorBLACK();
  40288c:	4b53      	ldr	r3, [pc, #332]	; (4029dc <letraH+0x2c0>)
  40288e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402890:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402894:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402898:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40289c:	4618      	mov	r0, r3
  40289e:	4b50      	ldr	r3, [pc, #320]	; (4029e0 <letraH+0x2c4>)
  4028a0:	4798      	blx	r3
	colorBLACK();
  4028a2:	4b4e      	ldr	r3, [pc, #312]	; (4029dc <letraH+0x2c0>)
  4028a4:	4798      	blx	r3
	colorBLACK();
  4028a6:	4b4d      	ldr	r3, [pc, #308]	; (4029dc <letraH+0x2c0>)
  4028a8:	4798      	blx	r3
	colorBLACK();
  4028aa:	4b4c      	ldr	r3, [pc, #304]	; (4029dc <letraH+0x2c0>)
  4028ac:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  4028ae:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4028b2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4028ba:	4618      	mov	r0, r3
  4028bc:	4b48      	ldr	r3, [pc, #288]	; (4029e0 <letraH+0x2c4>)
  4028be:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4028c0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4028c4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4028cc:	4618      	mov	r0, r3
  4028ce:	4b44      	ldr	r3, [pc, #272]	; (4029e0 <letraH+0x2c4>)
  4028d0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4028d2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4028d6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4028de:	4618      	mov	r0, r3
  4028e0:	4b3f      	ldr	r3, [pc, #252]	; (4029e0 <letraH+0x2c4>)
  4028e2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4028e4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4028e8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4028ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4028f0:	4618      	mov	r0, r3
  4028f2:	4b3b      	ldr	r3, [pc, #236]	; (4029e0 <letraH+0x2c4>)
  4028f4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4028f6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4028fa:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402902:	4618      	mov	r0, r3
  402904:	4b36      	ldr	r3, [pc, #216]	; (4029e0 <letraH+0x2c4>)
  402906:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402908:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40290c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402910:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402914:	4618      	mov	r0, r3
  402916:	4b32      	ldr	r3, [pc, #200]	; (4029e0 <letraH+0x2c4>)
  402918:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40291a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40291e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402922:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402926:	4618      	mov	r0, r3
  402928:	4b2d      	ldr	r3, [pc, #180]	; (4029e0 <letraH+0x2c4>)
  40292a:	4798      	blx	r3
	colorBLACK();
  40292c:	4b2b      	ldr	r3, [pc, #172]	; (4029dc <letraH+0x2c0>)
  40292e:	4798      	blx	r3
	
	colorBLACK();
  402930:	4b2a      	ldr	r3, [pc, #168]	; (4029dc <letraH+0x2c0>)
  402932:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402934:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402938:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402940:	4618      	mov	r0, r3
  402942:	4b27      	ldr	r3, [pc, #156]	; (4029e0 <letraH+0x2c4>)
  402944:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402946:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40294a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402952:	4618      	mov	r0, r3
  402954:	4b22      	ldr	r3, [pc, #136]	; (4029e0 <letraH+0x2c4>)
  402956:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402958:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40295c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402960:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402964:	4618      	mov	r0, r3
  402966:	4b1e      	ldr	r3, [pc, #120]	; (4029e0 <letraH+0x2c4>)
  402968:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40296a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40296e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402972:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402976:	4618      	mov	r0, r3
  402978:	4b19      	ldr	r3, [pc, #100]	; (4029e0 <letraH+0x2c4>)
  40297a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40297c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402980:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402984:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402988:	4618      	mov	r0, r3
  40298a:	4b15      	ldr	r3, [pc, #84]	; (4029e0 <letraH+0x2c4>)
  40298c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40298e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402992:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402996:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40299a:	4618      	mov	r0, r3
  40299c:	4b10      	ldr	r3, [pc, #64]	; (4029e0 <letraH+0x2c4>)
  40299e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4029a0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4029a4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4029ac:	4618      	mov	r0, r3
  4029ae:	4b0c      	ldr	r3, [pc, #48]	; (4029e0 <letraH+0x2c4>)
  4029b0:	4798      	blx	r3
	
	colorBLACK();
  4029b2:	4b0a      	ldr	r3, [pc, #40]	; (4029dc <letraH+0x2c0>)
  4029b4:	4798      	blx	r3
	colorBLACK();
  4029b6:	4b09      	ldr	r3, [pc, #36]	; (4029dc <letraH+0x2c0>)
  4029b8:	4798      	blx	r3
	colorBLACK();
  4029ba:	4b08      	ldr	r3, [pc, #32]	; (4029dc <letraH+0x2c0>)
  4029bc:	4798      	blx	r3
	colorBLACK();
  4029be:	4b07      	ldr	r3, [pc, #28]	; (4029dc <letraH+0x2c0>)
  4029c0:	4798      	blx	r3
	colorBLACK();
  4029c2:	4b06      	ldr	r3, [pc, #24]	; (4029dc <letraH+0x2c0>)
  4029c4:	4798      	blx	r3
	colorBLACK();
  4029c6:	4b05      	ldr	r3, [pc, #20]	; (4029dc <letraH+0x2c0>)
  4029c8:	4798      	blx	r3
	colorBLACK();
  4029ca:	4b04      	ldr	r3, [pc, #16]	; (4029dc <letraH+0x2c0>)
  4029cc:	4798      	blx	r3
	colorBLACK();
  4029ce:	4b03      	ldr	r3, [pc, #12]	; (4029dc <letraH+0x2c0>)
  4029d0:	4798      	blx	r3
}
  4029d2:	bf00      	nop
  4029d4:	3708      	adds	r7, #8
  4029d6:	46bd      	mov	sp, r7
  4029d8:	bd80      	pop	{r7, pc}
  4029da:	bf00      	nop
  4029dc:	004013bd 	.word	0x004013bd
  4029e0:	00401411 	.word	0x00401411

004029e4 <letraI>:


void letraI(int8_t red, int8_t green, int8_t blue)
{
  4029e4:	b580      	push	{r7, lr}
  4029e6:	b082      	sub	sp, #8
  4029e8:	af00      	add	r7, sp, #0
  4029ea:	4603      	mov	r3, r0
  4029ec:	71fb      	strb	r3, [r7, #7]
  4029ee:	460b      	mov	r3, r1
  4029f0:	71bb      	strb	r3, [r7, #6]
  4029f2:	4613      	mov	r3, r2
  4029f4:	717b      	strb	r3, [r7, #5]
	//I
	colorBLACK();
  4029f6:	4b81      	ldr	r3, [pc, #516]	; (402bfc <letraI+0x218>)
  4029f8:	4798      	blx	r3
	colorBLACK();
  4029fa:	4b80      	ldr	r3, [pc, #512]	; (402bfc <letraI+0x218>)
  4029fc:	4798      	blx	r3
	colorBLACK();
  4029fe:	4b7f      	ldr	r3, [pc, #508]	; (402bfc <letraI+0x218>)
  402a00:	4798      	blx	r3
	colorBLACK();
  402a02:	4b7e      	ldr	r3, [pc, #504]	; (402bfc <letraI+0x218>)
  402a04:	4798      	blx	r3
	colorBLACK();
  402a06:	4b7d      	ldr	r3, [pc, #500]	; (402bfc <letraI+0x218>)
  402a08:	4798      	blx	r3
	colorBLACK();
  402a0a:	4b7c      	ldr	r3, [pc, #496]	; (402bfc <letraI+0x218>)
  402a0c:	4798      	blx	r3
	colorBLACK();
  402a0e:	4b7b      	ldr	r3, [pc, #492]	; (402bfc <letraI+0x218>)
  402a10:	4798      	blx	r3
	colorBLACK();
  402a12:	4b7a      	ldr	r3, [pc, #488]	; (402bfc <letraI+0x218>)
  402a14:	4798      	blx	r3
	
	colorBLACK();
  402a16:	4b79      	ldr	r3, [pc, #484]	; (402bfc <letraI+0x218>)
  402a18:	4798      	blx	r3
	colorBLACK();
  402a1a:	4b78      	ldr	r3, [pc, #480]	; (402bfc <letraI+0x218>)
  402a1c:	4798      	blx	r3
	colorBLACK();
  402a1e:	4b77      	ldr	r3, [pc, #476]	; (402bfc <letraI+0x218>)
  402a20:	4798      	blx	r3
	colorBLACK();
  402a22:	4b76      	ldr	r3, [pc, #472]	; (402bfc <letraI+0x218>)
  402a24:	4798      	blx	r3
	colorBLACK();
  402a26:	4b75      	ldr	r3, [pc, #468]	; (402bfc <letraI+0x218>)
  402a28:	4798      	blx	r3
	colorBLACK();
  402a2a:	4b74      	ldr	r3, [pc, #464]	; (402bfc <letraI+0x218>)
  402a2c:	4798      	blx	r3
	colorBLACK();
  402a2e:	4b73      	ldr	r3, [pc, #460]	; (402bfc <letraI+0x218>)
  402a30:	4798      	blx	r3
	colorBLACK();
  402a32:	4b72      	ldr	r3, [pc, #456]	; (402bfc <letraI+0x218>)
  402a34:	4798      	blx	r3
	
	colorBLACK();
  402a36:	4b71      	ldr	r3, [pc, #452]	; (402bfc <letraI+0x218>)
  402a38:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402a3a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402a3e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402a46:	4618      	mov	r0, r3
  402a48:	4b6d      	ldr	r3, [pc, #436]	; (402c00 <letraI+0x21c>)
  402a4a:	4798      	blx	r3
	colorBLACK();
  402a4c:	4b6b      	ldr	r3, [pc, #428]	; (402bfc <letraI+0x218>)
  402a4e:	4798      	blx	r3
	colorBLACK();
  402a50:	4b6a      	ldr	r3, [pc, #424]	; (402bfc <letraI+0x218>)
  402a52:	4798      	blx	r3
	colorBLACK();
  402a54:	4b69      	ldr	r3, [pc, #420]	; (402bfc <letraI+0x218>)
  402a56:	4798      	blx	r3
	colorBLACK();
  402a58:	4b68      	ldr	r3, [pc, #416]	; (402bfc <letraI+0x218>)
  402a5a:	4798      	blx	r3
	colorBLACK();
  402a5c:	4b67      	ldr	r3, [pc, #412]	; (402bfc <letraI+0x218>)
  402a5e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402a60:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402a64:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402a6c:	4618      	mov	r0, r3
  402a6e:	4b64      	ldr	r3, [pc, #400]	; (402c00 <letraI+0x21c>)
  402a70:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  402a72:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402a76:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402a7e:	4618      	mov	r0, r3
  402a80:	4b5f      	ldr	r3, [pc, #380]	; (402c00 <letraI+0x21c>)
  402a82:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402a84:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402a88:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402a90:	4618      	mov	r0, r3
  402a92:	4b5b      	ldr	r3, [pc, #364]	; (402c00 <letraI+0x21c>)
  402a94:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402a96:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402a9a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402aa2:	4618      	mov	r0, r3
  402aa4:	4b56      	ldr	r3, [pc, #344]	; (402c00 <letraI+0x21c>)
  402aa6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402aa8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402aac:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402ab4:	4618      	mov	r0, r3
  402ab6:	4b52      	ldr	r3, [pc, #328]	; (402c00 <letraI+0x21c>)
  402ab8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402aba:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402abe:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402ac6:	4618      	mov	r0, r3
  402ac8:	4b4d      	ldr	r3, [pc, #308]	; (402c00 <letraI+0x21c>)
  402aca:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402acc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402ad0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402ad8:	4618      	mov	r0, r3
  402ada:	4b49      	ldr	r3, [pc, #292]	; (402c00 <letraI+0x21c>)
  402adc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402ade:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402ae2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402aea:	4618      	mov	r0, r3
  402aec:	4b44      	ldr	r3, [pc, #272]	; (402c00 <letraI+0x21c>)
  402aee:	4798      	blx	r3
	colorBLACK();
  402af0:	4b42      	ldr	r3, [pc, #264]	; (402bfc <letraI+0x218>)
  402af2:	4798      	blx	r3
	
	colorBLACK();
  402af4:	4b41      	ldr	r3, [pc, #260]	; (402bfc <letraI+0x218>)
  402af6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402af8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402afc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402b04:	4618      	mov	r0, r3
  402b06:	4b3e      	ldr	r3, [pc, #248]	; (402c00 <letraI+0x21c>)
  402b08:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402b0a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402b0e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402b16:	4618      	mov	r0, r3
  402b18:	4b39      	ldr	r3, [pc, #228]	; (402c00 <letraI+0x21c>)
  402b1a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402b1c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402b20:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402b28:	4618      	mov	r0, r3
  402b2a:	4b35      	ldr	r3, [pc, #212]	; (402c00 <letraI+0x21c>)
  402b2c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402b2e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402b32:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402b3a:	4618      	mov	r0, r3
  402b3c:	4b30      	ldr	r3, [pc, #192]	; (402c00 <letraI+0x21c>)
  402b3e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402b40:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402b44:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402b4c:	4618      	mov	r0, r3
  402b4e:	4b2c      	ldr	r3, [pc, #176]	; (402c00 <letraI+0x21c>)
  402b50:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402b52:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402b56:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402b5e:	4618      	mov	r0, r3
  402b60:	4b27      	ldr	r3, [pc, #156]	; (402c00 <letraI+0x21c>)
  402b62:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402b64:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402b68:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402b70:	4618      	mov	r0, r3
  402b72:	4b23      	ldr	r3, [pc, #140]	; (402c00 <letraI+0x21c>)
  402b74:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  402b76:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402b7a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402b82:	4618      	mov	r0, r3
  402b84:	4b1e      	ldr	r3, [pc, #120]	; (402c00 <letraI+0x21c>)
  402b86:	4798      	blx	r3
	colorBLACK();
  402b88:	4b1c      	ldr	r3, [pc, #112]	; (402bfc <letraI+0x218>)
  402b8a:	4798      	blx	r3
	colorBLACK();
  402b8c:	4b1b      	ldr	r3, [pc, #108]	; (402bfc <letraI+0x218>)
  402b8e:	4798      	blx	r3
	colorBLACK();
  402b90:	4b1a      	ldr	r3, [pc, #104]	; (402bfc <letraI+0x218>)
  402b92:	4798      	blx	r3
	colorBLACK();
  402b94:	4b19      	ldr	r3, [pc, #100]	; (402bfc <letraI+0x218>)
  402b96:	4798      	blx	r3
	colorBLACK();
  402b98:	4b18      	ldr	r3, [pc, #96]	; (402bfc <letraI+0x218>)
  402b9a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402b9c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402ba0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402ba8:	4618      	mov	r0, r3
  402baa:	4b15      	ldr	r3, [pc, #84]	; (402c00 <letraI+0x21c>)
  402bac:	4798      	blx	r3
	colorBLACK();
  402bae:	4b13      	ldr	r3, [pc, #76]	; (402bfc <letraI+0x218>)
  402bb0:	4798      	blx	r3
	
	colorBLACK();
  402bb2:	4b12      	ldr	r3, [pc, #72]	; (402bfc <letraI+0x218>)
  402bb4:	4798      	blx	r3
	colorBLACK();
  402bb6:	4b11      	ldr	r3, [pc, #68]	; (402bfc <letraI+0x218>)
  402bb8:	4798      	blx	r3
	colorBLACK();
  402bba:	4b10      	ldr	r3, [pc, #64]	; (402bfc <letraI+0x218>)
  402bbc:	4798      	blx	r3
	colorBLACK();
  402bbe:	4b0f      	ldr	r3, [pc, #60]	; (402bfc <letraI+0x218>)
  402bc0:	4798      	blx	r3
	colorBLACK();
  402bc2:	4b0e      	ldr	r3, [pc, #56]	; (402bfc <letraI+0x218>)
  402bc4:	4798      	blx	r3
	colorBLACK();
  402bc6:	4b0d      	ldr	r3, [pc, #52]	; (402bfc <letraI+0x218>)
  402bc8:	4798      	blx	r3
	colorBLACK();
  402bca:	4b0c      	ldr	r3, [pc, #48]	; (402bfc <letraI+0x218>)
  402bcc:	4798      	blx	r3
	colorBLACK();
  402bce:	4b0b      	ldr	r3, [pc, #44]	; (402bfc <letraI+0x218>)
  402bd0:	4798      	blx	r3
	
	colorBLACK();
  402bd2:	4b0a      	ldr	r3, [pc, #40]	; (402bfc <letraI+0x218>)
  402bd4:	4798      	blx	r3
	colorBLACK();
  402bd6:	4b09      	ldr	r3, [pc, #36]	; (402bfc <letraI+0x218>)
  402bd8:	4798      	blx	r3
	colorBLACK();
  402bda:	4b08      	ldr	r3, [pc, #32]	; (402bfc <letraI+0x218>)
  402bdc:	4798      	blx	r3
	colorBLACK();
  402bde:	4b07      	ldr	r3, [pc, #28]	; (402bfc <letraI+0x218>)
  402be0:	4798      	blx	r3
	colorBLACK();
  402be2:	4b06      	ldr	r3, [pc, #24]	; (402bfc <letraI+0x218>)
  402be4:	4798      	blx	r3
	colorBLACK();
  402be6:	4b05      	ldr	r3, [pc, #20]	; (402bfc <letraI+0x218>)
  402be8:	4798      	blx	r3
	colorBLACK();
  402bea:	4b04      	ldr	r3, [pc, #16]	; (402bfc <letraI+0x218>)
  402bec:	4798      	blx	r3
	colorBLACK();
  402bee:	4b03      	ldr	r3, [pc, #12]	; (402bfc <letraI+0x218>)
  402bf0:	4798      	blx	r3
}
  402bf2:	bf00      	nop
  402bf4:	3708      	adds	r7, #8
  402bf6:	46bd      	mov	sp, r7
  402bf8:	bd80      	pop	{r7, pc}
  402bfa:	bf00      	nop
  402bfc:	004013bd 	.word	0x004013bd
  402c00:	00401411 	.word	0x00401411

00402c04 <letraJ>:



void letraJ(int8_t red, int8_t green, int8_t blue)
{
  402c04:	b580      	push	{r7, lr}
  402c06:	b082      	sub	sp, #8
  402c08:	af00      	add	r7, sp, #0
  402c0a:	4603      	mov	r3, r0
  402c0c:	71fb      	strb	r3, [r7, #7]
  402c0e:	460b      	mov	r3, r1
  402c10:	71bb      	strb	r3, [r7, #6]
  402c12:	4613      	mov	r3, r2
  402c14:	717b      	strb	r3, [r7, #5]
	//J
	colorBLACK();
  402c16:	4b8b      	ldr	r3, [pc, #556]	; (402e44 <letraJ+0x240>)
  402c18:	4798      	blx	r3
	colorBLACK();
  402c1a:	4b8a      	ldr	r3, [pc, #552]	; (402e44 <letraJ+0x240>)
  402c1c:	4798      	blx	r3
	colorBLACK();
  402c1e:	4b89      	ldr	r3, [pc, #548]	; (402e44 <letraJ+0x240>)
  402c20:	4798      	blx	r3
	colorBLACK();
  402c22:	4b88      	ldr	r3, [pc, #544]	; (402e44 <letraJ+0x240>)
  402c24:	4798      	blx	r3
	colorBLACK();
  402c26:	4b87      	ldr	r3, [pc, #540]	; (402e44 <letraJ+0x240>)
  402c28:	4798      	blx	r3
	colorBLACK();
  402c2a:	4b86      	ldr	r3, [pc, #536]	; (402e44 <letraJ+0x240>)
  402c2c:	4798      	blx	r3
	colorBLACK();
  402c2e:	4b85      	ldr	r3, [pc, #532]	; (402e44 <letraJ+0x240>)
  402c30:	4798      	blx	r3
	colorBLACK();
  402c32:	4b84      	ldr	r3, [pc, #528]	; (402e44 <letraJ+0x240>)
  402c34:	4798      	blx	r3
	
	colorBLACK();
  402c36:	4b83      	ldr	r3, [pc, #524]	; (402e44 <letraJ+0x240>)
  402c38:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402c3a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402c3e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402c46:	4618      	mov	r0, r3
  402c48:	4b7f      	ldr	r3, [pc, #508]	; (402e48 <letraJ+0x244>)
  402c4a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402c4c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402c50:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402c58:	4618      	mov	r0, r3
  402c5a:	4b7b      	ldr	r3, [pc, #492]	; (402e48 <letraJ+0x244>)
  402c5c:	4798      	blx	r3
	colorBLACK();
  402c5e:	4b79      	ldr	r3, [pc, #484]	; (402e44 <letraJ+0x240>)
  402c60:	4798      	blx	r3
	colorBLACK();
  402c62:	4b78      	ldr	r3, [pc, #480]	; (402e44 <letraJ+0x240>)
  402c64:	4798      	blx	r3
	colorBLACK();
  402c66:	4b77      	ldr	r3, [pc, #476]	; (402e44 <letraJ+0x240>)
  402c68:	4798      	blx	r3
	colorBLACK();
  402c6a:	4b76      	ldr	r3, [pc, #472]	; (402e44 <letraJ+0x240>)
  402c6c:	4798      	blx	r3
	colorBLACK();
  402c6e:	4b75      	ldr	r3, [pc, #468]	; (402e44 <letraJ+0x240>)
  402c70:	4798      	blx	r3
	
	colorBLACK();
  402c72:	4b74      	ldr	r3, [pc, #464]	; (402e44 <letraJ+0x240>)
  402c74:	4798      	blx	r3
	colorBLACK();
  402c76:	4b73      	ldr	r3, [pc, #460]	; (402e44 <letraJ+0x240>)
  402c78:	4798      	blx	r3
	colorBLACK();
  402c7a:	4b72      	ldr	r3, [pc, #456]	; (402e44 <letraJ+0x240>)
  402c7c:	4798      	blx	r3
	colorBLACK();
  402c7e:	4b71      	ldr	r3, [pc, #452]	; (402e44 <letraJ+0x240>)
  402c80:	4798      	blx	r3
	colorBLACK();
  402c82:	4b70      	ldr	r3, [pc, #448]	; (402e44 <letraJ+0x240>)
  402c84:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402c86:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402c8a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402c92:	4618      	mov	r0, r3
  402c94:	4b6c      	ldr	r3, [pc, #432]	; (402e48 <letraJ+0x244>)
  402c96:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402c98:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402c9c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402ca4:	4618      	mov	r0, r3
  402ca6:	4b68      	ldr	r3, [pc, #416]	; (402e48 <letraJ+0x244>)
  402ca8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402caa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402cae:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402cb6:	4618      	mov	r0, r3
  402cb8:	4b63      	ldr	r3, [pc, #396]	; (402e48 <letraJ+0x244>)
  402cba:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  402cbc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402cc0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402cc8:	4618      	mov	r0, r3
  402cca:	4b5f      	ldr	r3, [pc, #380]	; (402e48 <letraJ+0x244>)
  402ccc:	4798      	blx	r3
	colorBLACK();
  402cce:	4b5d      	ldr	r3, [pc, #372]	; (402e44 <letraJ+0x240>)
  402cd0:	4798      	blx	r3
	colorBLACK();
  402cd2:	4b5c      	ldr	r3, [pc, #368]	; (402e44 <letraJ+0x240>)
  402cd4:	4798      	blx	r3
	colorBLACK();
  402cd6:	4b5b      	ldr	r3, [pc, #364]	; (402e44 <letraJ+0x240>)
  402cd8:	4798      	blx	r3
	colorBLACK();
  402cda:	4b5a      	ldr	r3, [pc, #360]	; (402e44 <letraJ+0x240>)
  402cdc:	4798      	blx	r3
	colorBLACK();
  402cde:	4b59      	ldr	r3, [pc, #356]	; (402e44 <letraJ+0x240>)
  402ce0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402ce2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402ce6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402cee:	4618      	mov	r0, r3
  402cf0:	4b55      	ldr	r3, [pc, #340]	; (402e48 <letraJ+0x244>)
  402cf2:	4798      	blx	r3
	colorBLACK();
  402cf4:	4b53      	ldr	r3, [pc, #332]	; (402e44 <letraJ+0x240>)
  402cf6:	4798      	blx	r3
	
	
	colorBLACK();
  402cf8:	4b52      	ldr	r3, [pc, #328]	; (402e44 <letraJ+0x240>)
  402cfa:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402cfc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402d00:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402d08:	4618      	mov	r0, r3
  402d0a:	4b4f      	ldr	r3, [pc, #316]	; (402e48 <letraJ+0x244>)
  402d0c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402d0e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402d12:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402d1a:	4618      	mov	r0, r3
  402d1c:	4b4a      	ldr	r3, [pc, #296]	; (402e48 <letraJ+0x244>)
  402d1e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402d20:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402d24:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402d2c:	4618      	mov	r0, r3
  402d2e:	4b46      	ldr	r3, [pc, #280]	; (402e48 <letraJ+0x244>)
  402d30:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402d32:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402d36:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402d3e:	4618      	mov	r0, r3
  402d40:	4b41      	ldr	r3, [pc, #260]	; (402e48 <letraJ+0x244>)
  402d42:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402d44:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402d48:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402d50:	4618      	mov	r0, r3
  402d52:	4b3d      	ldr	r3, [pc, #244]	; (402e48 <letraJ+0x244>)
  402d54:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402d56:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402d5a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402d62:	4618      	mov	r0, r3
  402d64:	4b38      	ldr	r3, [pc, #224]	; (402e48 <letraJ+0x244>)
  402d66:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402d68:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402d6c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402d74:	4618      	mov	r0, r3
  402d76:	4b34      	ldr	r3, [pc, #208]	; (402e48 <letraJ+0x244>)
  402d78:	4798      	blx	r3
	
	
	colorBLACK();
  402d7a:	4b32      	ldr	r3, [pc, #200]	; (402e44 <letraJ+0x240>)
  402d7c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402d7e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402d82:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402d8a:	4618      	mov	r0, r3
  402d8c:	4b2e      	ldr	r3, [pc, #184]	; (402e48 <letraJ+0x244>)
  402d8e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402d90:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402d94:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402d9c:	4618      	mov	r0, r3
  402d9e:	4b2a      	ldr	r3, [pc, #168]	; (402e48 <letraJ+0x244>)
  402da0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402da2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402da6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402dae:	4618      	mov	r0, r3
  402db0:	4b25      	ldr	r3, [pc, #148]	; (402e48 <letraJ+0x244>)
  402db2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402db4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402db8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402dc0:	4618      	mov	r0, r3
  402dc2:	4b21      	ldr	r3, [pc, #132]	; (402e48 <letraJ+0x244>)
  402dc4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402dc6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402dca:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402dd2:	4618      	mov	r0, r3
  402dd4:	4b1c      	ldr	r3, [pc, #112]	; (402e48 <letraJ+0x244>)
  402dd6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402dd8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402ddc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402de4:	4618      	mov	r0, r3
  402de6:	4b18      	ldr	r3, [pc, #96]	; (402e48 <letraJ+0x244>)
  402de8:	4798      	blx	r3
	colorBLACK();
  402dea:	4b16      	ldr	r3, [pc, #88]	; (402e44 <letraJ+0x240>)
  402dec:	4798      	blx	r3
	
	
	
	colorBLACK();
  402dee:	4b15      	ldr	r3, [pc, #84]	; (402e44 <letraJ+0x240>)
  402df0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402df2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402df6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402dfe:	4618      	mov	r0, r3
  402e00:	4b11      	ldr	r3, [pc, #68]	; (402e48 <letraJ+0x244>)
  402e02:	4798      	blx	r3
	colorBLACK();
  402e04:	4b0f      	ldr	r3, [pc, #60]	; (402e44 <letraJ+0x240>)
  402e06:	4798      	blx	r3
	colorBLACK();
  402e08:	4b0e      	ldr	r3, [pc, #56]	; (402e44 <letraJ+0x240>)
  402e0a:	4798      	blx	r3
	colorBLACK();
  402e0c:	4b0d      	ldr	r3, [pc, #52]	; (402e44 <letraJ+0x240>)
  402e0e:	4798      	blx	r3
	colorBLACK();
  402e10:	4b0c      	ldr	r3, [pc, #48]	; (402e44 <letraJ+0x240>)
  402e12:	4798      	blx	r3
	colorBLACK();
  402e14:	4b0b      	ldr	r3, [pc, #44]	; (402e44 <letraJ+0x240>)
  402e16:	4798      	blx	r3
	colorBLACK();
  402e18:	4b0a      	ldr	r3, [pc, #40]	; (402e44 <letraJ+0x240>)
  402e1a:	4798      	blx	r3
	
	colorBLACK();
  402e1c:	4b09      	ldr	r3, [pc, #36]	; (402e44 <letraJ+0x240>)
  402e1e:	4798      	blx	r3
	colorBLACK();
  402e20:	4b08      	ldr	r3, [pc, #32]	; (402e44 <letraJ+0x240>)
  402e22:	4798      	blx	r3
	colorBLACK();
  402e24:	4b07      	ldr	r3, [pc, #28]	; (402e44 <letraJ+0x240>)
  402e26:	4798      	blx	r3
	colorBLACK();
  402e28:	4b06      	ldr	r3, [pc, #24]	; (402e44 <letraJ+0x240>)
  402e2a:	4798      	blx	r3
	colorBLACK();
  402e2c:	4b05      	ldr	r3, [pc, #20]	; (402e44 <letraJ+0x240>)
  402e2e:	4798      	blx	r3
	colorBLACK();
  402e30:	4b04      	ldr	r3, [pc, #16]	; (402e44 <letraJ+0x240>)
  402e32:	4798      	blx	r3
	colorBLACK();
  402e34:	4b03      	ldr	r3, [pc, #12]	; (402e44 <letraJ+0x240>)
  402e36:	4798      	blx	r3
	colorBLACK();
  402e38:	4b02      	ldr	r3, [pc, #8]	; (402e44 <letraJ+0x240>)
  402e3a:	4798      	blx	r3
}
  402e3c:	bf00      	nop
  402e3e:	3708      	adds	r7, #8
  402e40:	46bd      	mov	sp, r7
  402e42:	bd80      	pop	{r7, pc}
  402e44:	004013bd 	.word	0x004013bd
  402e48:	00401411 	.word	0x00401411

00402e4c <letraK>:



void letraK(int8_t red, int8_t green, int8_t blue)
{
  402e4c:	b580      	push	{r7, lr}
  402e4e:	b082      	sub	sp, #8
  402e50:	af00      	add	r7, sp, #0
  402e52:	4603      	mov	r3, r0
  402e54:	71fb      	strb	r3, [r7, #7]
  402e56:	460b      	mov	r3, r1
  402e58:	71bb      	strb	r3, [r7, #6]
  402e5a:	4613      	mov	r3, r2
  402e5c:	717b      	strb	r3, [r7, #5]
	//K
	colorBLACK();
  402e5e:	4ba0      	ldr	r3, [pc, #640]	; (4030e0 <letraK+0x294>)
  402e60:	4798      	blx	r3
	colorBLACK();
  402e62:	4b9f      	ldr	r3, [pc, #636]	; (4030e0 <letraK+0x294>)
  402e64:	4798      	blx	r3
	colorBLACK();
  402e66:	4b9e      	ldr	r3, [pc, #632]	; (4030e0 <letraK+0x294>)
  402e68:	4798      	blx	r3
	colorBLACK();
  402e6a:	4b9d      	ldr	r3, [pc, #628]	; (4030e0 <letraK+0x294>)
  402e6c:	4798      	blx	r3
	colorBLACK();
  402e6e:	4b9c      	ldr	r3, [pc, #624]	; (4030e0 <letraK+0x294>)
  402e70:	4798      	blx	r3
	colorBLACK();
  402e72:	4b9b      	ldr	r3, [pc, #620]	; (4030e0 <letraK+0x294>)
  402e74:	4798      	blx	r3
	colorBLACK();
  402e76:	4b9a      	ldr	r3, [pc, #616]	; (4030e0 <letraK+0x294>)
  402e78:	4798      	blx	r3
	colorBLACK();
  402e7a:	4b99      	ldr	r3, [pc, #612]	; (4030e0 <letraK+0x294>)
  402e7c:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  402e7e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402e82:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402e8a:	4618      	mov	r0, r3
  402e8c:	4b95      	ldr	r3, [pc, #596]	; (4030e4 <letraK+0x298>)
  402e8e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402e90:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402e94:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402e9c:	4618      	mov	r0, r3
  402e9e:	4b91      	ldr	r3, [pc, #580]	; (4030e4 <letraK+0x298>)
  402ea0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402ea2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402ea6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402eae:	4618      	mov	r0, r3
  402eb0:	4b8c      	ldr	r3, [pc, #560]	; (4030e4 <letraK+0x298>)
  402eb2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402eb4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402eb8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402ec0:	4618      	mov	r0, r3
  402ec2:	4b88      	ldr	r3, [pc, #544]	; (4030e4 <letraK+0x298>)
  402ec4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402ec6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402eca:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402ed2:	4618      	mov	r0, r3
  402ed4:	4b83      	ldr	r3, [pc, #524]	; (4030e4 <letraK+0x298>)
  402ed6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402ed8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402edc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402ee4:	4618      	mov	r0, r3
  402ee6:	4b7f      	ldr	r3, [pc, #508]	; (4030e4 <letraK+0x298>)
  402ee8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402eea:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402eee:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402ef6:	4618      	mov	r0, r3
  402ef8:	4b7a      	ldr	r3, [pc, #488]	; (4030e4 <letraK+0x298>)
  402efa:	4798      	blx	r3
	colorBLACK();
  402efc:	4b78      	ldr	r3, [pc, #480]	; (4030e0 <letraK+0x294>)
  402efe:	4798      	blx	r3
	
	colorBLACK();
  402f00:	4b77      	ldr	r3, [pc, #476]	; (4030e0 <letraK+0x294>)
  402f02:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402f04:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402f08:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402f10:	4618      	mov	r0, r3
  402f12:	4b74      	ldr	r3, [pc, #464]	; (4030e4 <letraK+0x298>)
  402f14:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402f16:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402f1a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402f22:	4618      	mov	r0, r3
  402f24:	4b6f      	ldr	r3, [pc, #444]	; (4030e4 <letraK+0x298>)
  402f26:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402f28:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402f2c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402f34:	4618      	mov	r0, r3
  402f36:	4b6b      	ldr	r3, [pc, #428]	; (4030e4 <letraK+0x298>)
  402f38:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402f3a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402f3e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402f46:	4618      	mov	r0, r3
  402f48:	4b66      	ldr	r3, [pc, #408]	; (4030e4 <letraK+0x298>)
  402f4a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402f4c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402f50:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402f58:	4618      	mov	r0, r3
  402f5a:	4b62      	ldr	r3, [pc, #392]	; (4030e4 <letraK+0x298>)
  402f5c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402f5e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402f62:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402f6a:	4618      	mov	r0, r3
  402f6c:	4b5d      	ldr	r3, [pc, #372]	; (4030e4 <letraK+0x298>)
  402f6e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402f70:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402f74:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402f7c:	4618      	mov	r0, r3
  402f7e:	4b59      	ldr	r3, [pc, #356]	; (4030e4 <letraK+0x298>)
  402f80:	4798      	blx	r3
	
	colorBLACK();
  402f82:	4b57      	ldr	r3, [pc, #348]	; (4030e0 <letraK+0x294>)
  402f84:	4798      	blx	r3
	colorBLACK();
  402f86:	4b56      	ldr	r3, [pc, #344]	; (4030e0 <letraK+0x294>)
  402f88:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402f8a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402f8e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402f96:	4618      	mov	r0, r3
  402f98:	4b52      	ldr	r3, [pc, #328]	; (4030e4 <letraK+0x298>)
  402f9a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402f9c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402fa0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402fa8:	4618      	mov	r0, r3
  402faa:	4b4e      	ldr	r3, [pc, #312]	; (4030e4 <letraK+0x298>)
  402fac:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402fae:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402fb2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402fba:	4618      	mov	r0, r3
  402fbc:	4b49      	ldr	r3, [pc, #292]	; (4030e4 <letraK+0x298>)
  402fbe:	4798      	blx	r3
	colorBLACK();
  402fc0:	4b47      	ldr	r3, [pc, #284]	; (4030e0 <letraK+0x294>)
  402fc2:	4798      	blx	r3
	colorBLACK();
  402fc4:	4b46      	ldr	r3, [pc, #280]	; (4030e0 <letraK+0x294>)
  402fc6:	4798      	blx	r3
	colorBLACK();
  402fc8:	4b45      	ldr	r3, [pc, #276]	; (4030e0 <letraK+0x294>)
  402fca:	4798      	blx	r3
	
	
	colorBLACK();
  402fcc:	4b44      	ldr	r3, [pc, #272]	; (4030e0 <letraK+0x294>)
  402fce:	4798      	blx	r3
	colorBLACK();
  402fd0:	4b43      	ldr	r3, [pc, #268]	; (4030e0 <letraK+0x294>)
  402fd2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402fd4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402fd8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402fe0:	4618      	mov	r0, r3
  402fe2:	4b40      	ldr	r3, [pc, #256]	; (4030e4 <letraK+0x298>)
  402fe4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402fe6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  402fea:	f997 1006 	ldrsb.w	r1, [r7, #6]
  402fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402ff2:	4618      	mov	r0, r3
  402ff4:	4b3b      	ldr	r3, [pc, #236]	; (4030e4 <letraK+0x298>)
  402ff6:	4798      	blx	r3
	colorBLACK();
  402ff8:	4b39      	ldr	r3, [pc, #228]	; (4030e0 <letraK+0x294>)
  402ffa:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  402ffc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403000:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403004:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403008:	4618      	mov	r0, r3
  40300a:	4b36      	ldr	r3, [pc, #216]	; (4030e4 <letraK+0x298>)
  40300c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40300e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403012:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403016:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40301a:	4618      	mov	r0, r3
  40301c:	4b31      	ldr	r3, [pc, #196]	; (4030e4 <letraK+0x298>)
  40301e:	4798      	blx	r3
	colorBLACK();
  403020:	4b2f      	ldr	r3, [pc, #188]	; (4030e0 <letraK+0x294>)
  403022:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  403024:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403028:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403030:	4618      	mov	r0, r3
  403032:	4b2c      	ldr	r3, [pc, #176]	; (4030e4 <letraK+0x298>)
  403034:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403036:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40303a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403042:	4618      	mov	r0, r3
  403044:	4b27      	ldr	r3, [pc, #156]	; (4030e4 <letraK+0x298>)
  403046:	4798      	blx	r3
	colorBLACK();
  403048:	4b25      	ldr	r3, [pc, #148]	; (4030e0 <letraK+0x294>)
  40304a:	4798      	blx	r3
	colorBLACK();
  40304c:	4b24      	ldr	r3, [pc, #144]	; (4030e0 <letraK+0x294>)
  40304e:	4798      	blx	r3
	colorBLACK();
  403050:	4b23      	ldr	r3, [pc, #140]	; (4030e0 <letraK+0x294>)
  403052:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403054:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403058:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40305c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403060:	4618      	mov	r0, r3
  403062:	4b20      	ldr	r3, [pc, #128]	; (4030e4 <letraK+0x298>)
  403064:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403066:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40306a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403072:	4618      	mov	r0, r3
  403074:	4b1b      	ldr	r3, [pc, #108]	; (4030e4 <letraK+0x298>)
  403076:	4798      	blx	r3
	colorBLACK();
  403078:	4b19      	ldr	r3, [pc, #100]	; (4030e0 <letraK+0x294>)
  40307a:	4798      	blx	r3
	
	
	
	colorBLACK();
  40307c:	4b18      	ldr	r3, [pc, #96]	; (4030e0 <letraK+0x294>)
  40307e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403080:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403084:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403088:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40308c:	4618      	mov	r0, r3
  40308e:	4b15      	ldr	r3, [pc, #84]	; (4030e4 <letraK+0x298>)
  403090:	4798      	blx	r3
	colorBLACK();
  403092:	4b13      	ldr	r3, [pc, #76]	; (4030e0 <letraK+0x294>)
  403094:	4798      	blx	r3
	colorBLACK();
  403096:	4b12      	ldr	r3, [pc, #72]	; (4030e0 <letraK+0x294>)
  403098:	4798      	blx	r3
	colorBLACK();
  40309a:	4b11      	ldr	r3, [pc, #68]	; (4030e0 <letraK+0x294>)
  40309c:	4798      	blx	r3
	colorBLACK();
  40309e:	4b10      	ldr	r3, [pc, #64]	; (4030e0 <letraK+0x294>)
  4030a0:	4798      	blx	r3
	colorBLACK();
  4030a2:	4b0f      	ldr	r3, [pc, #60]	; (4030e0 <letraK+0x294>)
  4030a4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4030a6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4030aa:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4030b2:	4618      	mov	r0, r3
  4030b4:	4b0b      	ldr	r3, [pc, #44]	; (4030e4 <letraK+0x298>)
  4030b6:	4798      	blx	r3
	
	colorBLACK();
  4030b8:	4b09      	ldr	r3, [pc, #36]	; (4030e0 <letraK+0x294>)
  4030ba:	4798      	blx	r3
	colorBLACK();
  4030bc:	4b08      	ldr	r3, [pc, #32]	; (4030e0 <letraK+0x294>)
  4030be:	4798      	blx	r3
	colorBLACK();
  4030c0:	4b07      	ldr	r3, [pc, #28]	; (4030e0 <letraK+0x294>)
  4030c2:	4798      	blx	r3
	colorBLACK();
  4030c4:	4b06      	ldr	r3, [pc, #24]	; (4030e0 <letraK+0x294>)
  4030c6:	4798      	blx	r3
	colorBLACK();
  4030c8:	4b05      	ldr	r3, [pc, #20]	; (4030e0 <letraK+0x294>)
  4030ca:	4798      	blx	r3
	colorBLACK();
  4030cc:	4b04      	ldr	r3, [pc, #16]	; (4030e0 <letraK+0x294>)
  4030ce:	4798      	blx	r3
	colorBLACK();
  4030d0:	4b03      	ldr	r3, [pc, #12]	; (4030e0 <letraK+0x294>)
  4030d2:	4798      	blx	r3
	colorBLACK();
  4030d4:	4b02      	ldr	r3, [pc, #8]	; (4030e0 <letraK+0x294>)
  4030d6:	4798      	blx	r3
}
  4030d8:	bf00      	nop
  4030da:	3708      	adds	r7, #8
  4030dc:	46bd      	mov	sp, r7
  4030de:	bd80      	pop	{r7, pc}
  4030e0:	004013bd 	.word	0x004013bd
  4030e4:	00401411 	.word	0x00401411

004030e8 <letraL>:


void letraL(int8_t red, int8_t green, int8_t blue)
{
  4030e8:	b580      	push	{r7, lr}
  4030ea:	b082      	sub	sp, #8
  4030ec:	af00      	add	r7, sp, #0
  4030ee:	4603      	mov	r3, r0
  4030f0:	71fb      	strb	r3, [r7, #7]
  4030f2:	460b      	mov	r3, r1
  4030f4:	71bb      	strb	r3, [r7, #6]
  4030f6:	4613      	mov	r3, r2
  4030f8:	717b      	strb	r3, [r7, #5]
	//L
	colorBLACK();
  4030fa:	4b81      	ldr	r3, [pc, #516]	; (403300 <letraL+0x218>)
  4030fc:	4798      	blx	r3
	colorBLACK();
  4030fe:	4b80      	ldr	r3, [pc, #512]	; (403300 <letraL+0x218>)
  403100:	4798      	blx	r3
	colorBLACK();
  403102:	4b7f      	ldr	r3, [pc, #508]	; (403300 <letraL+0x218>)
  403104:	4798      	blx	r3
	colorBLACK();
  403106:	4b7e      	ldr	r3, [pc, #504]	; (403300 <letraL+0x218>)
  403108:	4798      	blx	r3
	colorBLACK();
  40310a:	4b7d      	ldr	r3, [pc, #500]	; (403300 <letraL+0x218>)
  40310c:	4798      	blx	r3
	colorBLACK();
  40310e:	4b7c      	ldr	r3, [pc, #496]	; (403300 <letraL+0x218>)
  403110:	4798      	blx	r3
	colorBLACK();
  403112:	4b7b      	ldr	r3, [pc, #492]	; (403300 <letraL+0x218>)
  403114:	4798      	blx	r3
	colorBLACK();
  403116:	4b7a      	ldr	r3, [pc, #488]	; (403300 <letraL+0x218>)
  403118:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  40311a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40311e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403122:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403126:	4618      	mov	r0, r3
  403128:	4b76      	ldr	r3, [pc, #472]	; (403304 <letraL+0x21c>)
  40312a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40312c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403130:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403134:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403138:	4618      	mov	r0, r3
  40313a:	4b72      	ldr	r3, [pc, #456]	; (403304 <letraL+0x21c>)
  40313c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40313e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403142:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403146:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40314a:	4618      	mov	r0, r3
  40314c:	4b6d      	ldr	r3, [pc, #436]	; (403304 <letraL+0x21c>)
  40314e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403150:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403154:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403158:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40315c:	4618      	mov	r0, r3
  40315e:	4b69      	ldr	r3, [pc, #420]	; (403304 <letraL+0x21c>)
  403160:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403162:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403166:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40316e:	4618      	mov	r0, r3
  403170:	4b64      	ldr	r3, [pc, #400]	; (403304 <letraL+0x21c>)
  403172:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403174:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403178:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403180:	4618      	mov	r0, r3
  403182:	4b60      	ldr	r3, [pc, #384]	; (403304 <letraL+0x21c>)
  403184:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403186:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40318a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403192:	4618      	mov	r0, r3
  403194:	4b5b      	ldr	r3, [pc, #364]	; (403304 <letraL+0x21c>)
  403196:	4798      	blx	r3
	colorBLACK();
  403198:	4b59      	ldr	r3, [pc, #356]	; (403300 <letraL+0x218>)
  40319a:	4798      	blx	r3
	
	colorBLACK();
  40319c:	4b58      	ldr	r3, [pc, #352]	; (403300 <letraL+0x218>)
  40319e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4031a0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4031a4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4031ac:	4618      	mov	r0, r3
  4031ae:	4b55      	ldr	r3, [pc, #340]	; (403304 <letraL+0x21c>)
  4031b0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4031b2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4031b6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4031be:	4618      	mov	r0, r3
  4031c0:	4b50      	ldr	r3, [pc, #320]	; (403304 <letraL+0x21c>)
  4031c2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4031c4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4031c8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4031cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4031d0:	4618      	mov	r0, r3
  4031d2:	4b4c      	ldr	r3, [pc, #304]	; (403304 <letraL+0x21c>)
  4031d4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4031d6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4031da:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4031e2:	4618      	mov	r0, r3
  4031e4:	4b47      	ldr	r3, [pc, #284]	; (403304 <letraL+0x21c>)
  4031e6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4031e8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4031ec:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4031f4:	4618      	mov	r0, r3
  4031f6:	4b43      	ldr	r3, [pc, #268]	; (403304 <letraL+0x21c>)
  4031f8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4031fa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4031fe:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403202:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403206:	4618      	mov	r0, r3
  403208:	4b3e      	ldr	r3, [pc, #248]	; (403304 <letraL+0x21c>)
  40320a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40320c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403210:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403214:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403218:	4618      	mov	r0, r3
  40321a:	4b3a      	ldr	r3, [pc, #232]	; (403304 <letraL+0x21c>)
  40321c:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  40321e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403222:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403226:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40322a:	4618      	mov	r0, r3
  40322c:	4b35      	ldr	r3, [pc, #212]	; (403304 <letraL+0x21c>)
  40322e:	4798      	blx	r3
	colorBLACK();
  403230:	4b33      	ldr	r3, [pc, #204]	; (403300 <letraL+0x218>)
  403232:	4798      	blx	r3
	colorBLACK();
  403234:	4b32      	ldr	r3, [pc, #200]	; (403300 <letraL+0x218>)
  403236:	4798      	blx	r3
	colorBLACK();
  403238:	4b31      	ldr	r3, [pc, #196]	; (403300 <letraL+0x218>)
  40323a:	4798      	blx	r3
	colorBLACK();
  40323c:	4b30      	ldr	r3, [pc, #192]	; (403300 <letraL+0x218>)
  40323e:	4798      	blx	r3
	colorBLACK();
  403240:	4b2f      	ldr	r3, [pc, #188]	; (403300 <letraL+0x218>)
  403242:	4798      	blx	r3
	colorBLACK();
  403244:	4b2e      	ldr	r3, [pc, #184]	; (403300 <letraL+0x218>)
  403246:	4798      	blx	r3
	colorBLACK();
  403248:	4b2d      	ldr	r3, [pc, #180]	; (403300 <letraL+0x218>)
  40324a:	4798      	blx	r3
	
	
	
	colorBLACK();
  40324c:	4b2c      	ldr	r3, [pc, #176]	; (403300 <letraL+0x218>)
  40324e:	4798      	blx	r3
	colorBLACK();
  403250:	4b2b      	ldr	r3, [pc, #172]	; (403300 <letraL+0x218>)
  403252:	4798      	blx	r3
	colorBLACK();
  403254:	4b2a      	ldr	r3, [pc, #168]	; (403300 <letraL+0x218>)
  403256:	4798      	blx	r3
	colorBLACK();
  403258:	4b29      	ldr	r3, [pc, #164]	; (403300 <letraL+0x218>)
  40325a:	4798      	blx	r3
	colorBLACK();
  40325c:	4b28      	ldr	r3, [pc, #160]	; (403300 <letraL+0x218>)
  40325e:	4798      	blx	r3
	colorBLACK();
  403260:	4b27      	ldr	r3, [pc, #156]	; (403300 <letraL+0x218>)
  403262:	4798      	blx	r3
	colorBLACK();
  403264:	4b26      	ldr	r3, [pc, #152]	; (403300 <letraL+0x218>)
  403266:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403268:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40326c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403270:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403274:	4618      	mov	r0, r3
  403276:	4b23      	ldr	r3, [pc, #140]	; (403304 <letraL+0x21c>)
  403278:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  40327a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40327e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403282:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403286:	4618      	mov	r0, r3
  403288:	4b1e      	ldr	r3, [pc, #120]	; (403304 <letraL+0x21c>)
  40328a:	4798      	blx	r3
	colorBLACK();
  40328c:	4b1c      	ldr	r3, [pc, #112]	; (403300 <letraL+0x218>)
  40328e:	4798      	blx	r3
	colorBLACK();
  403290:	4b1b      	ldr	r3, [pc, #108]	; (403300 <letraL+0x218>)
  403292:	4798      	blx	r3
	colorBLACK();
  403294:	4b1a      	ldr	r3, [pc, #104]	; (403300 <letraL+0x218>)
  403296:	4798      	blx	r3
	colorBLACK();
  403298:	4b19      	ldr	r3, [pc, #100]	; (403300 <letraL+0x218>)
  40329a:	4798      	blx	r3
	colorBLACK();
  40329c:	4b18      	ldr	r3, [pc, #96]	; (403300 <letraL+0x218>)
  40329e:	4798      	blx	r3
	colorBLACK();
  4032a0:	4b17      	ldr	r3, [pc, #92]	; (403300 <letraL+0x218>)
  4032a2:	4798      	blx	r3
	colorBLACK();
  4032a4:	4b16      	ldr	r3, [pc, #88]	; (403300 <letraL+0x218>)
  4032a6:	4798      	blx	r3
	
	
	
	colorBLACK();
  4032a8:	4b15      	ldr	r3, [pc, #84]	; (403300 <letraL+0x218>)
  4032aa:	4798      	blx	r3
	colorBLACK();
  4032ac:	4b14      	ldr	r3, [pc, #80]	; (403300 <letraL+0x218>)
  4032ae:	4798      	blx	r3
	colorBLACK();
  4032b0:	4b13      	ldr	r3, [pc, #76]	; (403300 <letraL+0x218>)
  4032b2:	4798      	blx	r3
	colorBLACK();
  4032b4:	4b12      	ldr	r3, [pc, #72]	; (403300 <letraL+0x218>)
  4032b6:	4798      	blx	r3
	colorBLACK();
  4032b8:	4b11      	ldr	r3, [pc, #68]	; (403300 <letraL+0x218>)
  4032ba:	4798      	blx	r3
	colorBLACK();
  4032bc:	4b10      	ldr	r3, [pc, #64]	; (403300 <letraL+0x218>)
  4032be:	4798      	blx	r3
	colorBLACK();
  4032c0:	4b0f      	ldr	r3, [pc, #60]	; (403300 <letraL+0x218>)
  4032c2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4032c4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4032c8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4032d0:	4618      	mov	r0, r3
  4032d2:	4b0c      	ldr	r3, [pc, #48]	; (403304 <letraL+0x21c>)
  4032d4:	4798      	blx	r3
	
	colorBLACK();
  4032d6:	4b0a      	ldr	r3, [pc, #40]	; (403300 <letraL+0x218>)
  4032d8:	4798      	blx	r3
	colorBLACK();
  4032da:	4b09      	ldr	r3, [pc, #36]	; (403300 <letraL+0x218>)
  4032dc:	4798      	blx	r3
	colorBLACK();
  4032de:	4b08      	ldr	r3, [pc, #32]	; (403300 <letraL+0x218>)
  4032e0:	4798      	blx	r3
	colorBLACK();
  4032e2:	4b07      	ldr	r3, [pc, #28]	; (403300 <letraL+0x218>)
  4032e4:	4798      	blx	r3
	colorBLACK();
  4032e6:	4b06      	ldr	r3, [pc, #24]	; (403300 <letraL+0x218>)
  4032e8:	4798      	blx	r3
	colorBLACK();
  4032ea:	4b05      	ldr	r3, [pc, #20]	; (403300 <letraL+0x218>)
  4032ec:	4798      	blx	r3
	colorBLACK();
  4032ee:	4b04      	ldr	r3, [pc, #16]	; (403300 <letraL+0x218>)
  4032f0:	4798      	blx	r3
	colorBLACK();
  4032f2:	4b03      	ldr	r3, [pc, #12]	; (403300 <letraL+0x218>)
  4032f4:	4798      	blx	r3
}
  4032f6:	bf00      	nop
  4032f8:	3708      	adds	r7, #8
  4032fa:	46bd      	mov	sp, r7
  4032fc:	bd80      	pop	{r7, pc}
  4032fe:	bf00      	nop
  403300:	004013bd 	.word	0x004013bd
  403304:	00401411 	.word	0x00401411

00403308 <letraM>:

void letraM(int8_t red, int8_t green, int8_t blue){
  403308:	b580      	push	{r7, lr}
  40330a:	b082      	sub	sp, #8
  40330c:	af00      	add	r7, sp, #0
  40330e:	4603      	mov	r3, r0
  403310:	71fb      	strb	r3, [r7, #7]
  403312:	460b      	mov	r3, r1
  403314:	71bb      	strb	r3, [r7, #6]
  403316:	4613      	mov	r3, r2
  403318:	717b      	strb	r3, [r7, #5]
	//M
	
	
	colorBLACK();
  40331a:	4bb9      	ldr	r3, [pc, #740]	; (403600 <letraM+0x2f8>)
  40331c:	4798      	blx	r3
	colorBLACK();
  40331e:	4bb8      	ldr	r3, [pc, #736]	; (403600 <letraM+0x2f8>)
  403320:	4798      	blx	r3
	colorBLACK();
  403322:	4bb7      	ldr	r3, [pc, #732]	; (403600 <letraM+0x2f8>)
  403324:	4798      	blx	r3
	colorBLACK();
  403326:	4bb6      	ldr	r3, [pc, #728]	; (403600 <letraM+0x2f8>)
  403328:	4798      	blx	r3
	colorBLACK();
  40332a:	4bb5      	ldr	r3, [pc, #724]	; (403600 <letraM+0x2f8>)
  40332c:	4798      	blx	r3
	colorBLACK();
  40332e:	4bb4      	ldr	r3, [pc, #720]	; (403600 <letraM+0x2f8>)
  403330:	4798      	blx	r3
	colorBLACK();
  403332:	4bb3      	ldr	r3, [pc, #716]	; (403600 <letraM+0x2f8>)
  403334:	4798      	blx	r3
	colorBLACK();
  403336:	4bb2      	ldr	r3, [pc, #712]	; (403600 <letraM+0x2f8>)
  403338:	4798      	blx	r3
	
	
	
	colorDEFINE(red,green,blue);
  40333a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40333e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403342:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403346:	4618      	mov	r0, r3
  403348:	4bae      	ldr	r3, [pc, #696]	; (403604 <letraM+0x2fc>)
  40334a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40334c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403350:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403354:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403358:	4618      	mov	r0, r3
  40335a:	4baa      	ldr	r3, [pc, #680]	; (403604 <letraM+0x2fc>)
  40335c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40335e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403362:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403366:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40336a:	4618      	mov	r0, r3
  40336c:	4ba5      	ldr	r3, [pc, #660]	; (403604 <letraM+0x2fc>)
  40336e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403370:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403374:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403378:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40337c:	4618      	mov	r0, r3
  40337e:	4ba1      	ldr	r3, [pc, #644]	; (403604 <letraM+0x2fc>)
  403380:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403382:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403386:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40338e:	4618      	mov	r0, r3
  403390:	4b9c      	ldr	r3, [pc, #624]	; (403604 <letraM+0x2fc>)
  403392:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403394:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403398:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40339c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4033a0:	4618      	mov	r0, r3
  4033a2:	4b98      	ldr	r3, [pc, #608]	; (403604 <letraM+0x2fc>)
  4033a4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4033a6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4033aa:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4033b2:	4618      	mov	r0, r3
  4033b4:	4b93      	ldr	r3, [pc, #588]	; (403604 <letraM+0x2fc>)
  4033b6:	4798      	blx	r3
	colorBLACK();
  4033b8:	4b91      	ldr	r3, [pc, #580]	; (403600 <letraM+0x2f8>)
  4033ba:	4798      	blx	r3
	
	colorBLACK();
  4033bc:	4b90      	ldr	r3, [pc, #576]	; (403600 <letraM+0x2f8>)
  4033be:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4033c0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4033c4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4033c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4033cc:	4618      	mov	r0, r3
  4033ce:	4b8d      	ldr	r3, [pc, #564]	; (403604 <letraM+0x2fc>)
  4033d0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4033d2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4033d6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4033de:	4618      	mov	r0, r3
  4033e0:	4b88      	ldr	r3, [pc, #544]	; (403604 <letraM+0x2fc>)
  4033e2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4033e4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4033e8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4033f0:	4618      	mov	r0, r3
  4033f2:	4b84      	ldr	r3, [pc, #528]	; (403604 <letraM+0x2fc>)
  4033f4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4033f6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4033fa:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403402:	4618      	mov	r0, r3
  403404:	4b7f      	ldr	r3, [pc, #508]	; (403604 <letraM+0x2fc>)
  403406:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403408:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40340c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403410:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403414:	4618      	mov	r0, r3
  403416:	4b7b      	ldr	r3, [pc, #492]	; (403604 <letraM+0x2fc>)
  403418:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40341a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40341e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403422:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403426:	4618      	mov	r0, r3
  403428:	4b76      	ldr	r3, [pc, #472]	; (403604 <letraM+0x2fc>)
  40342a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40342c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403430:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403434:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403438:	4618      	mov	r0, r3
  40343a:	4b72      	ldr	r3, [pc, #456]	; (403604 <letraM+0x2fc>)
  40343c:	4798      	blx	r3
	
	
	colorBLACK();
  40343e:	4b70      	ldr	r3, [pc, #448]	; (403600 <letraM+0x2f8>)
  403440:	4798      	blx	r3
	colorBLACK();
  403442:	4b6f      	ldr	r3, [pc, #444]	; (403600 <letraM+0x2f8>)
  403444:	4798      	blx	r3
	colorBLACK();
  403446:	4b6e      	ldr	r3, [pc, #440]	; (403600 <letraM+0x2f8>)
  403448:	4798      	blx	r3
	colorBLACK();
  40344a:	4b6d      	ldr	r3, [pc, #436]	; (403600 <letraM+0x2f8>)
  40344c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40344e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403452:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403456:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40345a:	4618      	mov	r0, r3
  40345c:	4b69      	ldr	r3, [pc, #420]	; (403604 <letraM+0x2fc>)
  40345e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403460:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403464:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403468:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40346c:	4618      	mov	r0, r3
  40346e:	4b65      	ldr	r3, [pc, #404]	; (403604 <letraM+0x2fc>)
  403470:	4798      	blx	r3
	colorBLACK();
  403472:	4b63      	ldr	r3, [pc, #396]	; (403600 <letraM+0x2f8>)
  403474:	4798      	blx	r3
	colorBLACK();
  403476:	4b62      	ldr	r3, [pc, #392]	; (403600 <letraM+0x2f8>)
  403478:	4798      	blx	r3
	
	colorBLACK();
  40347a:	4b61      	ldr	r3, [pc, #388]	; (403600 <letraM+0x2f8>)
  40347c:	4798      	blx	r3
	colorBLACK();
  40347e:	4b60      	ldr	r3, [pc, #384]	; (403600 <letraM+0x2f8>)
  403480:	4798      	blx	r3
	colorBLACK();
  403482:	4b5f      	ldr	r3, [pc, #380]	; (403600 <letraM+0x2f8>)
  403484:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403486:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40348a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403492:	4618      	mov	r0, r3
  403494:	4b5b      	ldr	r3, [pc, #364]	; (403604 <letraM+0x2fc>)
  403496:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403498:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40349c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4034a4:	4618      	mov	r0, r3
  4034a6:	4b57      	ldr	r3, [pc, #348]	; (403604 <letraM+0x2fc>)
  4034a8:	4798      	blx	r3
	colorBLACK();
  4034aa:	4b55      	ldr	r3, [pc, #340]	; (403600 <letraM+0x2f8>)
  4034ac:	4798      	blx	r3
	colorBLACK();
  4034ae:	4b54      	ldr	r3, [pc, #336]	; (403600 <letraM+0x2f8>)
  4034b0:	4798      	blx	r3
	colorBLACK();
  4034b2:	4b53      	ldr	r3, [pc, #332]	; (403600 <letraM+0x2f8>)
  4034b4:	4798      	blx	r3
	
	
	colorBLACK();
  4034b6:	4b52      	ldr	r3, [pc, #328]	; (403600 <letraM+0x2f8>)
  4034b8:	4798      	blx	r3
	colorBLACK();
  4034ba:	4b51      	ldr	r3, [pc, #324]	; (403600 <letraM+0x2f8>)
  4034bc:	4798      	blx	r3
	colorBLACK();
  4034be:	4b50      	ldr	r3, [pc, #320]	; (403600 <letraM+0x2f8>)
  4034c0:	4798      	blx	r3
	colorBLACK();
  4034c2:	4b4f      	ldr	r3, [pc, #316]	; (403600 <letraM+0x2f8>)
  4034c4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4034c6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4034ca:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4034d2:	4618      	mov	r0, r3
  4034d4:	4b4b      	ldr	r3, [pc, #300]	; (403604 <letraM+0x2fc>)
  4034d6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4034d8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4034dc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4034e4:	4618      	mov	r0, r3
  4034e6:	4b47      	ldr	r3, [pc, #284]	; (403604 <letraM+0x2fc>)
  4034e8:	4798      	blx	r3
	colorBLACK();
  4034ea:	4b45      	ldr	r3, [pc, #276]	; (403600 <letraM+0x2f8>)
  4034ec:	4798      	blx	r3
	colorBLACK();
  4034ee:	4b44      	ldr	r3, [pc, #272]	; (403600 <letraM+0x2f8>)
  4034f0:	4798      	blx	r3

	
	
	colorBLACK();
  4034f2:	4b43      	ldr	r3, [pc, #268]	; (403600 <letraM+0x2f8>)
  4034f4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4034f6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4034fa:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403502:	4618      	mov	r0, r3
  403504:	4b3f      	ldr	r3, [pc, #252]	; (403604 <letraM+0x2fc>)
  403506:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403508:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40350c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403510:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403514:	4618      	mov	r0, r3
  403516:	4b3b      	ldr	r3, [pc, #236]	; (403604 <letraM+0x2fc>)
  403518:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40351a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40351e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403522:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403526:	4618      	mov	r0, r3
  403528:	4b36      	ldr	r3, [pc, #216]	; (403604 <letraM+0x2fc>)
  40352a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40352c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403530:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403534:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403538:	4618      	mov	r0, r3
  40353a:	4b32      	ldr	r3, [pc, #200]	; (403604 <letraM+0x2fc>)
  40353c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40353e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403542:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403546:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40354a:	4618      	mov	r0, r3
  40354c:	4b2d      	ldr	r3, [pc, #180]	; (403604 <letraM+0x2fc>)
  40354e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403550:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403554:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403558:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40355c:	4618      	mov	r0, r3
  40355e:	4b29      	ldr	r3, [pc, #164]	; (403604 <letraM+0x2fc>)
  403560:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403562:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403566:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40356e:	4618      	mov	r0, r3
  403570:	4b24      	ldr	r3, [pc, #144]	; (403604 <letraM+0x2fc>)
  403572:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  403574:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403578:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403580:	4618      	mov	r0, r3
  403582:	4b20      	ldr	r3, [pc, #128]	; (403604 <letraM+0x2fc>)
  403584:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403586:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40358a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40358e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403592:	4618      	mov	r0, r3
  403594:	4b1b      	ldr	r3, [pc, #108]	; (403604 <letraM+0x2fc>)
  403596:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403598:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40359c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4035a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4035a4:	4618      	mov	r0, r3
  4035a6:	4b17      	ldr	r3, [pc, #92]	; (403604 <letraM+0x2fc>)
  4035a8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4035aa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4035ae:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4035b6:	4618      	mov	r0, r3
  4035b8:	4b12      	ldr	r3, [pc, #72]	; (403604 <letraM+0x2fc>)
  4035ba:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4035bc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4035c0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4035c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4035c8:	4618      	mov	r0, r3
  4035ca:	4b0e      	ldr	r3, [pc, #56]	; (403604 <letraM+0x2fc>)
  4035cc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4035ce:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4035d2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4035da:	4618      	mov	r0, r3
  4035dc:	4b09      	ldr	r3, [pc, #36]	; (403604 <letraM+0x2fc>)
  4035de:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4035e0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4035e4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4035e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4035ec:	4618      	mov	r0, r3
  4035ee:	4b05      	ldr	r3, [pc, #20]	; (403604 <letraM+0x2fc>)
  4035f0:	4798      	blx	r3
	colorBLACK();
  4035f2:	4b03      	ldr	r3, [pc, #12]	; (403600 <letraM+0x2f8>)
  4035f4:	4798      	blx	r3
	
	
	
}
  4035f6:	bf00      	nop
  4035f8:	3708      	adds	r7, #8
  4035fa:	46bd      	mov	sp, r7
  4035fc:	bd80      	pop	{r7, pc}
  4035fe:	bf00      	nop
  403600:	004013bd 	.word	0x004013bd
  403604:	00401411 	.word	0x00401411

00403608 <letraN>:


void letraN(int8_t red, int8_t green, int8_t blue){
  403608:	b580      	push	{r7, lr}
  40360a:	b082      	sub	sp, #8
  40360c:	af00      	add	r7, sp, #0
  40360e:	4603      	mov	r3, r0
  403610:	71fb      	strb	r3, [r7, #7]
  403612:	460b      	mov	r3, r1
  403614:	71bb      	strb	r3, [r7, #6]
  403616:	4613      	mov	r3, r2
  403618:	717b      	strb	r3, [r7, #5]
	//N
	
	
	colorBLACK();
  40361a:	4bb9      	ldr	r3, [pc, #740]	; (403900 <letraN+0x2f8>)
  40361c:	4798      	blx	r3
	colorBLACK();
  40361e:	4bb8      	ldr	r3, [pc, #736]	; (403900 <letraN+0x2f8>)
  403620:	4798      	blx	r3
	colorBLACK();
  403622:	4bb7      	ldr	r3, [pc, #732]	; (403900 <letraN+0x2f8>)
  403624:	4798      	blx	r3
	colorBLACK();
  403626:	4bb6      	ldr	r3, [pc, #728]	; (403900 <letraN+0x2f8>)
  403628:	4798      	blx	r3
	colorBLACK();
  40362a:	4bb5      	ldr	r3, [pc, #724]	; (403900 <letraN+0x2f8>)
  40362c:	4798      	blx	r3
	colorBLACK();
  40362e:	4bb4      	ldr	r3, [pc, #720]	; (403900 <letraN+0x2f8>)
  403630:	4798      	blx	r3
	colorBLACK();
  403632:	4bb3      	ldr	r3, [pc, #716]	; (403900 <letraN+0x2f8>)
  403634:	4798      	blx	r3
	colorBLACK();
  403636:	4bb2      	ldr	r3, [pc, #712]	; (403900 <letraN+0x2f8>)
  403638:	4798      	blx	r3
	
	
	
	colorDEFINE(red,green,blue);
  40363a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40363e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403642:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403646:	4618      	mov	r0, r3
  403648:	4bae      	ldr	r3, [pc, #696]	; (403904 <letraN+0x2fc>)
  40364a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40364c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403650:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403654:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403658:	4618      	mov	r0, r3
  40365a:	4baa      	ldr	r3, [pc, #680]	; (403904 <letraN+0x2fc>)
  40365c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40365e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403662:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403666:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40366a:	4618      	mov	r0, r3
  40366c:	4ba5      	ldr	r3, [pc, #660]	; (403904 <letraN+0x2fc>)
  40366e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403670:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403674:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403678:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40367c:	4618      	mov	r0, r3
  40367e:	4ba1      	ldr	r3, [pc, #644]	; (403904 <letraN+0x2fc>)
  403680:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403682:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403686:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40368e:	4618      	mov	r0, r3
  403690:	4b9c      	ldr	r3, [pc, #624]	; (403904 <letraN+0x2fc>)
  403692:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403694:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403698:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40369c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4036a0:	4618      	mov	r0, r3
  4036a2:	4b98      	ldr	r3, [pc, #608]	; (403904 <letraN+0x2fc>)
  4036a4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4036a6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4036aa:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4036b2:	4618      	mov	r0, r3
  4036b4:	4b93      	ldr	r3, [pc, #588]	; (403904 <letraN+0x2fc>)
  4036b6:	4798      	blx	r3
	colorBLACK();
  4036b8:	4b91      	ldr	r3, [pc, #580]	; (403900 <letraN+0x2f8>)
  4036ba:	4798      	blx	r3
	
	colorBLACK();
  4036bc:	4b90      	ldr	r3, [pc, #576]	; (403900 <letraN+0x2f8>)
  4036be:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4036c0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4036c4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4036c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4036cc:	4618      	mov	r0, r3
  4036ce:	4b8d      	ldr	r3, [pc, #564]	; (403904 <letraN+0x2fc>)
  4036d0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4036d2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4036d6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4036de:	4618      	mov	r0, r3
  4036e0:	4b88      	ldr	r3, [pc, #544]	; (403904 <letraN+0x2fc>)
  4036e2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4036e4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4036e8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4036ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4036f0:	4618      	mov	r0, r3
  4036f2:	4b84      	ldr	r3, [pc, #528]	; (403904 <letraN+0x2fc>)
  4036f4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4036f6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4036fa:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403702:	4618      	mov	r0, r3
  403704:	4b7f      	ldr	r3, [pc, #508]	; (403904 <letraN+0x2fc>)
  403706:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403708:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40370c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403710:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403714:	4618      	mov	r0, r3
  403716:	4b7b      	ldr	r3, [pc, #492]	; (403904 <letraN+0x2fc>)
  403718:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40371a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40371e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403722:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403726:	4618      	mov	r0, r3
  403728:	4b76      	ldr	r3, [pc, #472]	; (403904 <letraN+0x2fc>)
  40372a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40372c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403730:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403734:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403738:	4618      	mov	r0, r3
  40373a:	4b72      	ldr	r3, [pc, #456]	; (403904 <letraN+0x2fc>)
  40373c:	4798      	blx	r3
	
	
	colorBLACK();
  40373e:	4b70      	ldr	r3, [pc, #448]	; (403900 <letraN+0x2f8>)
  403740:	4798      	blx	r3
	colorBLACK();
  403742:	4b6f      	ldr	r3, [pc, #444]	; (403900 <letraN+0x2f8>)
  403744:	4798      	blx	r3
	colorBLACK();
  403746:	4b6e      	ldr	r3, [pc, #440]	; (403900 <letraN+0x2f8>)
  403748:	4798      	blx	r3
	colorBLACK();
  40374a:	4b6d      	ldr	r3, [pc, #436]	; (403900 <letraN+0x2f8>)
  40374c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40374e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403752:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403756:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40375a:	4618      	mov	r0, r3
  40375c:	4b69      	ldr	r3, [pc, #420]	; (403904 <letraN+0x2fc>)
  40375e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403760:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403764:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403768:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40376c:	4618      	mov	r0, r3
  40376e:	4b65      	ldr	r3, [pc, #404]	; (403904 <letraN+0x2fc>)
  403770:	4798      	blx	r3
	colorBLACK();
  403772:	4b63      	ldr	r3, [pc, #396]	; (403900 <letraN+0x2f8>)
  403774:	4798      	blx	r3
	colorBLACK();
  403776:	4b62      	ldr	r3, [pc, #392]	; (403900 <letraN+0x2f8>)
  403778:	4798      	blx	r3
	
	colorBLACK();
  40377a:	4b61      	ldr	r3, [pc, #388]	; (403900 <letraN+0x2f8>)
  40377c:	4798      	blx	r3
	colorBLACK();
  40377e:	4b60      	ldr	r3, [pc, #384]	; (403900 <letraN+0x2f8>)
  403780:	4798      	blx	r3
	colorBLACK();
  403782:	4b5f      	ldr	r3, [pc, #380]	; (403900 <letraN+0x2f8>)
  403784:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403786:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40378a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403792:	4618      	mov	r0, r3
  403794:	4b5b      	ldr	r3, [pc, #364]	; (403904 <letraN+0x2fc>)
  403796:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403798:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40379c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4037a4:	4618      	mov	r0, r3
  4037a6:	4b57      	ldr	r3, [pc, #348]	; (403904 <letraN+0x2fc>)
  4037a8:	4798      	blx	r3
	colorBLACK();
  4037aa:	4b55      	ldr	r3, [pc, #340]	; (403900 <letraN+0x2f8>)
  4037ac:	4798      	blx	r3
	colorBLACK();
  4037ae:	4b54      	ldr	r3, [pc, #336]	; (403900 <letraN+0x2f8>)
  4037b0:	4798      	blx	r3
	colorBLACK();
  4037b2:	4b53      	ldr	r3, [pc, #332]	; (403900 <letraN+0x2f8>)
  4037b4:	4798      	blx	r3
	
	
	colorBLACK();
  4037b6:	4b52      	ldr	r3, [pc, #328]	; (403900 <letraN+0x2f8>)
  4037b8:	4798      	blx	r3
	colorBLACK();
  4037ba:	4b51      	ldr	r3, [pc, #324]	; (403900 <letraN+0x2f8>)
  4037bc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4037be:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4037c2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4037ca:	4618      	mov	r0, r3
  4037cc:	4b4d      	ldr	r3, [pc, #308]	; (403904 <letraN+0x2fc>)
  4037ce:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4037d0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4037d4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4037d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4037dc:	4618      	mov	r0, r3
  4037de:	4b49      	ldr	r3, [pc, #292]	; (403904 <letraN+0x2fc>)
  4037e0:	4798      	blx	r3
	colorBLACK();
  4037e2:	4b47      	ldr	r3, [pc, #284]	; (403900 <letraN+0x2f8>)
  4037e4:	4798      	blx	r3
	colorBLACK();
  4037e6:	4b46      	ldr	r3, [pc, #280]	; (403900 <letraN+0x2f8>)
  4037e8:	4798      	blx	r3
	
	colorBLACK();
  4037ea:	4b45      	ldr	r3, [pc, #276]	; (403900 <letraN+0x2f8>)
  4037ec:	4798      	blx	r3
	colorBLACK();
  4037ee:	4b44      	ldr	r3, [pc, #272]	; (403900 <letraN+0x2f8>)
  4037f0:	4798      	blx	r3

	
	
	colorBLACK();
  4037f2:	4b43      	ldr	r3, [pc, #268]	; (403900 <letraN+0x2f8>)
  4037f4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4037f6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4037fa:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403802:	4618      	mov	r0, r3
  403804:	4b3f      	ldr	r3, [pc, #252]	; (403904 <letraN+0x2fc>)
  403806:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403808:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40380c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403810:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403814:	4618      	mov	r0, r3
  403816:	4b3b      	ldr	r3, [pc, #236]	; (403904 <letraN+0x2fc>)
  403818:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40381a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40381e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403822:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403826:	4618      	mov	r0, r3
  403828:	4b36      	ldr	r3, [pc, #216]	; (403904 <letraN+0x2fc>)
  40382a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40382c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403830:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403834:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403838:	4618      	mov	r0, r3
  40383a:	4b32      	ldr	r3, [pc, #200]	; (403904 <letraN+0x2fc>)
  40383c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40383e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403842:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403846:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40384a:	4618      	mov	r0, r3
  40384c:	4b2d      	ldr	r3, [pc, #180]	; (403904 <letraN+0x2fc>)
  40384e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403850:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403854:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403858:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40385c:	4618      	mov	r0, r3
  40385e:	4b29      	ldr	r3, [pc, #164]	; (403904 <letraN+0x2fc>)
  403860:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403862:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403866:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40386e:	4618      	mov	r0, r3
  403870:	4b24      	ldr	r3, [pc, #144]	; (403904 <letraN+0x2fc>)
  403872:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  403874:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403878:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403880:	4618      	mov	r0, r3
  403882:	4b20      	ldr	r3, [pc, #128]	; (403904 <letraN+0x2fc>)
  403884:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403886:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40388a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403892:	4618      	mov	r0, r3
  403894:	4b1b      	ldr	r3, [pc, #108]	; (403904 <letraN+0x2fc>)
  403896:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403898:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40389c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4038a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4038a4:	4618      	mov	r0, r3
  4038a6:	4b17      	ldr	r3, [pc, #92]	; (403904 <letraN+0x2fc>)
  4038a8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4038aa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4038ae:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4038b6:	4618      	mov	r0, r3
  4038b8:	4b12      	ldr	r3, [pc, #72]	; (403904 <letraN+0x2fc>)
  4038ba:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4038bc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4038c0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4038c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4038c8:	4618      	mov	r0, r3
  4038ca:	4b0e      	ldr	r3, [pc, #56]	; (403904 <letraN+0x2fc>)
  4038cc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4038ce:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4038d2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4038da:	4618      	mov	r0, r3
  4038dc:	4b09      	ldr	r3, [pc, #36]	; (403904 <letraN+0x2fc>)
  4038de:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4038e0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4038e4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4038e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4038ec:	4618      	mov	r0, r3
  4038ee:	4b05      	ldr	r3, [pc, #20]	; (403904 <letraN+0x2fc>)
  4038f0:	4798      	blx	r3
	colorBLACK();
  4038f2:	4b03      	ldr	r3, [pc, #12]	; (403900 <letraN+0x2f8>)
  4038f4:	4798      	blx	r3
	
	
}
  4038f6:	bf00      	nop
  4038f8:	3708      	adds	r7, #8
  4038fa:	46bd      	mov	sp, r7
  4038fc:	bd80      	pop	{r7, pc}
  4038fe:	bf00      	nop
  403900:	004013bd 	.word	0x004013bd
  403904:	00401411 	.word	0x00401411

00403908 <letraO>:


void letraO(int8_t red, int8_t green, int8_t blue){
  403908:	b580      	push	{r7, lr}
  40390a:	b082      	sub	sp, #8
  40390c:	af00      	add	r7, sp, #0
  40390e:	4603      	mov	r3, r0
  403910:	71fb      	strb	r3, [r7, #7]
  403912:	460b      	mov	r3, r1
  403914:	71bb      	strb	r3, [r7, #6]
  403916:	4613      	mov	r3, r2
  403918:	717b      	strb	r3, [r7, #5]
	//O
	
	
	colorBLACK();
  40391a:	4ba4      	ldr	r3, [pc, #656]	; (403bac <letraO+0x2a4>)
  40391c:	4798      	blx	r3
	colorBLACK();
  40391e:	4ba3      	ldr	r3, [pc, #652]	; (403bac <letraO+0x2a4>)
  403920:	4798      	blx	r3
	colorBLACK();
  403922:	4ba2      	ldr	r3, [pc, #648]	; (403bac <letraO+0x2a4>)
  403924:	4798      	blx	r3
	colorBLACK();
  403926:	4ba1      	ldr	r3, [pc, #644]	; (403bac <letraO+0x2a4>)
  403928:	4798      	blx	r3
	colorBLACK();
  40392a:	4ba0      	ldr	r3, [pc, #640]	; (403bac <letraO+0x2a4>)
  40392c:	4798      	blx	r3
	colorBLACK();
  40392e:	4b9f      	ldr	r3, [pc, #636]	; (403bac <letraO+0x2a4>)
  403930:	4798      	blx	r3
	colorBLACK();
  403932:	4b9e      	ldr	r3, [pc, #632]	; (403bac <letraO+0x2a4>)
  403934:	4798      	blx	r3
	colorBLACK();
  403936:	4b9d      	ldr	r3, [pc, #628]	; (403bac <letraO+0x2a4>)
  403938:	4798      	blx	r3
	
	
	
	colorBLACK();
  40393a:	4b9c      	ldr	r3, [pc, #624]	; (403bac <letraO+0x2a4>)
  40393c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40393e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403942:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403946:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40394a:	4618      	mov	r0, r3
  40394c:	4b98      	ldr	r3, [pc, #608]	; (403bb0 <letraO+0x2a8>)
  40394e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403950:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403954:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403958:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40395c:	4618      	mov	r0, r3
  40395e:	4b94      	ldr	r3, [pc, #592]	; (403bb0 <letraO+0x2a8>)
  403960:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403962:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403966:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40396e:	4618      	mov	r0, r3
  403970:	4b8f      	ldr	r3, [pc, #572]	; (403bb0 <letraO+0x2a8>)
  403972:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403974:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403978:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40397c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403980:	4618      	mov	r0, r3
  403982:	4b8b      	ldr	r3, [pc, #556]	; (403bb0 <letraO+0x2a8>)
  403984:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403986:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40398a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403992:	4618      	mov	r0, r3
  403994:	4b86      	ldr	r3, [pc, #536]	; (403bb0 <letraO+0x2a8>)
  403996:	4798      	blx	r3
	colorBLACK();
  403998:	4b84      	ldr	r3, [pc, #528]	; (403bac <letraO+0x2a4>)
  40399a:	4798      	blx	r3
	colorBLACK();
  40399c:	4b83      	ldr	r3, [pc, #524]	; (403bac <letraO+0x2a4>)
  40399e:	4798      	blx	r3
	
	colorBLACK();
  4039a0:	4b82      	ldr	r3, [pc, #520]	; (403bac <letraO+0x2a4>)
  4039a2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4039a4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4039a8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4039ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4039b0:	4618      	mov	r0, r3
  4039b2:	4b7f      	ldr	r3, [pc, #508]	; (403bb0 <letraO+0x2a8>)
  4039b4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4039b6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4039ba:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4039c2:	4618      	mov	r0, r3
  4039c4:	4b7a      	ldr	r3, [pc, #488]	; (403bb0 <letraO+0x2a8>)
  4039c6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4039c8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4039cc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4039d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4039d4:	4618      	mov	r0, r3
  4039d6:	4b76      	ldr	r3, [pc, #472]	; (403bb0 <letraO+0x2a8>)
  4039d8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4039da:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4039de:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4039e6:	4618      	mov	r0, r3
  4039e8:	4b71      	ldr	r3, [pc, #452]	; (403bb0 <letraO+0x2a8>)
  4039ea:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4039ec:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4039f0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4039f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4039f8:	4618      	mov	r0, r3
  4039fa:	4b6d      	ldr	r3, [pc, #436]	; (403bb0 <letraO+0x2a8>)
  4039fc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4039fe:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403a02:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403a0a:	4618      	mov	r0, r3
  403a0c:	4b68      	ldr	r3, [pc, #416]	; (403bb0 <letraO+0x2a8>)
  403a0e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403a10:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403a14:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403a1c:	4618      	mov	r0, r3
  403a1e:	4b64      	ldr	r3, [pc, #400]	; (403bb0 <letraO+0x2a8>)
  403a20:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  403a22:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403a26:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403a2e:	4618      	mov	r0, r3
  403a30:	4b5f      	ldr	r3, [pc, #380]	; (403bb0 <letraO+0x2a8>)
  403a32:	4798      	blx	r3
	colorBLACK();
  403a34:	4b5d      	ldr	r3, [pc, #372]	; (403bac <letraO+0x2a4>)
  403a36:	4798      	blx	r3
	colorBLACK();
  403a38:	4b5c      	ldr	r3, [pc, #368]	; (403bac <letraO+0x2a4>)
  403a3a:	4798      	blx	r3
	colorBLACK();
  403a3c:	4b5b      	ldr	r3, [pc, #364]	; (403bac <letraO+0x2a4>)
  403a3e:	4798      	blx	r3
	colorBLACK();
  403a40:	4b5a      	ldr	r3, [pc, #360]	; (403bac <letraO+0x2a4>)
  403a42:	4798      	blx	r3
	colorBLACK();
  403a44:	4b59      	ldr	r3, [pc, #356]	; (403bac <letraO+0x2a4>)
  403a46:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403a48:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403a4c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403a54:	4618      	mov	r0, r3
  403a56:	4b56      	ldr	r3, [pc, #344]	; (403bb0 <letraO+0x2a8>)
  403a58:	4798      	blx	r3
	colorBLACK();
  403a5a:	4b54      	ldr	r3, [pc, #336]	; (403bac <letraO+0x2a4>)
  403a5c:	4798      	blx	r3
	
	colorBLACK();
  403a5e:	4b53      	ldr	r3, [pc, #332]	; (403bac <letraO+0x2a4>)
  403a60:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403a62:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403a66:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403a6e:	4618      	mov	r0, r3
  403a70:	4b4f      	ldr	r3, [pc, #316]	; (403bb0 <letraO+0x2a8>)
  403a72:	4798      	blx	r3
	colorBLACK();
  403a74:	4b4d      	ldr	r3, [pc, #308]	; (403bac <letraO+0x2a4>)
  403a76:	4798      	blx	r3
	colorBLACK();
  403a78:	4b4c      	ldr	r3, [pc, #304]	; (403bac <letraO+0x2a4>)
  403a7a:	4798      	blx	r3
	colorBLACK();
  403a7c:	4b4b      	ldr	r3, [pc, #300]	; (403bac <letraO+0x2a4>)
  403a7e:	4798      	blx	r3
	colorBLACK();
  403a80:	4b4a      	ldr	r3, [pc, #296]	; (403bac <letraO+0x2a4>)
  403a82:	4798      	blx	r3
	colorBLACK();
  403a84:	4b49      	ldr	r3, [pc, #292]	; (403bac <letraO+0x2a4>)
  403a86:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403a88:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403a8c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403a94:	4618      	mov	r0, r3
  403a96:	4b46      	ldr	r3, [pc, #280]	; (403bb0 <letraO+0x2a8>)
  403a98:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  403a9a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403a9e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403aa6:	4618      	mov	r0, r3
  403aa8:	4b41      	ldr	r3, [pc, #260]	; (403bb0 <letraO+0x2a8>)
  403aaa:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403aac:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403ab0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403ab8:	4618      	mov	r0, r3
  403aba:	4b3d      	ldr	r3, [pc, #244]	; (403bb0 <letraO+0x2a8>)
  403abc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403abe:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403ac2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403aca:	4618      	mov	r0, r3
  403acc:	4b38      	ldr	r3, [pc, #224]	; (403bb0 <letraO+0x2a8>)
  403ace:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403ad0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403ad4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403adc:	4618      	mov	r0, r3
  403ade:	4b34      	ldr	r3, [pc, #208]	; (403bb0 <letraO+0x2a8>)
  403ae0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403ae2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403ae6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403aee:	4618      	mov	r0, r3
  403af0:	4b2f      	ldr	r3, [pc, #188]	; (403bb0 <letraO+0x2a8>)
  403af2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403af4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403af8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403b00:	4618      	mov	r0, r3
  403b02:	4b2b      	ldr	r3, [pc, #172]	; (403bb0 <letraO+0x2a8>)
  403b04:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403b06:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403b0a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403b12:	4618      	mov	r0, r3
  403b14:	4b26      	ldr	r3, [pc, #152]	; (403bb0 <letraO+0x2a8>)
  403b16:	4798      	blx	r3
	colorBLACK();
  403b18:	4b24      	ldr	r3, [pc, #144]	; (403bac <letraO+0x2a4>)
  403b1a:	4798      	blx	r3

	
	
	colorBLACK();
  403b1c:	4b23      	ldr	r3, [pc, #140]	; (403bac <letraO+0x2a4>)
  403b1e:	4798      	blx	r3
	colorBLACK();
  403b20:	4b22      	ldr	r3, [pc, #136]	; (403bac <letraO+0x2a4>)
  403b22:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403b24:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403b28:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403b30:	4618      	mov	r0, r3
  403b32:	4b1f      	ldr	r3, [pc, #124]	; (403bb0 <letraO+0x2a8>)
  403b34:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403b36:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403b3a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403b42:	4618      	mov	r0, r3
  403b44:	4b1a      	ldr	r3, [pc, #104]	; (403bb0 <letraO+0x2a8>)
  403b46:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403b48:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403b4c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403b54:	4618      	mov	r0, r3
  403b56:	4b16      	ldr	r3, [pc, #88]	; (403bb0 <letraO+0x2a8>)
  403b58:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403b5a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403b5e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403b66:	4618      	mov	r0, r3
  403b68:	4b11      	ldr	r3, [pc, #68]	; (403bb0 <letraO+0x2a8>)
  403b6a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403b6c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403b70:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403b78:	4618      	mov	r0, r3
  403b7a:	4b0d      	ldr	r3, [pc, #52]	; (403bb0 <letraO+0x2a8>)
  403b7c:	4798      	blx	r3
	colorBLACK();
  403b7e:	4b0b      	ldr	r3, [pc, #44]	; (403bac <letraO+0x2a4>)
  403b80:	4798      	blx	r3
	
	colorBLACK();
  403b82:	4b0a      	ldr	r3, [pc, #40]	; (403bac <letraO+0x2a4>)
  403b84:	4798      	blx	r3
	colorBLACK();
  403b86:	4b09      	ldr	r3, [pc, #36]	; (403bac <letraO+0x2a4>)
  403b88:	4798      	blx	r3
	colorBLACK();
  403b8a:	4b08      	ldr	r3, [pc, #32]	; (403bac <letraO+0x2a4>)
  403b8c:	4798      	blx	r3
	colorBLACK();
  403b8e:	4b07      	ldr	r3, [pc, #28]	; (403bac <letraO+0x2a4>)
  403b90:	4798      	blx	r3
	colorBLACK();
  403b92:	4b06      	ldr	r3, [pc, #24]	; (403bac <letraO+0x2a4>)
  403b94:	4798      	blx	r3
	colorBLACK();
  403b96:	4b05      	ldr	r3, [pc, #20]	; (403bac <letraO+0x2a4>)
  403b98:	4798      	blx	r3
	colorBLACK();
  403b9a:	4b04      	ldr	r3, [pc, #16]	; (403bac <letraO+0x2a4>)
  403b9c:	4798      	blx	r3
	colorBLACK();
  403b9e:	4b03      	ldr	r3, [pc, #12]	; (403bac <letraO+0x2a4>)
  403ba0:	4798      	blx	r3
	
	
}	
  403ba2:	bf00      	nop
  403ba4:	3708      	adds	r7, #8
  403ba6:	46bd      	mov	sp, r7
  403ba8:	bd80      	pop	{r7, pc}
  403baa:	bf00      	nop
  403bac:	004013bd 	.word	0x004013bd
  403bb0:	00401411 	.word	0x00401411

00403bb4 <letraP>:
	

void letraP(int8_t red, int8_t green, int8_t blue){
  403bb4:	b580      	push	{r7, lr}
  403bb6:	b082      	sub	sp, #8
  403bb8:	af00      	add	r7, sp, #0
  403bba:	4603      	mov	r3, r0
  403bbc:	71fb      	strb	r3, [r7, #7]
  403bbe:	460b      	mov	r3, r1
  403bc0:	71bb      	strb	r3, [r7, #6]
  403bc2:	4613      	mov	r3, r2
  403bc4:	717b      	strb	r3, [r7, #5]
	//P
	
	
	colorBLACK();
  403bc6:	4b9d      	ldr	r3, [pc, #628]	; (403e3c <letraP+0x288>)
  403bc8:	4798      	blx	r3
	colorBLACK();
  403bca:	4b9c      	ldr	r3, [pc, #624]	; (403e3c <letraP+0x288>)
  403bcc:	4798      	blx	r3
	colorBLACK();
  403bce:	4b9b      	ldr	r3, [pc, #620]	; (403e3c <letraP+0x288>)
  403bd0:	4798      	blx	r3
	colorBLACK();
  403bd2:	4b9a      	ldr	r3, [pc, #616]	; (403e3c <letraP+0x288>)
  403bd4:	4798      	blx	r3
	colorBLACK();
  403bd6:	4b99      	ldr	r3, [pc, #612]	; (403e3c <letraP+0x288>)
  403bd8:	4798      	blx	r3
	colorBLACK();
  403bda:	4b98      	ldr	r3, [pc, #608]	; (403e3c <letraP+0x288>)
  403bdc:	4798      	blx	r3
	colorBLACK();
  403bde:	4b97      	ldr	r3, [pc, #604]	; (403e3c <letraP+0x288>)
  403be0:	4798      	blx	r3
	colorBLACK();
  403be2:	4b96      	ldr	r3, [pc, #600]	; (403e3c <letraP+0x288>)
  403be4:	4798      	blx	r3
	
	
	
	
	colorDEFINE(red,green,blue);
  403be6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403bea:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403bf2:	4618      	mov	r0, r3
  403bf4:	4b92      	ldr	r3, [pc, #584]	; (403e40 <letraP+0x28c>)
  403bf6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403bf8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403bfc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403c04:	4618      	mov	r0, r3
  403c06:	4b8e      	ldr	r3, [pc, #568]	; (403e40 <letraP+0x28c>)
  403c08:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403c0a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403c0e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403c16:	4618      	mov	r0, r3
  403c18:	4b89      	ldr	r3, [pc, #548]	; (403e40 <letraP+0x28c>)
  403c1a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403c1c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403c20:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403c28:	4618      	mov	r0, r3
  403c2a:	4b85      	ldr	r3, [pc, #532]	; (403e40 <letraP+0x28c>)
  403c2c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403c2e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403c32:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403c3a:	4618      	mov	r0, r3
  403c3c:	4b80      	ldr	r3, [pc, #512]	; (403e40 <letraP+0x28c>)
  403c3e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403c40:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403c44:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403c4c:	4618      	mov	r0, r3
  403c4e:	4b7c      	ldr	r3, [pc, #496]	; (403e40 <letraP+0x28c>)
  403c50:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403c52:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403c56:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403c5e:	4618      	mov	r0, r3
  403c60:	4b77      	ldr	r3, [pc, #476]	; (403e40 <letraP+0x28c>)
  403c62:	4798      	blx	r3
	colorBLACK();
  403c64:	4b75      	ldr	r3, [pc, #468]	; (403e3c <letraP+0x288>)
  403c66:	4798      	blx	r3
	
	colorBLACK();
  403c68:	4b74      	ldr	r3, [pc, #464]	; (403e3c <letraP+0x288>)
  403c6a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403c6c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403c70:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403c78:	4618      	mov	r0, r3
  403c7a:	4b71      	ldr	r3, [pc, #452]	; (403e40 <letraP+0x28c>)
  403c7c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403c7e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403c82:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403c8a:	4618      	mov	r0, r3
  403c8c:	4b6c      	ldr	r3, [pc, #432]	; (403e40 <letraP+0x28c>)
  403c8e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403c90:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403c94:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403c9c:	4618      	mov	r0, r3
  403c9e:	4b68      	ldr	r3, [pc, #416]	; (403e40 <letraP+0x28c>)
  403ca0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403ca2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403ca6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403cae:	4618      	mov	r0, r3
  403cb0:	4b63      	ldr	r3, [pc, #396]	; (403e40 <letraP+0x28c>)
  403cb2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403cb4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403cb8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403cc0:	4618      	mov	r0, r3
  403cc2:	4b5f      	ldr	r3, [pc, #380]	; (403e40 <letraP+0x28c>)
  403cc4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403cc6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403cca:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403cd2:	4618      	mov	r0, r3
  403cd4:	4b5a      	ldr	r3, [pc, #360]	; (403e40 <letraP+0x28c>)
  403cd6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403cd8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403cdc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403ce4:	4618      	mov	r0, r3
  403ce6:	4b56      	ldr	r3, [pc, #344]	; (403e40 <letraP+0x28c>)
  403ce8:	4798      	blx	r3
	
	
	
	colorBLACK();
  403cea:	4b54      	ldr	r3, [pc, #336]	; (403e3c <letraP+0x288>)
  403cec:	4798      	blx	r3
	colorBLACK();
  403cee:	4b53      	ldr	r3, [pc, #332]	; (403e3c <letraP+0x288>)
  403cf0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403cf2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403cf6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403cfe:	4618      	mov	r0, r3
  403d00:	4b4f      	ldr	r3, [pc, #316]	; (403e40 <letraP+0x28c>)
  403d02:	4798      	blx	r3
	colorBLACK();
  403d04:	4b4d      	ldr	r3, [pc, #308]	; (403e3c <letraP+0x288>)
  403d06:	4798      	blx	r3
	colorBLACK();
  403d08:	4b4c      	ldr	r3, [pc, #304]	; (403e3c <letraP+0x288>)
  403d0a:	4798      	blx	r3
	colorBLACK();
  403d0c:	4b4b      	ldr	r3, [pc, #300]	; (403e3c <letraP+0x288>)
  403d0e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403d10:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403d14:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403d1c:	4618      	mov	r0, r3
  403d1e:	4b48      	ldr	r3, [pc, #288]	; (403e40 <letraP+0x28c>)
  403d20:	4798      	blx	r3
	colorBLACK();
  403d22:	4b46      	ldr	r3, [pc, #280]	; (403e3c <letraP+0x288>)
  403d24:	4798      	blx	r3
	
	colorBLACK();
  403d26:	4b45      	ldr	r3, [pc, #276]	; (403e3c <letraP+0x288>)
  403d28:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403d2a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403d2e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403d36:	4618      	mov	r0, r3
  403d38:	4b41      	ldr	r3, [pc, #260]	; (403e40 <letraP+0x28c>)
  403d3a:	4798      	blx	r3
	colorBLACK();
  403d3c:	4b3f      	ldr	r3, [pc, #252]	; (403e3c <letraP+0x288>)
  403d3e:	4798      	blx	r3
	colorBLACK();
  403d40:	4b3e      	ldr	r3, [pc, #248]	; (403e3c <letraP+0x288>)
  403d42:	4798      	blx	r3
	colorBLACK();
  403d44:	4b3d      	ldr	r3, [pc, #244]	; (403e3c <letraP+0x288>)
  403d46:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403d48:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403d4c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403d54:	4618      	mov	r0, r3
  403d56:	4b3a      	ldr	r3, [pc, #232]	; (403e40 <letraP+0x28c>)
  403d58:	4798      	blx	r3
	colorBLACK();
  403d5a:	4b38      	ldr	r3, [pc, #224]	; (403e3c <letraP+0x288>)
  403d5c:	4798      	blx	r3
	colorBLACK();
  403d5e:	4b37      	ldr	r3, [pc, #220]	; (403e3c <letraP+0x288>)
  403d60:	4798      	blx	r3
	
	
	colorBLACK();
  403d62:	4b36      	ldr	r3, [pc, #216]	; (403e3c <letraP+0x288>)
  403d64:	4798      	blx	r3
	colorBLACK();
  403d66:	4b35      	ldr	r3, [pc, #212]	; (403e3c <letraP+0x288>)
  403d68:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403d6a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403d6e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403d76:	4618      	mov	r0, r3
  403d78:	4b31      	ldr	r3, [pc, #196]	; (403e40 <letraP+0x28c>)
  403d7a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403d7c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403d80:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403d88:	4618      	mov	r0, r3
  403d8a:	4b2d      	ldr	r3, [pc, #180]	; (403e40 <letraP+0x28c>)
  403d8c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403d8e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403d92:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403d9a:	4618      	mov	r0, r3
  403d9c:	4b28      	ldr	r3, [pc, #160]	; (403e40 <letraP+0x28c>)
  403d9e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403da0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403da4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403dac:	4618      	mov	r0, r3
  403dae:	4b24      	ldr	r3, [pc, #144]	; (403e40 <letraP+0x28c>)
  403db0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403db2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403db6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403dbe:	4618      	mov	r0, r3
  403dc0:	4b1f      	ldr	r3, [pc, #124]	; (403e40 <letraP+0x28c>)
  403dc2:	4798      	blx	r3
	colorBLACK();
  403dc4:	4b1d      	ldr	r3, [pc, #116]	; (403e3c <letraP+0x288>)
  403dc6:	4798      	blx	r3

	
	
	colorBLACK();
  403dc8:	4b1c      	ldr	r3, [pc, #112]	; (403e3c <letraP+0x288>)
  403dca:	4798      	blx	r3
	colorBLACK();
  403dcc:	4b1b      	ldr	r3, [pc, #108]	; (403e3c <letraP+0x288>)
  403dce:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403dd0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403dd4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403ddc:	4618      	mov	r0, r3
  403dde:	4b18      	ldr	r3, [pc, #96]	; (403e40 <letraP+0x28c>)
  403de0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403de2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403de6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403dee:	4618      	mov	r0, r3
  403df0:	4b13      	ldr	r3, [pc, #76]	; (403e40 <letraP+0x28c>)
  403df2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403df4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403df8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403e00:	4618      	mov	r0, r3
  403e02:	4b0f      	ldr	r3, [pc, #60]	; (403e40 <letraP+0x28c>)
  403e04:	4798      	blx	r3
	colorBLACK();
  403e06:	4b0d      	ldr	r3, [pc, #52]	; (403e3c <letraP+0x288>)
  403e08:	4798      	blx	r3
	colorBLACK();
  403e0a:	4b0c      	ldr	r3, [pc, #48]	; (403e3c <letraP+0x288>)
  403e0c:	4798      	blx	r3
	colorBLACK();
  403e0e:	4b0b      	ldr	r3, [pc, #44]	; (403e3c <letraP+0x288>)
  403e10:	4798      	blx	r3
	
	colorBLACK();
  403e12:	4b0a      	ldr	r3, [pc, #40]	; (403e3c <letraP+0x288>)
  403e14:	4798      	blx	r3
	colorBLACK();
  403e16:	4b09      	ldr	r3, [pc, #36]	; (403e3c <letraP+0x288>)
  403e18:	4798      	blx	r3
	colorBLACK();
  403e1a:	4b08      	ldr	r3, [pc, #32]	; (403e3c <letraP+0x288>)
  403e1c:	4798      	blx	r3
	colorBLACK();
  403e1e:	4b07      	ldr	r3, [pc, #28]	; (403e3c <letraP+0x288>)
  403e20:	4798      	blx	r3
	colorBLACK();
  403e22:	4b06      	ldr	r3, [pc, #24]	; (403e3c <letraP+0x288>)
  403e24:	4798      	blx	r3
	colorBLACK();
  403e26:	4b05      	ldr	r3, [pc, #20]	; (403e3c <letraP+0x288>)
  403e28:	4798      	blx	r3
	colorBLACK();
  403e2a:	4b04      	ldr	r3, [pc, #16]	; (403e3c <letraP+0x288>)
  403e2c:	4798      	blx	r3
	colorBLACK();
  403e2e:	4b03      	ldr	r3, [pc, #12]	; (403e3c <letraP+0x288>)
  403e30:	4798      	blx	r3
	
	
}
  403e32:	bf00      	nop
  403e34:	3708      	adds	r7, #8
  403e36:	46bd      	mov	sp, r7
  403e38:	bd80      	pop	{r7, pc}
  403e3a:	bf00      	nop
  403e3c:	004013bd 	.word	0x004013bd
  403e40:	00401411 	.word	0x00401411

00403e44 <letraQ>:


void letraQ(int8_t red, int8_t green, int8_t blue){
  403e44:	b580      	push	{r7, lr}
  403e46:	b082      	sub	sp, #8
  403e48:	af00      	add	r7, sp, #0
  403e4a:	4603      	mov	r3, r0
  403e4c:	71fb      	strb	r3, [r7, #7]
  403e4e:	460b      	mov	r3, r1
  403e50:	71bb      	strb	r3, [r7, #6]
  403e52:	4613      	mov	r3, r2
  403e54:	717b      	strb	r3, [r7, #5]
	//Q
	
	colorBLACK();
  403e56:	4ba0      	ldr	r3, [pc, #640]	; (4040d8 <letraQ+0x294>)
  403e58:	4798      	blx	r3
	colorBLACK();
  403e5a:	4b9f      	ldr	r3, [pc, #636]	; (4040d8 <letraQ+0x294>)
  403e5c:	4798      	blx	r3
	colorBLACK();
  403e5e:	4b9e      	ldr	r3, [pc, #632]	; (4040d8 <letraQ+0x294>)
  403e60:	4798      	blx	r3
	colorBLACK();
  403e62:	4b9d      	ldr	r3, [pc, #628]	; (4040d8 <letraQ+0x294>)
  403e64:	4798      	blx	r3
	colorBLACK();
  403e66:	4b9c      	ldr	r3, [pc, #624]	; (4040d8 <letraQ+0x294>)
  403e68:	4798      	blx	r3
	colorBLACK();
  403e6a:	4b9b      	ldr	r3, [pc, #620]	; (4040d8 <letraQ+0x294>)
  403e6c:	4798      	blx	r3
	colorBLACK();
  403e6e:	4b9a      	ldr	r3, [pc, #616]	; (4040d8 <letraQ+0x294>)
  403e70:	4798      	blx	r3
	colorBLACK();
  403e72:	4b99      	ldr	r3, [pc, #612]	; (4040d8 <letraQ+0x294>)
  403e74:	4798      	blx	r3
	
	
	colorBLACK();
  403e76:	4b98      	ldr	r3, [pc, #608]	; (4040d8 <letraQ+0x294>)
  403e78:	4798      	blx	r3
	colorBLACK();
  403e7a:	4b97      	ldr	r3, [pc, #604]	; (4040d8 <letraQ+0x294>)
  403e7c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403e7e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403e82:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403e8a:	4618      	mov	r0, r3
  403e8c:	4b93      	ldr	r3, [pc, #588]	; (4040dc <letraQ+0x298>)
  403e8e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403e90:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403e94:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403e9c:	4618      	mov	r0, r3
  403e9e:	4b8f      	ldr	r3, [pc, #572]	; (4040dc <letraQ+0x298>)
  403ea0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403ea2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403ea6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403eae:	4618      	mov	r0, r3
  403eb0:	4b8a      	ldr	r3, [pc, #552]	; (4040dc <letraQ+0x298>)
  403eb2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403eb4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403eb8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403ec0:	4618      	mov	r0, r3
  403ec2:	4b86      	ldr	r3, [pc, #536]	; (4040dc <letraQ+0x298>)
  403ec4:	4798      	blx	r3
	colorBLACK();
  403ec6:	4b84      	ldr	r3, [pc, #528]	; (4040d8 <letraQ+0x294>)
  403ec8:	4798      	blx	r3
	colorBLACK();
  403eca:	4b83      	ldr	r3, [pc, #524]	; (4040d8 <letraQ+0x294>)
  403ecc:	4798      	blx	r3
	
	colorBLACK();
  403ece:	4b82      	ldr	r3, [pc, #520]	; (4040d8 <letraQ+0x294>)
  403ed0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403ed2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403ed6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403ede:	4618      	mov	r0, r3
  403ee0:	4b7e      	ldr	r3, [pc, #504]	; (4040dc <letraQ+0x298>)
  403ee2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403ee4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403ee8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403ef0:	4618      	mov	r0, r3
  403ef2:	4b7a      	ldr	r3, [pc, #488]	; (4040dc <letraQ+0x298>)
  403ef4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403ef6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403efa:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f02:	4618      	mov	r0, r3
  403f04:	4b75      	ldr	r3, [pc, #468]	; (4040dc <letraQ+0x298>)
  403f06:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403f08:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403f0c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f14:	4618      	mov	r0, r3
  403f16:	4b71      	ldr	r3, [pc, #452]	; (4040dc <letraQ+0x298>)
  403f18:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403f1a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403f1e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f26:	4618      	mov	r0, r3
  403f28:	4b6c      	ldr	r3, [pc, #432]	; (4040dc <letraQ+0x298>)
  403f2a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403f2c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403f30:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f38:	4618      	mov	r0, r3
  403f3a:	4b68      	ldr	r3, [pc, #416]	; (4040dc <letraQ+0x298>)
  403f3c:	4798      	blx	r3
	colorBLACK();
  403f3e:	4b66      	ldr	r3, [pc, #408]	; (4040d8 <letraQ+0x294>)
  403f40:	4798      	blx	r3
	
	
	
	colorBLACK();
  403f42:	4b65      	ldr	r3, [pc, #404]	; (4040d8 <letraQ+0x294>)
  403f44:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403f46:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403f4a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f52:	4618      	mov	r0, r3
  403f54:	4b61      	ldr	r3, [pc, #388]	; (4040dc <letraQ+0x298>)
  403f56:	4798      	blx	r3
	colorBLACK();
  403f58:	4b5f      	ldr	r3, [pc, #380]	; (4040d8 <letraQ+0x294>)
  403f5a:	4798      	blx	r3
	colorBLACK();
  403f5c:	4b5e      	ldr	r3, [pc, #376]	; (4040d8 <letraQ+0x294>)
  403f5e:	4798      	blx	r3
	colorBLACK();
  403f60:	4b5d      	ldr	r3, [pc, #372]	; (4040d8 <letraQ+0x294>)
  403f62:	4798      	blx	r3
	colorBLACK();
  403f64:	4b5c      	ldr	r3, [pc, #368]	; (4040d8 <letraQ+0x294>)
  403f66:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403f68:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403f6c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f74:	4618      	mov	r0, r3
  403f76:	4b59      	ldr	r3, [pc, #356]	; (4040dc <letraQ+0x298>)
  403f78:	4798      	blx	r3
	colorBLACK();
  403f7a:	4b57      	ldr	r3, [pc, #348]	; (4040d8 <letraQ+0x294>)
  403f7c:	4798      	blx	r3
	
	colorBLACK();
  403f7e:	4b56      	ldr	r3, [pc, #344]	; (4040d8 <letraQ+0x294>)
  403f80:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403f82:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403f86:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f8e:	4618      	mov	r0, r3
  403f90:	4b52      	ldr	r3, [pc, #328]	; (4040dc <letraQ+0x298>)
  403f92:	4798      	blx	r3
	colorBLACK();
  403f94:	4b50      	ldr	r3, [pc, #320]	; (4040d8 <letraQ+0x294>)
  403f96:	4798      	blx	r3
	colorBLACK();
  403f98:	4b4f      	ldr	r3, [pc, #316]	; (4040d8 <letraQ+0x294>)
  403f9a:	4798      	blx	r3
	colorBLACK();
  403f9c:	4b4e      	ldr	r3, [pc, #312]	; (4040d8 <letraQ+0x294>)
  403f9e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403fa0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403fa4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403fac:	4618      	mov	r0, r3
  403fae:	4b4b      	ldr	r3, [pc, #300]	; (4040dc <letraQ+0x298>)
  403fb0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403fb2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403fb6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403fbe:	4618      	mov	r0, r3
  403fc0:	4b46      	ldr	r3, [pc, #280]	; (4040dc <letraQ+0x298>)
  403fc2:	4798      	blx	r3
	colorBLACK();
  403fc4:	4b44      	ldr	r3, [pc, #272]	; (4040d8 <letraQ+0x294>)
  403fc6:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  403fc8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403fcc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403fd4:	4618      	mov	r0, r3
  403fd6:	4b41      	ldr	r3, [pc, #260]	; (4040dc <letraQ+0x298>)
  403fd8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403fda:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403fde:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403fe6:	4618      	mov	r0, r3
  403fe8:	4b3c      	ldr	r3, [pc, #240]	; (4040dc <letraQ+0x298>)
  403fea:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403fec:	f997 2005 	ldrsb.w	r2, [r7, #5]
  403ff0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  403ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403ff8:	4618      	mov	r0, r3
  403ffa:	4b38      	ldr	r3, [pc, #224]	; (4040dc <letraQ+0x298>)
  403ffc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  403ffe:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404002:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404006:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40400a:	4618      	mov	r0, r3
  40400c:	4b33      	ldr	r3, [pc, #204]	; (4040dc <letraQ+0x298>)
  40400e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404010:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404014:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404018:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40401c:	4618      	mov	r0, r3
  40401e:	4b2f      	ldr	r3, [pc, #188]	; (4040dc <letraQ+0x298>)
  404020:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404022:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404026:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40402e:	4618      	mov	r0, r3
  404030:	4b2a      	ldr	r3, [pc, #168]	; (4040dc <letraQ+0x298>)
  404032:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404034:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404038:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40403c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404040:	4618      	mov	r0, r3
  404042:	4b26      	ldr	r3, [pc, #152]	; (4040dc <letraQ+0x298>)
  404044:	4798      	blx	r3
	colorBLACK();
  404046:	4b24      	ldr	r3, [pc, #144]	; (4040d8 <letraQ+0x294>)
  404048:	4798      	blx	r3

	
	
	colorBLACK();
  40404a:	4b23      	ldr	r3, [pc, #140]	; (4040d8 <letraQ+0x294>)
  40404c:	4798      	blx	r3
	colorBLACK();
  40404e:	4b22      	ldr	r3, [pc, #136]	; (4040d8 <letraQ+0x294>)
  404050:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404052:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404056:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40405a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40405e:	4618      	mov	r0, r3
  404060:	4b1e      	ldr	r3, [pc, #120]	; (4040dc <letraQ+0x298>)
  404062:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404064:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404068:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40406c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404070:	4618      	mov	r0, r3
  404072:	4b1a      	ldr	r3, [pc, #104]	; (4040dc <letraQ+0x298>)
  404074:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404076:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40407a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40407e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404082:	4618      	mov	r0, r3
  404084:	4b15      	ldr	r3, [pc, #84]	; (4040dc <letraQ+0x298>)
  404086:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404088:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40408c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404090:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404094:	4618      	mov	r0, r3
  404096:	4b11      	ldr	r3, [pc, #68]	; (4040dc <letraQ+0x298>)
  404098:	4798      	blx	r3
	colorBLACK();
  40409a:	4b0f      	ldr	r3, [pc, #60]	; (4040d8 <letraQ+0x294>)
  40409c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40409e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4040a2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4040a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4040aa:	4618      	mov	r0, r3
  4040ac:	4b0b      	ldr	r3, [pc, #44]	; (4040dc <letraQ+0x298>)
  4040ae:	4798      	blx	r3
	
	colorBLACK();
  4040b0:	4b09      	ldr	r3, [pc, #36]	; (4040d8 <letraQ+0x294>)
  4040b2:	4798      	blx	r3
	colorBLACK();
  4040b4:	4b08      	ldr	r3, [pc, #32]	; (4040d8 <letraQ+0x294>)
  4040b6:	4798      	blx	r3
	colorBLACK();
  4040b8:	4b07      	ldr	r3, [pc, #28]	; (4040d8 <letraQ+0x294>)
  4040ba:	4798      	blx	r3
	colorBLACK();
  4040bc:	4b06      	ldr	r3, [pc, #24]	; (4040d8 <letraQ+0x294>)
  4040be:	4798      	blx	r3
	colorBLACK();
  4040c0:	4b05      	ldr	r3, [pc, #20]	; (4040d8 <letraQ+0x294>)
  4040c2:	4798      	blx	r3
	colorBLACK();
  4040c4:	4b04      	ldr	r3, [pc, #16]	; (4040d8 <letraQ+0x294>)
  4040c6:	4798      	blx	r3
	colorBLACK();
  4040c8:	4b03      	ldr	r3, [pc, #12]	; (4040d8 <letraQ+0x294>)
  4040ca:	4798      	blx	r3
	colorBLACK();
  4040cc:	4b02      	ldr	r3, [pc, #8]	; (4040d8 <letraQ+0x294>)
  4040ce:	4798      	blx	r3
}
  4040d0:	bf00      	nop
  4040d2:	3708      	adds	r7, #8
  4040d4:	46bd      	mov	sp, r7
  4040d6:	bd80      	pop	{r7, pc}
  4040d8:	004013bd 	.word	0x004013bd
  4040dc:	00401411 	.word	0x00401411

004040e0 <letraR>:
	
	
void letraR(int8_t red, int8_t green, int8_t blue){
  4040e0:	b580      	push	{r7, lr}
  4040e2:	b082      	sub	sp, #8
  4040e4:	af00      	add	r7, sp, #0
  4040e6:	4603      	mov	r3, r0
  4040e8:	71fb      	strb	r3, [r7, #7]
  4040ea:	460b      	mov	r3, r1
  4040ec:	71bb      	strb	r3, [r7, #6]
  4040ee:	4613      	mov	r3, r2
  4040f0:	717b      	strb	r3, [r7, #5]
	//R
	
	colorBLACK();
  4040f2:	4bab      	ldr	r3, [pc, #684]	; (4043a0 <letraR+0x2c0>)
  4040f4:	4798      	blx	r3
	colorBLACK();
  4040f6:	4baa      	ldr	r3, [pc, #680]	; (4043a0 <letraR+0x2c0>)
  4040f8:	4798      	blx	r3
	colorBLACK();
  4040fa:	4ba9      	ldr	r3, [pc, #676]	; (4043a0 <letraR+0x2c0>)
  4040fc:	4798      	blx	r3
	colorBLACK();
  4040fe:	4ba8      	ldr	r3, [pc, #672]	; (4043a0 <letraR+0x2c0>)
  404100:	4798      	blx	r3
	colorBLACK();
  404102:	4ba7      	ldr	r3, [pc, #668]	; (4043a0 <letraR+0x2c0>)
  404104:	4798      	blx	r3
	colorBLACK();
  404106:	4ba6      	ldr	r3, [pc, #664]	; (4043a0 <letraR+0x2c0>)
  404108:	4798      	blx	r3
	colorBLACK();
  40410a:	4ba5      	ldr	r3, [pc, #660]	; (4043a0 <letraR+0x2c0>)
  40410c:	4798      	blx	r3
	colorBLACK();
  40410e:	4ba4      	ldr	r3, [pc, #656]	; (4043a0 <letraR+0x2c0>)
  404110:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  404112:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404116:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40411a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40411e:	4618      	mov	r0, r3
  404120:	4ba0      	ldr	r3, [pc, #640]	; (4043a4 <letraR+0x2c4>)
  404122:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404124:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404128:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40412c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404130:	4618      	mov	r0, r3
  404132:	4b9c      	ldr	r3, [pc, #624]	; (4043a4 <letraR+0x2c4>)
  404134:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404136:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40413a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40413e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404142:	4618      	mov	r0, r3
  404144:	4b97      	ldr	r3, [pc, #604]	; (4043a4 <letraR+0x2c4>)
  404146:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404148:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40414c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404150:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404154:	4618      	mov	r0, r3
  404156:	4b93      	ldr	r3, [pc, #588]	; (4043a4 <letraR+0x2c4>)
  404158:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40415a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40415e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404162:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404166:	4618      	mov	r0, r3
  404168:	4b8e      	ldr	r3, [pc, #568]	; (4043a4 <letraR+0x2c4>)
  40416a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40416c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404170:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404174:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404178:	4618      	mov	r0, r3
  40417a:	4b8a      	ldr	r3, [pc, #552]	; (4043a4 <letraR+0x2c4>)
  40417c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40417e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404182:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404186:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40418a:	4618      	mov	r0, r3
  40418c:	4b85      	ldr	r3, [pc, #532]	; (4043a4 <letraR+0x2c4>)
  40418e:	4798      	blx	r3
	colorBLACK();
  404190:	4b83      	ldr	r3, [pc, #524]	; (4043a0 <letraR+0x2c0>)
  404192:	4798      	blx	r3
	
	colorBLACK();
  404194:	4b82      	ldr	r3, [pc, #520]	; (4043a0 <letraR+0x2c0>)
  404196:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404198:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40419c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4041a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4041a4:	4618      	mov	r0, r3
  4041a6:	4b7f      	ldr	r3, [pc, #508]	; (4043a4 <letraR+0x2c4>)
  4041a8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4041aa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4041ae:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4041b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4041b6:	4618      	mov	r0, r3
  4041b8:	4b7a      	ldr	r3, [pc, #488]	; (4043a4 <letraR+0x2c4>)
  4041ba:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4041bc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4041c0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4041c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4041c8:	4618      	mov	r0, r3
  4041ca:	4b76      	ldr	r3, [pc, #472]	; (4043a4 <letraR+0x2c4>)
  4041cc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4041ce:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4041d2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4041d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4041da:	4618      	mov	r0, r3
  4041dc:	4b71      	ldr	r3, [pc, #452]	; (4043a4 <letraR+0x2c4>)
  4041de:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4041e0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4041e4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4041e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4041ec:	4618      	mov	r0, r3
  4041ee:	4b6d      	ldr	r3, [pc, #436]	; (4043a4 <letraR+0x2c4>)
  4041f0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4041f2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4041f6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4041fe:	4618      	mov	r0, r3
  404200:	4b68      	ldr	r3, [pc, #416]	; (4043a4 <letraR+0x2c4>)
  404202:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404204:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404208:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40420c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404210:	4618      	mov	r0, r3
  404212:	4b64      	ldr	r3, [pc, #400]	; (4043a4 <letraR+0x2c4>)
  404214:	4798      	blx	r3
	
	
	
	colorBLACK();
  404216:	4b62      	ldr	r3, [pc, #392]	; (4043a0 <letraR+0x2c0>)
  404218:	4798      	blx	r3
	colorBLACK();
  40421a:	4b61      	ldr	r3, [pc, #388]	; (4043a0 <letraR+0x2c0>)
  40421c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40421e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404222:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404226:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40422a:	4618      	mov	r0, r3
  40422c:	4b5d      	ldr	r3, [pc, #372]	; (4043a4 <letraR+0x2c4>)
  40422e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404230:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404234:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404238:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40423c:	4618      	mov	r0, r3
  40423e:	4b59      	ldr	r3, [pc, #356]	; (4043a4 <letraR+0x2c4>)
  404240:	4798      	blx	r3
	colorBLACK();
  404242:	4b57      	ldr	r3, [pc, #348]	; (4043a0 <letraR+0x2c0>)
  404244:	4798      	blx	r3
	colorBLACK();
  404246:	4b56      	ldr	r3, [pc, #344]	; (4043a0 <letraR+0x2c0>)
  404248:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40424a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40424e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404252:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404256:	4618      	mov	r0, r3
  404258:	4b52      	ldr	r3, [pc, #328]	; (4043a4 <letraR+0x2c4>)
  40425a:	4798      	blx	r3
	colorBLACK();
  40425c:	4b50      	ldr	r3, [pc, #320]	; (4043a0 <letraR+0x2c0>)
  40425e:	4798      	blx	r3
	
	colorBLACK();
  404260:	4b4f      	ldr	r3, [pc, #316]	; (4043a0 <letraR+0x2c0>)
  404262:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404264:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404268:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40426c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404270:	4618      	mov	r0, r3
  404272:	4b4c      	ldr	r3, [pc, #304]	; (4043a4 <letraR+0x2c4>)
  404274:	4798      	blx	r3
	colorBLACK();
  404276:	4b4a      	ldr	r3, [pc, #296]	; (4043a0 <letraR+0x2c0>)
  404278:	4798      	blx	r3
	colorBLACK();
  40427a:	4b49      	ldr	r3, [pc, #292]	; (4043a0 <letraR+0x2c0>)
  40427c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40427e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404282:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404286:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40428a:	4618      	mov	r0, r3
  40428c:	4b45      	ldr	r3, [pc, #276]	; (4043a4 <letraR+0x2c4>)
  40428e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404290:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404294:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404298:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40429c:	4618      	mov	r0, r3
  40429e:	4b41      	ldr	r3, [pc, #260]	; (4043a4 <letraR+0x2c4>)
  4042a0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4042a2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4042a6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4042aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4042ae:	4618      	mov	r0, r3
  4042b0:	4b3c      	ldr	r3, [pc, #240]	; (4043a4 <letraR+0x2c4>)
  4042b2:	4798      	blx	r3
	colorBLACK();
  4042b4:	4b3a      	ldr	r3, [pc, #232]	; (4043a0 <letraR+0x2c0>)
  4042b6:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  4042b8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4042bc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4042c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4042c4:	4618      	mov	r0, r3
  4042c6:	4b37      	ldr	r3, [pc, #220]	; (4043a4 <letraR+0x2c4>)
  4042c8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4042ca:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4042ce:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4042d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4042d6:	4618      	mov	r0, r3
  4042d8:	4b32      	ldr	r3, [pc, #200]	; (4043a4 <letraR+0x2c4>)
  4042da:	4798      	blx	r3
	colorBLACK();
  4042dc:	4b30      	ldr	r3, [pc, #192]	; (4043a0 <letraR+0x2c0>)
  4042de:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4042e0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4042e4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4042e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4042ec:	4618      	mov	r0, r3
  4042ee:	4b2d      	ldr	r3, [pc, #180]	; (4043a4 <letraR+0x2c4>)
  4042f0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4042f2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4042f6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4042fe:	4618      	mov	r0, r3
  404300:	4b28      	ldr	r3, [pc, #160]	; (4043a4 <letraR+0x2c4>)
  404302:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404304:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404308:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40430c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404310:	4618      	mov	r0, r3
  404312:	4b24      	ldr	r3, [pc, #144]	; (4043a4 <letraR+0x2c4>)
  404314:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404316:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40431a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404322:	4618      	mov	r0, r3
  404324:	4b1f      	ldr	r3, [pc, #124]	; (4043a4 <letraR+0x2c4>)
  404326:	4798      	blx	r3
	colorBLACK();
  404328:	4b1d      	ldr	r3, [pc, #116]	; (4043a0 <letraR+0x2c0>)
  40432a:	4798      	blx	r3

	
	
	colorBLACK();
  40432c:	4b1c      	ldr	r3, [pc, #112]	; (4043a0 <letraR+0x2c0>)
  40432e:	4798      	blx	r3
	colorBLACK();
  404330:	4b1b      	ldr	r3, [pc, #108]	; (4043a0 <letraR+0x2c0>)
  404332:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404334:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404338:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40433c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404340:	4618      	mov	r0, r3
  404342:	4b18      	ldr	r3, [pc, #96]	; (4043a4 <letraR+0x2c4>)
  404344:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404346:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40434a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404352:	4618      	mov	r0, r3
  404354:	4b13      	ldr	r3, [pc, #76]	; (4043a4 <letraR+0x2c4>)
  404356:	4798      	blx	r3
	colorBLACK();
  404358:	4b11      	ldr	r3, [pc, #68]	; (4043a0 <letraR+0x2c0>)
  40435a:	4798      	blx	r3
	colorBLACK();
  40435c:	4b10      	ldr	r3, [pc, #64]	; (4043a0 <letraR+0x2c0>)
  40435e:	4798      	blx	r3
	colorBLACK();
  404360:	4b0f      	ldr	r3, [pc, #60]	; (4043a0 <letraR+0x2c0>)
  404362:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404364:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404368:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40436c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404370:	4618      	mov	r0, r3
  404372:	4b0c      	ldr	r3, [pc, #48]	; (4043a4 <letraR+0x2c4>)
  404374:	4798      	blx	r3
	
	colorBLACK();
  404376:	4b0a      	ldr	r3, [pc, #40]	; (4043a0 <letraR+0x2c0>)
  404378:	4798      	blx	r3
	colorBLACK();
  40437a:	4b09      	ldr	r3, [pc, #36]	; (4043a0 <letraR+0x2c0>)
  40437c:	4798      	blx	r3
	colorBLACK();
  40437e:	4b08      	ldr	r3, [pc, #32]	; (4043a0 <letraR+0x2c0>)
  404380:	4798      	blx	r3
	colorBLACK();
  404382:	4b07      	ldr	r3, [pc, #28]	; (4043a0 <letraR+0x2c0>)
  404384:	4798      	blx	r3
	colorBLACK();
  404386:	4b06      	ldr	r3, [pc, #24]	; (4043a0 <letraR+0x2c0>)
  404388:	4798      	blx	r3
	colorBLACK();
  40438a:	4b05      	ldr	r3, [pc, #20]	; (4043a0 <letraR+0x2c0>)
  40438c:	4798      	blx	r3
	colorBLACK();
  40438e:	4b04      	ldr	r3, [pc, #16]	; (4043a0 <letraR+0x2c0>)
  404390:	4798      	blx	r3
	colorBLACK();
  404392:	4b03      	ldr	r3, [pc, #12]	; (4043a0 <letraR+0x2c0>)
  404394:	4798      	blx	r3
}	
  404396:	bf00      	nop
  404398:	3708      	adds	r7, #8
  40439a:	46bd      	mov	sp, r7
  40439c:	bd80      	pop	{r7, pc}
  40439e:	bf00      	nop
  4043a0:	004013bd 	.word	0x004013bd
  4043a4:	00401411 	.word	0x00401411

004043a8 <letraS>:
	
	
	
void letraS(int8_t red, int8_t green, int8_t blue){
  4043a8:	b580      	push	{r7, lr}
  4043aa:	b082      	sub	sp, #8
  4043ac:	af00      	add	r7, sp, #0
  4043ae:	4603      	mov	r3, r0
  4043b0:	71fb      	strb	r3, [r7, #7]
  4043b2:	460b      	mov	r3, r1
  4043b4:	71bb      	strb	r3, [r7, #6]
  4043b6:	4613      	mov	r3, r2
  4043b8:	717b      	strb	r3, [r7, #5]
	//S
	
	colorBLACK();
  4043ba:	4b96      	ldr	r3, [pc, #600]	; (404614 <letraS+0x26c>)
  4043bc:	4798      	blx	r3
	colorBLACK();
  4043be:	4b95      	ldr	r3, [pc, #596]	; (404614 <letraS+0x26c>)
  4043c0:	4798      	blx	r3
	colorBLACK();
  4043c2:	4b94      	ldr	r3, [pc, #592]	; (404614 <letraS+0x26c>)
  4043c4:	4798      	blx	r3
	colorBLACK();
  4043c6:	4b93      	ldr	r3, [pc, #588]	; (404614 <letraS+0x26c>)
  4043c8:	4798      	blx	r3
	colorBLACK();
  4043ca:	4b92      	ldr	r3, [pc, #584]	; (404614 <letraS+0x26c>)
  4043cc:	4798      	blx	r3
	colorBLACK();
  4043ce:	4b91      	ldr	r3, [pc, #580]	; (404614 <letraS+0x26c>)
  4043d0:	4798      	blx	r3
	colorBLACK();
  4043d2:	4b90      	ldr	r3, [pc, #576]	; (404614 <letraS+0x26c>)
  4043d4:	4798      	blx	r3
	colorBLACK();
  4043d6:	4b8f      	ldr	r3, [pc, #572]	; (404614 <letraS+0x26c>)
  4043d8:	4798      	blx	r3
	
	
	colorBLACK();
  4043da:	4b8e      	ldr	r3, [pc, #568]	; (404614 <letraS+0x26c>)
  4043dc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4043de:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4043e2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4043ea:	4618      	mov	r0, r3
  4043ec:	4b8a      	ldr	r3, [pc, #552]	; (404618 <letraS+0x270>)
  4043ee:	4798      	blx	r3
	colorBLACK();
  4043f0:	4b88      	ldr	r3, [pc, #544]	; (404614 <letraS+0x26c>)
  4043f2:	4798      	blx	r3
	colorBLACK();
  4043f4:	4b87      	ldr	r3, [pc, #540]	; (404614 <letraS+0x26c>)
  4043f6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4043f8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4043fc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404400:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404404:	4618      	mov	r0, r3
  404406:	4b84      	ldr	r3, [pc, #528]	; (404618 <letraS+0x270>)
  404408:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40440a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40440e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404412:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404416:	4618      	mov	r0, r3
  404418:	4b7f      	ldr	r3, [pc, #508]	; (404618 <letraS+0x270>)
  40441a:	4798      	blx	r3
	colorBLACK();
  40441c:	4b7d      	ldr	r3, [pc, #500]	; (404614 <letraS+0x26c>)
  40441e:	4798      	blx	r3
	colorBLACK();
  404420:	4b7c      	ldr	r3, [pc, #496]	; (404614 <letraS+0x26c>)
  404422:	4798      	blx	r3
	
	colorBLACK();
  404424:	4b7b      	ldr	r3, [pc, #492]	; (404614 <letraS+0x26c>)
  404426:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404428:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40442c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404430:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404434:	4618      	mov	r0, r3
  404436:	4b78      	ldr	r3, [pc, #480]	; (404618 <letraS+0x270>)
  404438:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40443a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40443e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404442:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404446:	4618      	mov	r0, r3
  404448:	4b73      	ldr	r3, [pc, #460]	; (404618 <letraS+0x270>)
  40444a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40444c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404450:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404454:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404458:	4618      	mov	r0, r3
  40445a:	4b6f      	ldr	r3, [pc, #444]	; (404618 <letraS+0x270>)
  40445c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40445e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404462:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404466:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40446a:	4618      	mov	r0, r3
  40446c:	4b6a      	ldr	r3, [pc, #424]	; (404618 <letraS+0x270>)
  40446e:	4798      	blx	r3
	colorBLACK();
  404470:	4b68      	ldr	r3, [pc, #416]	; (404614 <letraS+0x26c>)
  404472:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404474:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404478:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40447c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404480:	4618      	mov	r0, r3
  404482:	4b65      	ldr	r3, [pc, #404]	; (404618 <letraS+0x270>)
  404484:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404486:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40448a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40448e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404492:	4618      	mov	r0, r3
  404494:	4b60      	ldr	r3, [pc, #384]	; (404618 <letraS+0x270>)
  404496:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  404498:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40449c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4044a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4044a4:	4618      	mov	r0, r3
  4044a6:	4b5c      	ldr	r3, [pc, #368]	; (404618 <letraS+0x270>)
  4044a8:	4798      	blx	r3
	colorBLACK();
  4044aa:	4b5a      	ldr	r3, [pc, #360]	; (404614 <letraS+0x26c>)
  4044ac:	4798      	blx	r3
	colorBLACK();
  4044ae:	4b59      	ldr	r3, [pc, #356]	; (404614 <letraS+0x26c>)
  4044b0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4044b2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4044b6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4044ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4044be:	4618      	mov	r0, r3
  4044c0:	4b55      	ldr	r3, [pc, #340]	; (404618 <letraS+0x270>)
  4044c2:	4798      	blx	r3
	colorBLACK();
  4044c4:	4b53      	ldr	r3, [pc, #332]	; (404614 <letraS+0x26c>)
  4044c6:	4798      	blx	r3
	colorBLACK();
  4044c8:	4b52      	ldr	r3, [pc, #328]	; (404614 <letraS+0x26c>)
  4044ca:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4044cc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4044d0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4044d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4044d8:	4618      	mov	r0, r3
  4044da:	4b4f      	ldr	r3, [pc, #316]	; (404618 <letraS+0x270>)
  4044dc:	4798      	blx	r3
	colorBLACK();
  4044de:	4b4d      	ldr	r3, [pc, #308]	; (404614 <letraS+0x26c>)
  4044e0:	4798      	blx	r3
	
	colorBLACK();
  4044e2:	4b4c      	ldr	r3, [pc, #304]	; (404614 <letraS+0x26c>)
  4044e4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4044e6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4044ea:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4044f2:	4618      	mov	r0, r3
  4044f4:	4b48      	ldr	r3, [pc, #288]	; (404618 <letraS+0x270>)
  4044f6:	4798      	blx	r3
	colorBLACK();
  4044f8:	4b46      	ldr	r3, [pc, #280]	; (404614 <letraS+0x26c>)
  4044fa:	4798      	blx	r3
	colorBLACK();
  4044fc:	4b45      	ldr	r3, [pc, #276]	; (404614 <letraS+0x26c>)
  4044fe:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404500:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404504:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404508:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40450c:	4618      	mov	r0, r3
  40450e:	4b42      	ldr	r3, [pc, #264]	; (404618 <letraS+0x270>)
  404510:	4798      	blx	r3
	colorBLACK();
  404512:	4b40      	ldr	r3, [pc, #256]	; (404614 <letraS+0x26c>)
  404514:	4798      	blx	r3
	colorBLACK();
  404516:	4b3f      	ldr	r3, [pc, #252]	; (404614 <letraS+0x26c>)
  404518:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40451a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40451e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404522:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404526:	4618      	mov	r0, r3
  404528:	4b3b      	ldr	r3, [pc, #236]	; (404618 <letraS+0x270>)
  40452a:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  40452c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404530:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404534:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404538:	4618      	mov	r0, r3
  40453a:	4b37      	ldr	r3, [pc, #220]	; (404618 <letraS+0x270>)
  40453c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40453e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404542:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404546:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40454a:	4618      	mov	r0, r3
  40454c:	4b32      	ldr	r3, [pc, #200]	; (404618 <letraS+0x270>)
  40454e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404550:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404554:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404558:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40455c:	4618      	mov	r0, r3
  40455e:	4b2e      	ldr	r3, [pc, #184]	; (404618 <letraS+0x270>)
  404560:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404562:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404566:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40456a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40456e:	4618      	mov	r0, r3
  404570:	4b29      	ldr	r3, [pc, #164]	; (404618 <letraS+0x270>)
  404572:	4798      	blx	r3
	colorBLACK();
  404574:	4b27      	ldr	r3, [pc, #156]	; (404614 <letraS+0x26c>)
  404576:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404578:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40457c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404580:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404584:	4618      	mov	r0, r3
  404586:	4b24      	ldr	r3, [pc, #144]	; (404618 <letraS+0x270>)
  404588:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40458a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40458e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404592:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404596:	4618      	mov	r0, r3
  404598:	4b1f      	ldr	r3, [pc, #124]	; (404618 <letraS+0x270>)
  40459a:	4798      	blx	r3
	colorBLACK();
  40459c:	4b1d      	ldr	r3, [pc, #116]	; (404614 <letraS+0x26c>)
  40459e:	4798      	blx	r3

	
	colorBLACK();
  4045a0:	4b1c      	ldr	r3, [pc, #112]	; (404614 <letraS+0x26c>)
  4045a2:	4798      	blx	r3
	colorBLACK();
  4045a4:	4b1b      	ldr	r3, [pc, #108]	; (404614 <letraS+0x26c>)
  4045a6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4045a8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4045ac:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4045b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4045b4:	4618      	mov	r0, r3
  4045b6:	4b18      	ldr	r3, [pc, #96]	; (404618 <letraS+0x270>)
  4045b8:	4798      	blx	r3
	colorBLACK();
  4045ba:	4b16      	ldr	r3, [pc, #88]	; (404614 <letraS+0x26c>)
  4045bc:	4798      	blx	r3
	colorBLACK();
  4045be:	4b15      	ldr	r3, [pc, #84]	; (404614 <letraS+0x26c>)
  4045c0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4045c2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4045c6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4045ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4045ce:	4618      	mov	r0, r3
  4045d0:	4b11      	ldr	r3, [pc, #68]	; (404618 <letraS+0x270>)
  4045d2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4045d4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4045d8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4045dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4045e0:	4618      	mov	r0, r3
  4045e2:	4b0d      	ldr	r3, [pc, #52]	; (404618 <letraS+0x270>)
  4045e4:	4798      	blx	r3
	colorBLACK();
  4045e6:	4b0b      	ldr	r3, [pc, #44]	; (404614 <letraS+0x26c>)
  4045e8:	4798      	blx	r3
	
	colorBLACK();
  4045ea:	4b0a      	ldr	r3, [pc, #40]	; (404614 <letraS+0x26c>)
  4045ec:	4798      	blx	r3
	colorBLACK();
  4045ee:	4b09      	ldr	r3, [pc, #36]	; (404614 <letraS+0x26c>)
  4045f0:	4798      	blx	r3
	colorBLACK();
  4045f2:	4b08      	ldr	r3, [pc, #32]	; (404614 <letraS+0x26c>)
  4045f4:	4798      	blx	r3
	colorBLACK();
  4045f6:	4b07      	ldr	r3, [pc, #28]	; (404614 <letraS+0x26c>)
  4045f8:	4798      	blx	r3
	colorBLACK();
  4045fa:	4b06      	ldr	r3, [pc, #24]	; (404614 <letraS+0x26c>)
  4045fc:	4798      	blx	r3
	colorBLACK();
  4045fe:	4b05      	ldr	r3, [pc, #20]	; (404614 <letraS+0x26c>)
  404600:	4798      	blx	r3
	colorBLACK();
  404602:	4b04      	ldr	r3, [pc, #16]	; (404614 <letraS+0x26c>)
  404604:	4798      	blx	r3
	colorBLACK();
  404606:	4b03      	ldr	r3, [pc, #12]	; (404614 <letraS+0x26c>)
  404608:	4798      	blx	r3
}
  40460a:	bf00      	nop
  40460c:	3708      	adds	r7, #8
  40460e:	46bd      	mov	sp, r7
  404610:	bd80      	pop	{r7, pc}
  404612:	bf00      	nop
  404614:	004013bd 	.word	0x004013bd
  404618:	00401411 	.word	0x00401411

0040461c <letraT>:
	
	
	
void letraT(int8_t red, int8_t green, int8_t blue){
  40461c:	b580      	push	{r7, lr}
  40461e:	b082      	sub	sp, #8
  404620:	af00      	add	r7, sp, #0
  404622:	4603      	mov	r3, r0
  404624:	71fb      	strb	r3, [r7, #7]
  404626:	460b      	mov	r3, r1
  404628:	71bb      	strb	r3, [r7, #6]
  40462a:	4613      	mov	r3, r2
  40462c:	717b      	strb	r3, [r7, #5]
	//T
	
	colorBLACK();
  40462e:	4b88      	ldr	r3, [pc, #544]	; (404850 <letraT+0x234>)
  404630:	4798      	blx	r3
	colorBLACK();
  404632:	4b87      	ldr	r3, [pc, #540]	; (404850 <letraT+0x234>)
  404634:	4798      	blx	r3
	colorBLACK();
  404636:	4b86      	ldr	r3, [pc, #536]	; (404850 <letraT+0x234>)
  404638:	4798      	blx	r3
	colorBLACK();
  40463a:	4b85      	ldr	r3, [pc, #532]	; (404850 <letraT+0x234>)
  40463c:	4798      	blx	r3
	colorBLACK();
  40463e:	4b84      	ldr	r3, [pc, #528]	; (404850 <letraT+0x234>)
  404640:	4798      	blx	r3
	colorBLACK();
  404642:	4b83      	ldr	r3, [pc, #524]	; (404850 <letraT+0x234>)
  404644:	4798      	blx	r3
	colorBLACK();
  404646:	4b82      	ldr	r3, [pc, #520]	; (404850 <letraT+0x234>)
  404648:	4798      	blx	r3
	colorBLACK();
  40464a:	4b81      	ldr	r3, [pc, #516]	; (404850 <letraT+0x234>)
  40464c:	4798      	blx	r3
	
	
	colorBLACK();
  40464e:	4b80      	ldr	r3, [pc, #512]	; (404850 <letraT+0x234>)
  404650:	4798      	blx	r3
	colorBLACK();
  404652:	4b7f      	ldr	r3, [pc, #508]	; (404850 <letraT+0x234>)
  404654:	4798      	blx	r3
	colorBLACK();
  404656:	4b7e      	ldr	r3, [pc, #504]	; (404850 <letraT+0x234>)
  404658:	4798      	blx	r3
	colorBLACK();
  40465a:	4b7d      	ldr	r3, [pc, #500]	; (404850 <letraT+0x234>)
  40465c:	4798      	blx	r3
	colorBLACK();
  40465e:	4b7c      	ldr	r3, [pc, #496]	; (404850 <letraT+0x234>)
  404660:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404662:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404666:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40466a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40466e:	4618      	mov	r0, r3
  404670:	4b78      	ldr	r3, [pc, #480]	; (404854 <letraT+0x238>)
  404672:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404674:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404678:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40467c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404680:	4618      	mov	r0, r3
  404682:	4b74      	ldr	r3, [pc, #464]	; (404854 <letraT+0x238>)
  404684:	4798      	blx	r3
	colorBLACK();
  404686:	4b72      	ldr	r3, [pc, #456]	; (404850 <letraT+0x234>)
  404688:	4798      	blx	r3
	
	colorBLACK();
  40468a:	4b71      	ldr	r3, [pc, #452]	; (404850 <letraT+0x234>)
  40468c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40468e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404692:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404696:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40469a:	4618      	mov	r0, r3
  40469c:	4b6d      	ldr	r3, [pc, #436]	; (404854 <letraT+0x238>)
  40469e:	4798      	blx	r3
	colorBLACK();
  4046a0:	4b6b      	ldr	r3, [pc, #428]	; (404850 <letraT+0x234>)
  4046a2:	4798      	blx	r3
	colorBLACK();
  4046a4:	4b6a      	ldr	r3, [pc, #424]	; (404850 <letraT+0x234>)
  4046a6:	4798      	blx	r3
	colorBLACK();
  4046a8:	4b69      	ldr	r3, [pc, #420]	; (404850 <letraT+0x234>)
  4046aa:	4798      	blx	r3
	colorBLACK();
  4046ac:	4b68      	ldr	r3, [pc, #416]	; (404850 <letraT+0x234>)
  4046ae:	4798      	blx	r3
	colorBLACK();
  4046b0:	4b67      	ldr	r3, [pc, #412]	; (404850 <letraT+0x234>)
  4046b2:	4798      	blx	r3
	colorBLACK();;
  4046b4:	4b66      	ldr	r3, [pc, #408]	; (404850 <letraT+0x234>)
  4046b6:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  4046b8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4046bc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4046c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4046c4:	4618      	mov	r0, r3
  4046c6:	4b63      	ldr	r3, [pc, #396]	; (404854 <letraT+0x238>)
  4046c8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4046ca:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4046ce:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4046d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4046d6:	4618      	mov	r0, r3
  4046d8:	4b5e      	ldr	r3, [pc, #376]	; (404854 <letraT+0x238>)
  4046da:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4046dc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4046e0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4046e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4046e8:	4618      	mov	r0, r3
  4046ea:	4b5a      	ldr	r3, [pc, #360]	; (404854 <letraT+0x238>)
  4046ec:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4046ee:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4046f2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4046f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4046fa:	4618      	mov	r0, r3
  4046fc:	4b55      	ldr	r3, [pc, #340]	; (404854 <letraT+0x238>)
  4046fe:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404700:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404704:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404708:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40470c:	4618      	mov	r0, r3
  40470e:	4b51      	ldr	r3, [pc, #324]	; (404854 <letraT+0x238>)
  404710:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404712:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404716:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40471a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40471e:	4618      	mov	r0, r3
  404720:	4b4c      	ldr	r3, [pc, #304]	; (404854 <letraT+0x238>)
  404722:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404724:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404728:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40472c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404730:	4618      	mov	r0, r3
  404732:	4b48      	ldr	r3, [pc, #288]	; (404854 <letraT+0x238>)
  404734:	4798      	blx	r3
	colorBLACK();
  404736:	4b46      	ldr	r3, [pc, #280]	; (404850 <letraT+0x234>)
  404738:	4798      	blx	r3
	
	colorBLACK();
  40473a:	4b45      	ldr	r3, [pc, #276]	; (404850 <letraT+0x234>)
  40473c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40473e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404742:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404746:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40474a:	4618      	mov	r0, r3
  40474c:	4b41      	ldr	r3, [pc, #260]	; (404854 <letraT+0x238>)
  40474e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404750:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404754:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404758:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40475c:	4618      	mov	r0, r3
  40475e:	4b3d      	ldr	r3, [pc, #244]	; (404854 <letraT+0x238>)
  404760:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404762:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404766:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40476a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40476e:	4618      	mov	r0, r3
  404770:	4b38      	ldr	r3, [pc, #224]	; (404854 <letraT+0x238>)
  404772:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404774:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404778:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40477c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404780:	4618      	mov	r0, r3
  404782:	4b34      	ldr	r3, [pc, #208]	; (404854 <letraT+0x238>)
  404784:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404786:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40478a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40478e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404792:	4618      	mov	r0, r3
  404794:	4b2f      	ldr	r3, [pc, #188]	; (404854 <letraT+0x238>)
  404796:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404798:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40479c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4047a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4047a4:	4618      	mov	r0, r3
  4047a6:	4b2b      	ldr	r3, [pc, #172]	; (404854 <letraT+0x238>)
  4047a8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4047aa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4047ae:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4047b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4047b6:	4618      	mov	r0, r3
  4047b8:	4b26      	ldr	r3, [pc, #152]	; (404854 <letraT+0x238>)
  4047ba:	4798      	blx	r3
	
	
	colorBLACK();
  4047bc:	4b24      	ldr	r3, [pc, #144]	; (404850 <letraT+0x234>)
  4047be:	4798      	blx	r3
	colorBLACK();
  4047c0:	4b23      	ldr	r3, [pc, #140]	; (404850 <letraT+0x234>)
  4047c2:	4798      	blx	r3
	colorBLACK();
  4047c4:	4b22      	ldr	r3, [pc, #136]	; (404850 <letraT+0x234>)
  4047c6:	4798      	blx	r3
	colorBLACK();
  4047c8:	4b21      	ldr	r3, [pc, #132]	; (404850 <letraT+0x234>)
  4047ca:	4798      	blx	r3
	colorBLACK();
  4047cc:	4b20      	ldr	r3, [pc, #128]	; (404850 <letraT+0x234>)
  4047ce:	4798      	blx	r3
	colorBLACK();
  4047d0:	4b1f      	ldr	r3, [pc, #124]	; (404850 <letraT+0x234>)
  4047d2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4047d4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4047d8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4047dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4047e0:	4618      	mov	r0, r3
  4047e2:	4b1c      	ldr	r3, [pc, #112]	; (404854 <letraT+0x238>)
  4047e4:	4798      	blx	r3
	colorBLACK();
  4047e6:	4b1a      	ldr	r3, [pc, #104]	; (404850 <letraT+0x234>)
  4047e8:	4798      	blx	r3

	
	colorBLACK();
  4047ea:	4b19      	ldr	r3, [pc, #100]	; (404850 <letraT+0x234>)
  4047ec:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4047ee:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4047f2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4047fa:	4618      	mov	r0, r3
  4047fc:	4b15      	ldr	r3, [pc, #84]	; (404854 <letraT+0x238>)
  4047fe:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404800:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404804:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404808:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40480c:	4618      	mov	r0, r3
  40480e:	4b11      	ldr	r3, [pc, #68]	; (404854 <letraT+0x238>)
  404810:	4798      	blx	r3
	colorBLACK();
  404812:	4b0f      	ldr	r3, [pc, #60]	; (404850 <letraT+0x234>)
  404814:	4798      	blx	r3
	colorBLACK();
  404816:	4b0e      	ldr	r3, [pc, #56]	; (404850 <letraT+0x234>)
  404818:	4798      	blx	r3
	colorBLACK();
  40481a:	4b0d      	ldr	r3, [pc, #52]	; (404850 <letraT+0x234>)
  40481c:	4798      	blx	r3
	colorBLACK();
  40481e:	4b0c      	ldr	r3, [pc, #48]	; (404850 <letraT+0x234>)
  404820:	4798      	blx	r3
	colorBLACK();
  404822:	4b0b      	ldr	r3, [pc, #44]	; (404850 <letraT+0x234>)
  404824:	4798      	blx	r3
	
	colorBLACK();
  404826:	4b0a      	ldr	r3, [pc, #40]	; (404850 <letraT+0x234>)
  404828:	4798      	blx	r3
	colorBLACK();
  40482a:	4b09      	ldr	r3, [pc, #36]	; (404850 <letraT+0x234>)
  40482c:	4798      	blx	r3
	colorBLACK();
  40482e:	4b08      	ldr	r3, [pc, #32]	; (404850 <letraT+0x234>)
  404830:	4798      	blx	r3
	colorBLACK();
  404832:	4b07      	ldr	r3, [pc, #28]	; (404850 <letraT+0x234>)
  404834:	4798      	blx	r3
	colorBLACK();
  404836:	4b06      	ldr	r3, [pc, #24]	; (404850 <letraT+0x234>)
  404838:	4798      	blx	r3
	colorBLACK();
  40483a:	4b05      	ldr	r3, [pc, #20]	; (404850 <letraT+0x234>)
  40483c:	4798      	blx	r3
	colorBLACK();
  40483e:	4b04      	ldr	r3, [pc, #16]	; (404850 <letraT+0x234>)
  404840:	4798      	blx	r3
	colorBLACK();
  404842:	4b03      	ldr	r3, [pc, #12]	; (404850 <letraT+0x234>)
  404844:	4798      	blx	r3
}
  404846:	bf00      	nop
  404848:	3708      	adds	r7, #8
  40484a:	46bd      	mov	sp, r7
  40484c:	bd80      	pop	{r7, pc}
  40484e:	bf00      	nop
  404850:	004013bd 	.word	0x004013bd
  404854:	00401411 	.word	0x00401411

00404858 <letraU>:
	
	
	
void letraU(int8_t red, int8_t green, int8_t blue){
  404858:	b580      	push	{r7, lr}
  40485a:	b082      	sub	sp, #8
  40485c:	af00      	add	r7, sp, #0
  40485e:	4603      	mov	r3, r0
  404860:	71fb      	strb	r3, [r7, #7]
  404862:	460b      	mov	r3, r1
  404864:	71bb      	strb	r3, [r7, #6]
  404866:	4613      	mov	r3, r2
  404868:	717b      	strb	r3, [r7, #5]
		//U
		colorBLACK();
  40486a:	4ba7      	ldr	r3, [pc, #668]	; (404b08 <letraU+0x2b0>)
  40486c:	4798      	blx	r3
		colorBLACK();
  40486e:	4ba6      	ldr	r3, [pc, #664]	; (404b08 <letraU+0x2b0>)
  404870:	4798      	blx	r3
		colorBLACK();
  404872:	4ba5      	ldr	r3, [pc, #660]	; (404b08 <letraU+0x2b0>)
  404874:	4798      	blx	r3
		colorBLACK();
  404876:	4ba4      	ldr	r3, [pc, #656]	; (404b08 <letraU+0x2b0>)
  404878:	4798      	blx	r3
		colorBLACK();
  40487a:	4ba3      	ldr	r3, [pc, #652]	; (404b08 <letraU+0x2b0>)
  40487c:	4798      	blx	r3
		colorBLACK();
  40487e:	4ba2      	ldr	r3, [pc, #648]	; (404b08 <letraU+0x2b0>)
  404880:	4798      	blx	r3
		colorBLACK();
  404882:	4ba1      	ldr	r3, [pc, #644]	; (404b08 <letraU+0x2b0>)
  404884:	4798      	blx	r3
		colorBLACK();
  404886:	4ba0      	ldr	r3, [pc, #640]	; (404b08 <letraU+0x2b0>)
  404888:	4798      	blx	r3
		
		
		colorBLACK();
  40488a:	4b9f      	ldr	r3, [pc, #636]	; (404b08 <letraU+0x2b0>)
  40488c:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  40488e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404892:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404896:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40489a:	4618      	mov	r0, r3
  40489c:	4b9b      	ldr	r3, [pc, #620]	; (404b0c <letraU+0x2b4>)
  40489e:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  4048a0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4048a4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4048a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4048ac:	4618      	mov	r0, r3
  4048ae:	4b97      	ldr	r3, [pc, #604]	; (404b0c <letraU+0x2b4>)
  4048b0:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  4048b2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4048b6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4048ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4048be:	4618      	mov	r0, r3
  4048c0:	4b92      	ldr	r3, [pc, #584]	; (404b0c <letraU+0x2b4>)
  4048c2:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  4048c4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4048c8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4048cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4048d0:	4618      	mov	r0, r3
  4048d2:	4b8e      	ldr	r3, [pc, #568]	; (404b0c <letraU+0x2b4>)
  4048d4:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  4048d6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4048da:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4048de:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4048e2:	4618      	mov	r0, r3
  4048e4:	4b89      	ldr	r3, [pc, #548]	; (404b0c <letraU+0x2b4>)
  4048e6:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  4048e8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4048ec:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4048f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4048f4:	4618      	mov	r0, r3
  4048f6:	4b85      	ldr	r3, [pc, #532]	; (404b0c <letraU+0x2b4>)
  4048f8:	4798      	blx	r3
		colorBLACK();
  4048fa:	4b83      	ldr	r3, [pc, #524]	; (404b08 <letraU+0x2b0>)
  4048fc:	4798      	blx	r3
		
		colorBLACK();
  4048fe:	4b82      	ldr	r3, [pc, #520]	; (404b08 <letraU+0x2b0>)
  404900:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  404902:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404906:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40490a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40490e:	4618      	mov	r0, r3
  404910:	4b7e      	ldr	r3, [pc, #504]	; (404b0c <letraU+0x2b4>)
  404912:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  404914:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404918:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40491c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404920:	4618      	mov	r0, r3
  404922:	4b7a      	ldr	r3, [pc, #488]	; (404b0c <letraU+0x2b4>)
  404924:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  404926:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40492a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40492e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404932:	4618      	mov	r0, r3
  404934:	4b75      	ldr	r3, [pc, #468]	; (404b0c <letraU+0x2b4>)
  404936:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  404938:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40493c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404940:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404944:	4618      	mov	r0, r3
  404946:	4b71      	ldr	r3, [pc, #452]	; (404b0c <letraU+0x2b4>)
  404948:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  40494a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40494e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404952:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404956:	4618      	mov	r0, r3
  404958:	4b6c      	ldr	r3, [pc, #432]	; (404b0c <letraU+0x2b4>)
  40495a:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  40495c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404960:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404964:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404968:	4618      	mov	r0, r3
  40496a:	4b68      	ldr	r3, [pc, #416]	; (404b0c <letraU+0x2b4>)
  40496c:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  40496e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404972:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404976:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40497a:	4618      	mov	r0, r3
  40497c:	4b63      	ldr	r3, [pc, #396]	; (404b0c <letraU+0x2b4>)
  40497e:	4798      	blx	r3
		
		
		colorDEFINE(red,green,blue);
  404980:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404984:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404988:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40498c:	4618      	mov	r0, r3
  40498e:	4b5f      	ldr	r3, [pc, #380]	; (404b0c <letraU+0x2b4>)
  404990:	4798      	blx	r3
		colorBLACK();
  404992:	4b5d      	ldr	r3, [pc, #372]	; (404b08 <letraU+0x2b0>)
  404994:	4798      	blx	r3
		colorBLACK();
  404996:	4b5c      	ldr	r3, [pc, #368]	; (404b08 <letraU+0x2b0>)
  404998:	4798      	blx	r3
		colorBLACK();
  40499a:	4b5b      	ldr	r3, [pc, #364]	; (404b08 <letraU+0x2b0>)
  40499c:	4798      	blx	r3
		colorBLACK();
  40499e:	4b5a      	ldr	r3, [pc, #360]	; (404b08 <letraU+0x2b0>)
  4049a0:	4798      	blx	r3
		colorBLACK();
  4049a2:	4b59      	ldr	r3, [pc, #356]	; (404b08 <letraU+0x2b0>)
  4049a4:	4798      	blx	r3
		colorBLACK();
  4049a6:	4b58      	ldr	r3, [pc, #352]	; (404b08 <letraU+0x2b0>)
  4049a8:	4798      	blx	r3
		colorBLACK();
  4049aa:	4b57      	ldr	r3, [pc, #348]	; (404b08 <letraU+0x2b0>)
  4049ac:	4798      	blx	r3
		
		
		colorBLACK();
  4049ae:	4b56      	ldr	r3, [pc, #344]	; (404b08 <letraU+0x2b0>)
  4049b0:	4798      	blx	r3
		colorBLACK();
  4049b2:	4b55      	ldr	r3, [pc, #340]	; (404b08 <letraU+0x2b0>)
  4049b4:	4798      	blx	r3
		colorBLACK();
  4049b6:	4b54      	ldr	r3, [pc, #336]	; (404b08 <letraU+0x2b0>)
  4049b8:	4798      	blx	r3
		colorBLACK();
  4049ba:	4b53      	ldr	r3, [pc, #332]	; (404b08 <letraU+0x2b0>)
  4049bc:	4798      	blx	r3
		colorBLACK();
  4049be:	4b52      	ldr	r3, [pc, #328]	; (404b08 <letraU+0x2b0>)
  4049c0:	4798      	blx	r3
		colorBLACK();
  4049c2:	4b51      	ldr	r3, [pc, #324]	; (404b08 <letraU+0x2b0>)
  4049c4:	4798      	blx	r3
		colorBLACK();
  4049c6:	4b50      	ldr	r3, [pc, #320]	; (404b08 <letraU+0x2b0>)
  4049c8:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  4049ca:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4049ce:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4049d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4049d6:	4618      	mov	r0, r3
  4049d8:	4b4c      	ldr	r3, [pc, #304]	; (404b0c <letraU+0x2b4>)
  4049da:	4798      	blx	r3
		
		
		colorDEFINE(red,green,blue);
  4049dc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4049e0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4049e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4049e8:	4618      	mov	r0, r3
  4049ea:	4b48      	ldr	r3, [pc, #288]	; (404b0c <letraU+0x2b4>)
  4049ec:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  4049ee:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4049f2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4049f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4049fa:	4618      	mov	r0, r3
  4049fc:	4b43      	ldr	r3, [pc, #268]	; (404b0c <letraU+0x2b4>)
  4049fe:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  404a00:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404a04:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404a0c:	4618      	mov	r0, r3
  404a0e:	4b3f      	ldr	r3, [pc, #252]	; (404b0c <letraU+0x2b4>)
  404a10:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  404a12:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404a16:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404a1e:	4618      	mov	r0, r3
  404a20:	4b3a      	ldr	r3, [pc, #232]	; (404b0c <letraU+0x2b4>)
  404a22:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  404a24:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404a28:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404a30:	4618      	mov	r0, r3
  404a32:	4b36      	ldr	r3, [pc, #216]	; (404b0c <letraU+0x2b4>)
  404a34:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  404a36:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404a3a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404a42:	4618      	mov	r0, r3
  404a44:	4b31      	ldr	r3, [pc, #196]	; (404b0c <letraU+0x2b4>)
  404a46:	4798      	blx	r3
		colorDEFINE(red,green,blue);
  404a48:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404a4c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404a54:	4618      	mov	r0, r3
  404a56:	4b2d      	ldr	r3, [pc, #180]	; (404b0c <letraU+0x2b4>)
  404a58:	4798      	blx	r3
		colorBLACK();
  404a5a:	4b2b      	ldr	r3, [pc, #172]	; (404b08 <letraU+0x2b0>)
  404a5c:	4798      	blx	r3
				

	colorBLACK();
  404a5e:	4b2a      	ldr	r3, [pc, #168]	; (404b08 <letraU+0x2b0>)
  404a60:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404a62:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404a66:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404a6e:	4618      	mov	r0, r3
  404a70:	4b26      	ldr	r3, [pc, #152]	; (404b0c <letraU+0x2b4>)
  404a72:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404a74:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404a78:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404a80:	4618      	mov	r0, r3
  404a82:	4b22      	ldr	r3, [pc, #136]	; (404b0c <letraU+0x2b4>)
  404a84:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404a86:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404a8a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404a92:	4618      	mov	r0, r3
  404a94:	4b1d      	ldr	r3, [pc, #116]	; (404b0c <letraU+0x2b4>)
  404a96:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404a98:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404a9c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404aa4:	4618      	mov	r0, r3
  404aa6:	4b19      	ldr	r3, [pc, #100]	; (404b0c <letraU+0x2b4>)
  404aa8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404aaa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404aae:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404ab6:	4618      	mov	r0, r3
  404ab8:	4b14      	ldr	r3, [pc, #80]	; (404b0c <letraU+0x2b4>)
  404aba:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404abc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404ac0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404ac8:	4618      	mov	r0, r3
  404aca:	4b10      	ldr	r3, [pc, #64]	; (404b0c <letraU+0x2b4>)
  404acc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404ace:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404ad2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404ada:	4618      	mov	r0, r3
  404adc:	4b0b      	ldr	r3, [pc, #44]	; (404b0c <letraU+0x2b4>)
  404ade:	4798      	blx	r3

		
		colorBLACK();
  404ae0:	4b09      	ldr	r3, [pc, #36]	; (404b08 <letraU+0x2b0>)
  404ae2:	4798      	blx	r3
		colorBLACK();
  404ae4:	4b08      	ldr	r3, [pc, #32]	; (404b08 <letraU+0x2b0>)
  404ae6:	4798      	blx	r3
		colorBLACK();
  404ae8:	4b07      	ldr	r3, [pc, #28]	; (404b08 <letraU+0x2b0>)
  404aea:	4798      	blx	r3
		colorBLACK();
  404aec:	4b06      	ldr	r3, [pc, #24]	; (404b08 <letraU+0x2b0>)
  404aee:	4798      	blx	r3
		colorBLACK();
  404af0:	4b05      	ldr	r3, [pc, #20]	; (404b08 <letraU+0x2b0>)
  404af2:	4798      	blx	r3
		colorBLACK();
  404af4:	4b04      	ldr	r3, [pc, #16]	; (404b08 <letraU+0x2b0>)
  404af6:	4798      	blx	r3
		colorBLACK();
  404af8:	4b03      	ldr	r3, [pc, #12]	; (404b08 <letraU+0x2b0>)
  404afa:	4798      	blx	r3
		colorBLACK();
  404afc:	4b02      	ldr	r3, [pc, #8]	; (404b08 <letraU+0x2b0>)
  404afe:	4798      	blx	r3
	}
  404b00:	bf00      	nop
  404b02:	3708      	adds	r7, #8
  404b04:	46bd      	mov	sp, r7
  404b06:	bd80      	pop	{r7, pc}
  404b08:	004013bd 	.word	0x004013bd
  404b0c:	00401411 	.word	0x00401411

00404b10 <letraV>:
	
	
void letraV(int8_t red, int8_t green, int8_t blue){
  404b10:	b580      	push	{r7, lr}
  404b12:	b082      	sub	sp, #8
  404b14:	af00      	add	r7, sp, #0
  404b16:	4603      	mov	r3, r0
  404b18:	71fb      	strb	r3, [r7, #7]
  404b1a:	460b      	mov	r3, r1
  404b1c:	71bb      	strb	r3, [r7, #6]
  404b1e:	4613      	mov	r3, r2
  404b20:	717b      	strb	r3, [r7, #5]
	//V
	colorBLACK();
  404b22:	4b9d      	ldr	r3, [pc, #628]	; (404d98 <letraV+0x288>)
  404b24:	4798      	blx	r3
	colorBLACK();
  404b26:	4b9c      	ldr	r3, [pc, #624]	; (404d98 <letraV+0x288>)
  404b28:	4798      	blx	r3
	colorBLACK();
  404b2a:	4b9b      	ldr	r3, [pc, #620]	; (404d98 <letraV+0x288>)
  404b2c:	4798      	blx	r3
	colorBLACK();
  404b2e:	4b9a      	ldr	r3, [pc, #616]	; (404d98 <letraV+0x288>)
  404b30:	4798      	blx	r3
	colorBLACK();
  404b32:	4b99      	ldr	r3, [pc, #612]	; (404d98 <letraV+0x288>)
  404b34:	4798      	blx	r3
	colorBLACK();
  404b36:	4b98      	ldr	r3, [pc, #608]	; (404d98 <letraV+0x288>)
  404b38:	4798      	blx	r3
	colorBLACK();
  404b3a:	4b97      	ldr	r3, [pc, #604]	; (404d98 <letraV+0x288>)
  404b3c:	4798      	blx	r3
	colorBLACK();
  404b3e:	4b96      	ldr	r3, [pc, #600]	; (404d98 <letraV+0x288>)
  404b40:	4798      	blx	r3
	
	
	colorBLACK();
  404b42:	4b95      	ldr	r3, [pc, #596]	; (404d98 <letraV+0x288>)
  404b44:	4798      	blx	r3
	colorBLACK();
  404b46:	4b94      	ldr	r3, [pc, #592]	; (404d98 <letraV+0x288>)
  404b48:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404b4a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404b4e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404b56:	4618      	mov	r0, r3
  404b58:	4b90      	ldr	r3, [pc, #576]	; (404d9c <letraV+0x28c>)
  404b5a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404b5c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404b60:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404b68:	4618      	mov	r0, r3
  404b6a:	4b8c      	ldr	r3, [pc, #560]	; (404d9c <letraV+0x28c>)
  404b6c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404b6e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404b72:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404b7a:	4618      	mov	r0, r3
  404b7c:	4b87      	ldr	r3, [pc, #540]	; (404d9c <letraV+0x28c>)
  404b7e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404b80:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404b84:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404b8c:	4618      	mov	r0, r3
  404b8e:	4b83      	ldr	r3, [pc, #524]	; (404d9c <letraV+0x28c>)
  404b90:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404b92:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404b96:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404b9e:	4618      	mov	r0, r3
  404ba0:	4b7e      	ldr	r3, [pc, #504]	; (404d9c <letraV+0x28c>)
  404ba2:	4798      	blx	r3
	colorBLACK();
  404ba4:	4b7c      	ldr	r3, [pc, #496]	; (404d98 <letraV+0x288>)
  404ba6:	4798      	blx	r3
	
	colorBLACK();
  404ba8:	4b7b      	ldr	r3, [pc, #492]	; (404d98 <letraV+0x288>)
  404baa:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404bac:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404bb0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404bb8:	4618      	mov	r0, r3
  404bba:	4b78      	ldr	r3, [pc, #480]	; (404d9c <letraV+0x28c>)
  404bbc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404bbe:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404bc2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404bca:	4618      	mov	r0, r3
  404bcc:	4b73      	ldr	r3, [pc, #460]	; (404d9c <letraV+0x28c>)
  404bce:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404bd0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404bd4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404bdc:	4618      	mov	r0, r3
  404bde:	4b6f      	ldr	r3, [pc, #444]	; (404d9c <letraV+0x28c>)
  404be0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404be2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404be6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404bee:	4618      	mov	r0, r3
  404bf0:	4b6a      	ldr	r3, [pc, #424]	; (404d9c <letraV+0x28c>)
  404bf2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404bf4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404bf8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404c00:	4618      	mov	r0, r3
  404c02:	4b66      	ldr	r3, [pc, #408]	; (404d9c <letraV+0x28c>)
  404c04:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404c06:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404c0a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404c12:	4618      	mov	r0, r3
  404c14:	4b61      	ldr	r3, [pc, #388]	; (404d9c <letraV+0x28c>)
  404c16:	4798      	blx	r3
	colorBLACK();
  404c18:	4b5f      	ldr	r3, [pc, #380]	; (404d98 <letraV+0x288>)
  404c1a:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  404c1c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404c20:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404c28:	4618      	mov	r0, r3
  404c2a:	4b5c      	ldr	r3, [pc, #368]	; (404d9c <letraV+0x28c>)
  404c2c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404c2e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404c32:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404c3a:	4618      	mov	r0, r3
  404c3c:	4b57      	ldr	r3, [pc, #348]	; (404d9c <letraV+0x28c>)
  404c3e:	4798      	blx	r3
	colorBLACK();
  404c40:	4b55      	ldr	r3, [pc, #340]	; (404d98 <letraV+0x288>)
  404c42:	4798      	blx	r3
	colorBLACK();
  404c44:	4b54      	ldr	r3, [pc, #336]	; (404d98 <letraV+0x288>)
  404c46:	4798      	blx	r3
	colorBLACK();
  404c48:	4b53      	ldr	r3, [pc, #332]	; (404d98 <letraV+0x288>)
  404c4a:	4798      	blx	r3
	colorBLACK();
  404c4c:	4b52      	ldr	r3, [pc, #328]	; (404d98 <letraV+0x288>)
  404c4e:	4798      	blx	r3
	colorBLACK();
  404c50:	4b51      	ldr	r3, [pc, #324]	; (404d98 <letraV+0x288>)
  404c52:	4798      	blx	r3
	colorBLACK();
  404c54:	4b50      	ldr	r3, [pc, #320]	; (404d98 <letraV+0x288>)
  404c56:	4798      	blx	r3
	
	
	colorBLACK();
  404c58:	4b4f      	ldr	r3, [pc, #316]	; (404d98 <letraV+0x288>)
  404c5a:	4798      	blx	r3
	colorBLACK();
  404c5c:	4b4e      	ldr	r3, [pc, #312]	; (404d98 <letraV+0x288>)
  404c5e:	4798      	blx	r3
	colorBLACK();
  404c60:	4b4d      	ldr	r3, [pc, #308]	; (404d98 <letraV+0x288>)
  404c62:	4798      	blx	r3
	colorBLACK();
  404c64:	4b4c      	ldr	r3, [pc, #304]	; (404d98 <letraV+0x288>)
  404c66:	4798      	blx	r3
	colorBLACK();
  404c68:	4b4b      	ldr	r3, [pc, #300]	; (404d98 <letraV+0x288>)
  404c6a:	4798      	blx	r3
	colorBLACK();
  404c6c:	4b4a      	ldr	r3, [pc, #296]	; (404d98 <letraV+0x288>)
  404c6e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404c70:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404c74:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404c7c:	4618      	mov	r0, r3
  404c7e:	4b47      	ldr	r3, [pc, #284]	; (404d9c <letraV+0x28c>)
  404c80:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404c82:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404c86:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404c8e:	4618      	mov	r0, r3
  404c90:	4b42      	ldr	r3, [pc, #264]	; (404d9c <letraV+0x28c>)
  404c92:	4798      	blx	r3
	
	
	colorBLACK();
  404c94:	4b40      	ldr	r3, [pc, #256]	; (404d98 <letraV+0x288>)
  404c96:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404c98:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404c9c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404ca4:	4618      	mov	r0, r3
  404ca6:	4b3d      	ldr	r3, [pc, #244]	; (404d9c <letraV+0x28c>)
  404ca8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404caa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404cae:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404cb6:	4618      	mov	r0, r3
  404cb8:	4b38      	ldr	r3, [pc, #224]	; (404d9c <letraV+0x28c>)
  404cba:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404cbc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404cc0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404cc8:	4618      	mov	r0, r3
  404cca:	4b34      	ldr	r3, [pc, #208]	; (404d9c <letraV+0x28c>)
  404ccc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404cce:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404cd2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404cda:	4618      	mov	r0, r3
  404cdc:	4b2f      	ldr	r3, [pc, #188]	; (404d9c <letraV+0x28c>)
  404cde:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404ce0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404ce4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404cec:	4618      	mov	r0, r3
  404cee:	4b2b      	ldr	r3, [pc, #172]	; (404d9c <letraV+0x28c>)
  404cf0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404cf2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404cf6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404cfe:	4618      	mov	r0, r3
  404d00:	4b26      	ldr	r3, [pc, #152]	; (404d9c <letraV+0x28c>)
  404d02:	4798      	blx	r3
	colorBLACK();
  404d04:	4b24      	ldr	r3, [pc, #144]	; (404d98 <letraV+0x288>)
  404d06:	4798      	blx	r3
	

	colorBLACK();
  404d08:	4b23      	ldr	r3, [pc, #140]	; (404d98 <letraV+0x288>)
  404d0a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404d0c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404d10:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d18:	4618      	mov	r0, r3
  404d1a:	4b20      	ldr	r3, [pc, #128]	; (404d9c <letraV+0x28c>)
  404d1c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404d1e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404d22:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d2a:	4618      	mov	r0, r3
  404d2c:	4b1b      	ldr	r3, [pc, #108]	; (404d9c <letraV+0x28c>)
  404d2e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404d30:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404d34:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d3c:	4618      	mov	r0, r3
  404d3e:	4b17      	ldr	r3, [pc, #92]	; (404d9c <letraV+0x28c>)
  404d40:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404d42:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404d46:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d4e:	4618      	mov	r0, r3
  404d50:	4b12      	ldr	r3, [pc, #72]	; (404d9c <letraV+0x28c>)
  404d52:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404d54:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404d58:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d60:	4618      	mov	r0, r3
  404d62:	4b0e      	ldr	r3, [pc, #56]	; (404d9c <letraV+0x28c>)
  404d64:	4798      	blx	r3
	colorBLACK();
  404d66:	4b0c      	ldr	r3, [pc, #48]	; (404d98 <letraV+0x288>)
  404d68:	4798      	blx	r3
	colorBLACK();
  404d6a:	4b0b      	ldr	r3, [pc, #44]	; (404d98 <letraV+0x288>)
  404d6c:	4798      	blx	r3

	
	colorBLACK();
  404d6e:	4b0a      	ldr	r3, [pc, #40]	; (404d98 <letraV+0x288>)
  404d70:	4798      	blx	r3
	colorBLACK();
  404d72:	4b09      	ldr	r3, [pc, #36]	; (404d98 <letraV+0x288>)
  404d74:	4798      	blx	r3
	colorBLACK();
  404d76:	4b08      	ldr	r3, [pc, #32]	; (404d98 <letraV+0x288>)
  404d78:	4798      	blx	r3
	colorBLACK();
  404d7a:	4b07      	ldr	r3, [pc, #28]	; (404d98 <letraV+0x288>)
  404d7c:	4798      	blx	r3
	colorBLACK();
  404d7e:	4b06      	ldr	r3, [pc, #24]	; (404d98 <letraV+0x288>)
  404d80:	4798      	blx	r3
	colorBLACK();
  404d82:	4b05      	ldr	r3, [pc, #20]	; (404d98 <letraV+0x288>)
  404d84:	4798      	blx	r3
	colorBLACK();
  404d86:	4b04      	ldr	r3, [pc, #16]	; (404d98 <letraV+0x288>)
  404d88:	4798      	blx	r3
	colorBLACK();
  404d8a:	4b03      	ldr	r3, [pc, #12]	; (404d98 <letraV+0x288>)
  404d8c:	4798      	blx	r3
}
  404d8e:	bf00      	nop
  404d90:	3708      	adds	r7, #8
  404d92:	46bd      	mov	sp, r7
  404d94:	bd80      	pop	{r7, pc}
  404d96:	bf00      	nop
  404d98:	004013bd 	.word	0x004013bd
  404d9c:	00401411 	.word	0x00401411

00404da0 <letraW>:
	
void letraW(int8_t red, int8_t green, int8_t blue){
  404da0:	b580      	push	{r7, lr}
  404da2:	b082      	sub	sp, #8
  404da4:	af00      	add	r7, sp, #0
  404da6:	4603      	mov	r3, r0
  404da8:	71fb      	strb	r3, [r7, #7]
  404daa:	460b      	mov	r3, r1
  404dac:	71bb      	strb	r3, [r7, #6]
  404dae:	4613      	mov	r3, r2
  404db0:	717b      	strb	r3, [r7, #5]
	//W
	
	
	colorBLACK();
  404db2:	4bb9      	ldr	r3, [pc, #740]	; (405098 <letraW+0x2f8>)
  404db4:	4798      	blx	r3
	colorBLACK();
  404db6:	4bb8      	ldr	r3, [pc, #736]	; (405098 <letraW+0x2f8>)
  404db8:	4798      	blx	r3
	colorBLACK();
  404dba:	4bb7      	ldr	r3, [pc, #732]	; (405098 <letraW+0x2f8>)
  404dbc:	4798      	blx	r3
	colorBLACK();
  404dbe:	4bb6      	ldr	r3, [pc, #728]	; (405098 <letraW+0x2f8>)
  404dc0:	4798      	blx	r3
	colorBLACK();
  404dc2:	4bb5      	ldr	r3, [pc, #724]	; (405098 <letraW+0x2f8>)
  404dc4:	4798      	blx	r3
	colorBLACK();
  404dc6:	4bb4      	ldr	r3, [pc, #720]	; (405098 <letraW+0x2f8>)
  404dc8:	4798      	blx	r3
	colorBLACK();
  404dca:	4bb3      	ldr	r3, [pc, #716]	; (405098 <letraW+0x2f8>)
  404dcc:	4798      	blx	r3
	colorBLACK();
  404dce:	4bb2      	ldr	r3, [pc, #712]	; (405098 <letraW+0x2f8>)
  404dd0:	4798      	blx	r3
	
	colorBLACK();
  404dd2:	4bb1      	ldr	r3, [pc, #708]	; (405098 <letraW+0x2f8>)
  404dd4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404dd6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404dda:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404de2:	4618      	mov	r0, r3
  404de4:	4bad      	ldr	r3, [pc, #692]	; (40509c <letraW+0x2fc>)
  404de6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404de8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404dec:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404df4:	4618      	mov	r0, r3
  404df6:	4ba9      	ldr	r3, [pc, #676]	; (40509c <letraW+0x2fc>)
  404df8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404dfa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404dfe:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404e06:	4618      	mov	r0, r3
  404e08:	4ba4      	ldr	r3, [pc, #656]	; (40509c <letraW+0x2fc>)
  404e0a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404e0c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404e10:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404e18:	4618      	mov	r0, r3
  404e1a:	4ba0      	ldr	r3, [pc, #640]	; (40509c <letraW+0x2fc>)
  404e1c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404e1e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404e22:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404e2a:	4618      	mov	r0, r3
  404e2c:	4b9b      	ldr	r3, [pc, #620]	; (40509c <letraW+0x2fc>)
  404e2e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404e30:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404e34:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404e3c:	4618      	mov	r0, r3
  404e3e:	4b97      	ldr	r3, [pc, #604]	; (40509c <letraW+0x2fc>)
  404e40:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404e42:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404e46:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404e4e:	4618      	mov	r0, r3
  404e50:	4b92      	ldr	r3, [pc, #584]	; (40509c <letraW+0x2fc>)
  404e52:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  404e54:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404e58:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404e60:	4618      	mov	r0, r3
  404e62:	4b8e      	ldr	r3, [pc, #568]	; (40509c <letraW+0x2fc>)
  404e64:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404e66:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404e6a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404e72:	4618      	mov	r0, r3
  404e74:	4b89      	ldr	r3, [pc, #548]	; (40509c <letraW+0x2fc>)
  404e76:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404e78:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404e7c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404e84:	4618      	mov	r0, r3
  404e86:	4b85      	ldr	r3, [pc, #532]	; (40509c <letraW+0x2fc>)
  404e88:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404e8a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404e8e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404e96:	4618      	mov	r0, r3
  404e98:	4b80      	ldr	r3, [pc, #512]	; (40509c <letraW+0x2fc>)
  404e9a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404e9c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404ea0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404ea8:	4618      	mov	r0, r3
  404eaa:	4b7c      	ldr	r3, [pc, #496]	; (40509c <letraW+0x2fc>)
  404eac:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404eae:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404eb2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404eba:	4618      	mov	r0, r3
  404ebc:	4b77      	ldr	r3, [pc, #476]	; (40509c <letraW+0x2fc>)
  404ebe:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404ec0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404ec4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404ecc:	4618      	mov	r0, r3
  404ece:	4b73      	ldr	r3, [pc, #460]	; (40509c <letraW+0x2fc>)
  404ed0:	4798      	blx	r3
	colorBLACK();
  404ed2:	4b71      	ldr	r3, [pc, #452]	; (405098 <letraW+0x2f8>)
  404ed4:	4798      	blx	r3
	
	colorBLACK();
  404ed6:	4b70      	ldr	r3, [pc, #448]	; (405098 <letraW+0x2f8>)
  404ed8:	4798      	blx	r3
	colorBLACK();
  404eda:	4b6f      	ldr	r3, [pc, #444]	; (405098 <letraW+0x2f8>)
  404edc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404ede:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404ee2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404eea:	4618      	mov	r0, r3
  404eec:	4b6b      	ldr	r3, [pc, #428]	; (40509c <letraW+0x2fc>)
  404eee:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404ef0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404ef4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404efc:	4618      	mov	r0, r3
  404efe:	4b67      	ldr	r3, [pc, #412]	; (40509c <letraW+0x2fc>)
  404f00:	4798      	blx	r3
	colorBLACK();
  404f02:	4b65      	ldr	r3, [pc, #404]	; (405098 <letraW+0x2f8>)
  404f04:	4798      	blx	r3
	colorBLACK();
  404f06:	4b64      	ldr	r3, [pc, #400]	; (405098 <letraW+0x2f8>)
  404f08:	4798      	blx	r3
	colorBLACK();
  404f0a:	4b63      	ldr	r3, [pc, #396]	; (405098 <letraW+0x2f8>)
  404f0c:	4798      	blx	r3
	colorBLACK();
  404f0e:	4b62      	ldr	r3, [pc, #392]	; (405098 <letraW+0x2f8>)
  404f10:	4798      	blx	r3
	
	colorBLACK();
  404f12:	4b61      	ldr	r3, [pc, #388]	; (405098 <letraW+0x2f8>)
  404f14:	4798      	blx	r3
	colorBLACK();
  404f16:	4b60      	ldr	r3, [pc, #384]	; (405098 <letraW+0x2f8>)
  404f18:	4798      	blx	r3
	colorBLACK();
  404f1a:	4b5f      	ldr	r3, [pc, #380]	; (405098 <letraW+0x2f8>)
  404f1c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404f1e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404f22:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404f2a:	4618      	mov	r0, r3
  404f2c:	4b5b      	ldr	r3, [pc, #364]	; (40509c <letraW+0x2fc>)
  404f2e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404f30:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404f34:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404f3c:	4618      	mov	r0, r3
  404f3e:	4b57      	ldr	r3, [pc, #348]	; (40509c <letraW+0x2fc>)
  404f40:	4798      	blx	r3
	colorBLACK();
  404f42:	4b55      	ldr	r3, [pc, #340]	; (405098 <letraW+0x2f8>)
  404f44:	4798      	blx	r3
	colorBLACK();
  404f46:	4b54      	ldr	r3, [pc, #336]	; (405098 <letraW+0x2f8>)
  404f48:	4798      	blx	r3
	colorBLACK();
  404f4a:	4b53      	ldr	r3, [pc, #332]	; (405098 <letraW+0x2f8>)
  404f4c:	4798      	blx	r3
	
	
	colorBLACK();
  404f4e:	4b52      	ldr	r3, [pc, #328]	; (405098 <letraW+0x2f8>)
  404f50:	4798      	blx	r3
	colorBLACK();
  404f52:	4b51      	ldr	r3, [pc, #324]	; (405098 <letraW+0x2f8>)
  404f54:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404f56:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404f5a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404f62:	4618      	mov	r0, r3
  404f64:	4b4d      	ldr	r3, [pc, #308]	; (40509c <letraW+0x2fc>)
  404f66:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404f68:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404f6c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404f74:	4618      	mov	r0, r3
  404f76:	4b49      	ldr	r3, [pc, #292]	; (40509c <letraW+0x2fc>)
  404f78:	4798      	blx	r3
	colorBLACK();
  404f7a:	4b47      	ldr	r3, [pc, #284]	; (405098 <letraW+0x2f8>)
  404f7c:	4798      	blx	r3
	colorBLACK();
  404f7e:	4b46      	ldr	r3, [pc, #280]	; (405098 <letraW+0x2f8>)
  404f80:	4798      	blx	r3
	colorBLACK();
  404f82:	4b45      	ldr	r3, [pc, #276]	; (405098 <letraW+0x2f8>)
  404f84:	4798      	blx	r3
	colorBLACK();
  404f86:	4b44      	ldr	r3, [pc, #272]	; (405098 <letraW+0x2f8>)
  404f88:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  404f8a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404f8e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404f96:	4618      	mov	r0, r3
  404f98:	4b40      	ldr	r3, [pc, #256]	; (40509c <letraW+0x2fc>)
  404f9a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404f9c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404fa0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404fa8:	4618      	mov	r0, r3
  404faa:	4b3c      	ldr	r3, [pc, #240]	; (40509c <letraW+0x2fc>)
  404fac:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404fae:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404fb2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404fba:	4618      	mov	r0, r3
  404fbc:	4b37      	ldr	r3, [pc, #220]	; (40509c <letraW+0x2fc>)
  404fbe:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404fc0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404fc4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404fcc:	4618      	mov	r0, r3
  404fce:	4b33      	ldr	r3, [pc, #204]	; (40509c <letraW+0x2fc>)
  404fd0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404fd2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404fd6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404fde:	4618      	mov	r0, r3
  404fe0:	4b2e      	ldr	r3, [pc, #184]	; (40509c <letraW+0x2fc>)
  404fe2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404fe4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404fe8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404ff0:	4618      	mov	r0, r3
  404ff2:	4b2a      	ldr	r3, [pc, #168]	; (40509c <letraW+0x2fc>)
  404ff4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  404ff6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  404ffa:	f997 1006 	ldrsb.w	r1, [r7, #6]
  404ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405002:	4618      	mov	r0, r3
  405004:	4b25      	ldr	r3, [pc, #148]	; (40509c <letraW+0x2fc>)
  405006:	4798      	blx	r3
	colorBLACK();
  405008:	4b23      	ldr	r3, [pc, #140]	; (405098 <letraW+0x2f8>)
  40500a:	4798      	blx	r3
	
	
	colorBLACK();
  40500c:	4b22      	ldr	r3, [pc, #136]	; (405098 <letraW+0x2f8>)
  40500e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405010:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405014:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405018:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40501c:	4618      	mov	r0, r3
  40501e:	4b1f      	ldr	r3, [pc, #124]	; (40509c <letraW+0x2fc>)
  405020:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405022:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405026:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40502a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40502e:	4618      	mov	r0, r3
  405030:	4b1a      	ldr	r3, [pc, #104]	; (40509c <letraW+0x2fc>)
  405032:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405034:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405038:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40503c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405040:	4618      	mov	r0, r3
  405042:	4b16      	ldr	r3, [pc, #88]	; (40509c <letraW+0x2fc>)
  405044:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405046:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40504a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40504e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405052:	4618      	mov	r0, r3
  405054:	4b11      	ldr	r3, [pc, #68]	; (40509c <letraW+0x2fc>)
  405056:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405058:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40505c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405060:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405064:	4618      	mov	r0, r3
  405066:	4b0d      	ldr	r3, [pc, #52]	; (40509c <letraW+0x2fc>)
  405068:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40506a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40506e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405072:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405076:	4618      	mov	r0, r3
  405078:	4b08      	ldr	r3, [pc, #32]	; (40509c <letraW+0x2fc>)
  40507a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40507c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405080:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405084:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405088:	4618      	mov	r0, r3
  40508a:	4b04      	ldr	r3, [pc, #16]	; (40509c <letraW+0x2fc>)
  40508c:	4798      	blx	r3
}
  40508e:	bf00      	nop
  405090:	3708      	adds	r7, #8
  405092:	46bd      	mov	sp, r7
  405094:	bd80      	pop	{r7, pc}
  405096:	bf00      	nop
  405098:	004013bd 	.word	0x004013bd
  40509c:	00401411 	.word	0x00401411

004050a0 <letraX>:
	


void letraX(int8_t red, int8_t green, int8_t blue){
  4050a0:	b580      	push	{r7, lr}
  4050a2:	b082      	sub	sp, #8
  4050a4:	af00      	add	r7, sp, #0
  4050a6:	4603      	mov	r3, r0
  4050a8:	71fb      	strb	r3, [r7, #7]
  4050aa:	460b      	mov	r3, r1
  4050ac:	71bb      	strb	r3, [r7, #6]
  4050ae:	4613      	mov	r3, r2
  4050b0:	717b      	strb	r3, [r7, #5]
	//X
	colorBLACK();
  4050b2:	4ba0      	ldr	r3, [pc, #640]	; (405334 <letraX+0x294>)
  4050b4:	4798      	blx	r3
	colorBLACK();
  4050b6:	4b9f      	ldr	r3, [pc, #636]	; (405334 <letraX+0x294>)
  4050b8:	4798      	blx	r3
	colorBLACK();
  4050ba:	4b9e      	ldr	r3, [pc, #632]	; (405334 <letraX+0x294>)
  4050bc:	4798      	blx	r3
	colorBLACK();
  4050be:	4b9d      	ldr	r3, [pc, #628]	; (405334 <letraX+0x294>)
  4050c0:	4798      	blx	r3
	colorBLACK();
  4050c2:	4b9c      	ldr	r3, [pc, #624]	; (405334 <letraX+0x294>)
  4050c4:	4798      	blx	r3
	colorBLACK();
  4050c6:	4b9b      	ldr	r3, [pc, #620]	; (405334 <letraX+0x294>)
  4050c8:	4798      	blx	r3
	colorBLACK();
  4050ca:	4b9a      	ldr	r3, [pc, #616]	; (405334 <letraX+0x294>)
  4050cc:	4798      	blx	r3
	colorBLACK();
  4050ce:	4b99      	ldr	r3, [pc, #612]	; (405334 <letraX+0x294>)
  4050d0:	4798      	blx	r3
	
	
	
	colorDEFINE(red,green,blue);
  4050d2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4050d6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4050da:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4050de:	4618      	mov	r0, r3
  4050e0:	4b95      	ldr	r3, [pc, #596]	; (405338 <letraX+0x298>)
  4050e2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4050e4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4050e8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4050ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4050f0:	4618      	mov	r0, r3
  4050f2:	4b91      	ldr	r3, [pc, #580]	; (405338 <letraX+0x298>)
  4050f4:	4798      	blx	r3
	colorBLACK();
  4050f6:	4b8f      	ldr	r3, [pc, #572]	; (405334 <letraX+0x294>)
  4050f8:	4798      	blx	r3
	colorBLACK();
  4050fa:	4b8e      	ldr	r3, [pc, #568]	; (405334 <letraX+0x294>)
  4050fc:	4798      	blx	r3
	colorBLACK();
  4050fe:	4b8d      	ldr	r3, [pc, #564]	; (405334 <letraX+0x294>)
  405100:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405102:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405106:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40510a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40510e:	4618      	mov	r0, r3
  405110:	4b89      	ldr	r3, [pc, #548]	; (405338 <letraX+0x298>)
  405112:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405114:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405118:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40511c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405120:	4618      	mov	r0, r3
  405122:	4b85      	ldr	r3, [pc, #532]	; (405338 <letraX+0x298>)
  405124:	4798      	blx	r3
	colorBLACK();
  405126:	4b83      	ldr	r3, [pc, #524]	; (405334 <letraX+0x294>)
  405128:	4798      	blx	r3
	
	colorBLACK();
  40512a:	4b82      	ldr	r3, [pc, #520]	; (405334 <letraX+0x294>)
  40512c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40512e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405132:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405136:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40513a:	4618      	mov	r0, r3
  40513c:	4b7e      	ldr	r3, [pc, #504]	; (405338 <letraX+0x298>)
  40513e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405140:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405144:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405148:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40514c:	4618      	mov	r0, r3
  40514e:	4b7a      	ldr	r3, [pc, #488]	; (405338 <letraX+0x298>)
  405150:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405152:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405156:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40515a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40515e:	4618      	mov	r0, r3
  405160:	4b75      	ldr	r3, [pc, #468]	; (405338 <letraX+0x298>)
  405162:	4798      	blx	r3
	colorBLACK();
  405164:	4b73      	ldr	r3, [pc, #460]	; (405334 <letraX+0x294>)
  405166:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405168:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40516c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405170:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405174:	4618      	mov	r0, r3
  405176:	4b70      	ldr	r3, [pc, #448]	; (405338 <letraX+0x298>)
  405178:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40517a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40517e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405182:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405186:	4618      	mov	r0, r3
  405188:	4b6b      	ldr	r3, [pc, #428]	; (405338 <letraX+0x298>)
  40518a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40518c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405190:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405194:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405198:	4618      	mov	r0, r3
  40519a:	4b67      	ldr	r3, [pc, #412]	; (405338 <letraX+0x298>)
  40519c:	4798      	blx	r3
	
	
	
	colorBLACK();
  40519e:	4b65      	ldr	r3, [pc, #404]	; (405334 <letraX+0x294>)
  4051a0:	4798      	blx	r3
	colorBLACK();
  4051a2:	4b64      	ldr	r3, [pc, #400]	; (405334 <letraX+0x294>)
  4051a4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4051a6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4051aa:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4051ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4051b2:	4618      	mov	r0, r3
  4051b4:	4b60      	ldr	r3, [pc, #384]	; (405338 <letraX+0x298>)
  4051b6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4051b8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4051bc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4051c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4051c4:	4618      	mov	r0, r3
  4051c6:	4b5c      	ldr	r3, [pc, #368]	; (405338 <letraX+0x298>)
  4051c8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4051ca:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4051ce:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4051d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4051d6:	4618      	mov	r0, r3
  4051d8:	4b57      	ldr	r3, [pc, #348]	; (405338 <letraX+0x298>)
  4051da:	4798      	blx	r3
	colorBLACK();
  4051dc:	4b55      	ldr	r3, [pc, #340]	; (405334 <letraX+0x294>)
  4051de:	4798      	blx	r3
	colorBLACK();
  4051e0:	4b54      	ldr	r3, [pc, #336]	; (405334 <letraX+0x294>)
  4051e2:	4798      	blx	r3
	colorBLACK();
  4051e4:	4b53      	ldr	r3, [pc, #332]	; (405334 <letraX+0x294>)
  4051e6:	4798      	blx	r3
	
	
	colorBLACK();
  4051e8:	4b52      	ldr	r3, [pc, #328]	; (405334 <letraX+0x294>)
  4051ea:	4798      	blx	r3
	colorBLACK();
  4051ec:	4b51      	ldr	r3, [pc, #324]	; (405334 <letraX+0x294>)
  4051ee:	4798      	blx	r3
	colorBLACK();
  4051f0:	4b50      	ldr	r3, [pc, #320]	; (405334 <letraX+0x294>)
  4051f2:	4798      	blx	r3
	colorBLACK();
  4051f4:	4b4f      	ldr	r3, [pc, #316]	; (405334 <letraX+0x294>)
  4051f6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4051f8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4051fc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405200:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405204:	4618      	mov	r0, r3
  405206:	4b4c      	ldr	r3, [pc, #304]	; (405338 <letraX+0x298>)
  405208:	4798      	blx	r3
	colorBLACK();
  40520a:	4b4a      	ldr	r3, [pc, #296]	; (405334 <letraX+0x294>)
  40520c:	4798      	blx	r3
	colorBLACK();
  40520e:	4b49      	ldr	r3, [pc, #292]	; (405334 <letraX+0x294>)
  405210:	4798      	blx	r3
	colorBLACK();
  405212:	4b48      	ldr	r3, [pc, #288]	; (405334 <letraX+0x294>)
  405214:	4798      	blx	r3
	
	
	colorBLACK();
  405216:	4b47      	ldr	r3, [pc, #284]	; (405334 <letraX+0x294>)
  405218:	4798      	blx	r3
	colorBLACK();
  40521a:	4b46      	ldr	r3, [pc, #280]	; (405334 <letraX+0x294>)
  40521c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40521e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405222:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405226:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40522a:	4618      	mov	r0, r3
  40522c:	4b42      	ldr	r3, [pc, #264]	; (405338 <letraX+0x298>)
  40522e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405230:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405234:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405238:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40523c:	4618      	mov	r0, r3
  40523e:	4b3e      	ldr	r3, [pc, #248]	; (405338 <letraX+0x298>)
  405240:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405242:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405246:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40524a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40524e:	4618      	mov	r0, r3
  405250:	4b39      	ldr	r3, [pc, #228]	; (405338 <letraX+0x298>)
  405252:	4798      	blx	r3
	colorBLACK();
  405254:	4b37      	ldr	r3, [pc, #220]	; (405334 <letraX+0x294>)
  405256:	4798      	blx	r3
	colorBLACK();
  405258:	4b36      	ldr	r3, [pc, #216]	; (405334 <letraX+0x294>)
  40525a:	4798      	blx	r3
	colorBLACK();
  40525c:	4b35      	ldr	r3, [pc, #212]	; (405334 <letraX+0x294>)
  40525e:	4798      	blx	r3
	

	colorBLACK();
  405260:	4b34      	ldr	r3, [pc, #208]	; (405334 <letraX+0x294>)
  405262:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405264:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405268:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40526c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405270:	4618      	mov	r0, r3
  405272:	4b31      	ldr	r3, [pc, #196]	; (405338 <letraX+0x298>)
  405274:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405276:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40527a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40527e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405282:	4618      	mov	r0, r3
  405284:	4b2c      	ldr	r3, [pc, #176]	; (405338 <letraX+0x298>)
  405286:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405288:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40528c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405290:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405294:	4618      	mov	r0, r3
  405296:	4b28      	ldr	r3, [pc, #160]	; (405338 <letraX+0x298>)
  405298:	4798      	blx	r3
	colorBLACK();
  40529a:	4b26      	ldr	r3, [pc, #152]	; (405334 <letraX+0x294>)
  40529c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40529e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4052a2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4052a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4052aa:	4618      	mov	r0, r3
  4052ac:	4b22      	ldr	r3, [pc, #136]	; (405338 <letraX+0x298>)
  4052ae:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4052b0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4052b4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4052b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4052bc:	4618      	mov	r0, r3
  4052be:	4b1e      	ldr	r3, [pc, #120]	; (405338 <letraX+0x298>)
  4052c0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4052c2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4052c6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4052ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4052ce:	4618      	mov	r0, r3
  4052d0:	4b19      	ldr	r3, [pc, #100]	; (405338 <letraX+0x298>)
  4052d2:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  4052d4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4052d8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4052dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4052e0:	4618      	mov	r0, r3
  4052e2:	4b15      	ldr	r3, [pc, #84]	; (405338 <letraX+0x298>)
  4052e4:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4052e6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4052ea:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4052ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4052f2:	4618      	mov	r0, r3
  4052f4:	4b10      	ldr	r3, [pc, #64]	; (405338 <letraX+0x298>)
  4052f6:	4798      	blx	r3
	colorBLACK();
  4052f8:	4b0e      	ldr	r3, [pc, #56]	; (405334 <letraX+0x294>)
  4052fa:	4798      	blx	r3
	colorBLACK();
  4052fc:	4b0d      	ldr	r3, [pc, #52]	; (405334 <letraX+0x294>)
  4052fe:	4798      	blx	r3
	colorBLACK();
  405300:	4b0c      	ldr	r3, [pc, #48]	; (405334 <letraX+0x294>)
  405302:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405304:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405308:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40530c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405310:	4618      	mov	r0, r3
  405312:	4b09      	ldr	r3, [pc, #36]	; (405338 <letraX+0x298>)
  405314:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405316:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40531a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40531e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405322:	4618      	mov	r0, r3
  405324:	4b04      	ldr	r3, [pc, #16]	; (405338 <letraX+0x298>)
  405326:	4798      	blx	r3
	colorBLACK();
  405328:	4b02      	ldr	r3, [pc, #8]	; (405334 <letraX+0x294>)
  40532a:	4798      	blx	r3
}
  40532c:	bf00      	nop
  40532e:	3708      	adds	r7, #8
  405330:	46bd      	mov	sp, r7
  405332:	bd80      	pop	{r7, pc}
  405334:	004013bd 	.word	0x004013bd
  405338:	00401411 	.word	0x00401411

0040533c <letraY>:



void letraY(int8_t red, int8_t green, int8_t blue){
  40533c:	b580      	push	{r7, lr}
  40533e:	b082      	sub	sp, #8
  405340:	af00      	add	r7, sp, #0
  405342:	4603      	mov	r3, r0
  405344:	71fb      	strb	r3, [r7, #7]
  405346:	460b      	mov	r3, r1
  405348:	71bb      	strb	r3, [r7, #6]
  40534a:	4613      	mov	r3, r2
  40534c:	717b      	strb	r3, [r7, #5]
	//Y
	colorBLACK();
  40534e:	4b8f      	ldr	r3, [pc, #572]	; (40558c <letraY+0x250>)
  405350:	4798      	blx	r3
	colorBLACK();
  405352:	4b8e      	ldr	r3, [pc, #568]	; (40558c <letraY+0x250>)
  405354:	4798      	blx	r3
	colorBLACK();
  405356:	4b8d      	ldr	r3, [pc, #564]	; (40558c <letraY+0x250>)
  405358:	4798      	blx	r3
	colorBLACK();
  40535a:	4b8c      	ldr	r3, [pc, #560]	; (40558c <letraY+0x250>)
  40535c:	4798      	blx	r3
	colorBLACK();
  40535e:	4b8b      	ldr	r3, [pc, #556]	; (40558c <letraY+0x250>)
  405360:	4798      	blx	r3
	colorBLACK();
  405362:	4b8a      	ldr	r3, [pc, #552]	; (40558c <letraY+0x250>)
  405364:	4798      	blx	r3
	colorBLACK();
  405366:	4b89      	ldr	r3, [pc, #548]	; (40558c <letraY+0x250>)
  405368:	4798      	blx	r3
	colorBLACK();
  40536a:	4b88      	ldr	r3, [pc, #544]	; (40558c <letraY+0x250>)
  40536c:	4798      	blx	r3
	
	
	
	colorBLACK();
  40536e:	4b87      	ldr	r3, [pc, #540]	; (40558c <letraY+0x250>)
  405370:	4798      	blx	r3
	colorBLACK();
  405372:	4b86      	ldr	r3, [pc, #536]	; (40558c <letraY+0x250>)
  405374:	4798      	blx	r3
	colorBLACK();
  405376:	4b85      	ldr	r3, [pc, #532]	; (40558c <letraY+0x250>)
  405378:	4798      	blx	r3
	colorBLACK();
  40537a:	4b84      	ldr	r3, [pc, #528]	; (40558c <letraY+0x250>)
  40537c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40537e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405382:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405386:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40538a:	4618      	mov	r0, r3
  40538c:	4b80      	ldr	r3, [pc, #512]	; (405590 <letraY+0x254>)
  40538e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405390:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405394:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405398:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40539c:	4618      	mov	r0, r3
  40539e:	4b7c      	ldr	r3, [pc, #496]	; (405590 <letraY+0x254>)
  4053a0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4053a2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4053a6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4053aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4053ae:	4618      	mov	r0, r3
  4053b0:	4b77      	ldr	r3, [pc, #476]	; (405590 <letraY+0x254>)
  4053b2:	4798      	blx	r3
	colorBLACK();
  4053b4:	4b75      	ldr	r3, [pc, #468]	; (40558c <letraY+0x250>)
  4053b6:	4798      	blx	r3
	
	colorBLACK();
  4053b8:	4b74      	ldr	r3, [pc, #464]	; (40558c <letraY+0x250>)
  4053ba:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4053bc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4053c0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4053c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4053c8:	4618      	mov	r0, r3
  4053ca:	4b71      	ldr	r3, [pc, #452]	; (405590 <letraY+0x254>)
  4053cc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4053ce:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4053d2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4053d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4053da:	4618      	mov	r0, r3
  4053dc:	4b6c      	ldr	r3, [pc, #432]	; (405590 <letraY+0x254>)
  4053de:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4053e0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4053e4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4053e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4053ec:	4618      	mov	r0, r3
  4053ee:	4b68      	ldr	r3, [pc, #416]	; (405590 <letraY+0x254>)
  4053f0:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4053f2:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4053f6:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4053fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4053fe:	4618      	mov	r0, r3
  405400:	4b63      	ldr	r3, [pc, #396]	; (405590 <letraY+0x254>)
  405402:	4798      	blx	r3
	colorBLACK();
  405404:	4b61      	ldr	r3, [pc, #388]	; (40558c <letraY+0x250>)
  405406:	4798      	blx	r3
	colorBLACK();
  405408:	4b60      	ldr	r3, [pc, #384]	; (40558c <letraY+0x250>)
  40540a:	4798      	blx	r3
	colorBLACK();
  40540c:	4b5f      	ldr	r3, [pc, #380]	; (40558c <letraY+0x250>)
  40540e:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  405410:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405414:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405418:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40541c:	4618      	mov	r0, r3
  40541e:	4b5c      	ldr	r3, [pc, #368]	; (405590 <letraY+0x254>)
  405420:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405422:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405426:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40542a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40542e:	4618      	mov	r0, r3
  405430:	4b57      	ldr	r3, [pc, #348]	; (405590 <letraY+0x254>)
  405432:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405434:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405438:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40543c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405440:	4618      	mov	r0, r3
  405442:	4b53      	ldr	r3, [pc, #332]	; (405590 <letraY+0x254>)
  405444:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405446:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40544a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40544e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405452:	4618      	mov	r0, r3
  405454:	4b4e      	ldr	r3, [pc, #312]	; (405590 <letraY+0x254>)
  405456:	4798      	blx	r3
	colorBLACK();
  405458:	4b4c      	ldr	r3, [pc, #304]	; (40558c <letraY+0x250>)
  40545a:	4798      	blx	r3
	colorBLACK();
  40545c:	4b4b      	ldr	r3, [pc, #300]	; (40558c <letraY+0x250>)
  40545e:	4798      	blx	r3
	colorBLACK();
  405460:	4b4a      	ldr	r3, [pc, #296]	; (40558c <letraY+0x250>)
  405462:	4798      	blx	r3
	colorBLACK();
  405464:	4b49      	ldr	r3, [pc, #292]	; (40558c <letraY+0x250>)
  405466:	4798      	blx	r3
	
	
	colorBLACK();
  405468:	4b48      	ldr	r3, [pc, #288]	; (40558c <letraY+0x250>)
  40546a:	4798      	blx	r3
	colorBLACK();
  40546c:	4b47      	ldr	r3, [pc, #284]	; (40558c <letraY+0x250>)
  40546e:	4798      	blx	r3
	colorBLACK();
  405470:	4b46      	ldr	r3, [pc, #280]	; (40558c <letraY+0x250>)
  405472:	4798      	blx	r3
	colorBLACK();
  405474:	4b45      	ldr	r3, [pc, #276]	; (40558c <letraY+0x250>)
  405476:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405478:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40547c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405480:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405484:	4618      	mov	r0, r3
  405486:	4b42      	ldr	r3, [pc, #264]	; (405590 <letraY+0x254>)
  405488:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40548a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40548e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405492:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405496:	4618      	mov	r0, r3
  405498:	4b3d      	ldr	r3, [pc, #244]	; (405590 <letraY+0x254>)
  40549a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40549c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4054a0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4054a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4054a8:	4618      	mov	r0, r3
  4054aa:	4b39      	ldr	r3, [pc, #228]	; (405590 <letraY+0x254>)
  4054ac:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4054ae:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4054b2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4054b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4054ba:	4618      	mov	r0, r3
  4054bc:	4b34      	ldr	r3, [pc, #208]	; (405590 <letraY+0x254>)
  4054be:	4798      	blx	r3
	
	
	colorBLACK();
  4054c0:	4b32      	ldr	r3, [pc, #200]	; (40558c <letraY+0x250>)
  4054c2:	4798      	blx	r3
	colorBLACK();
  4054c4:	4b31      	ldr	r3, [pc, #196]	; (40558c <letraY+0x250>)
  4054c6:	4798      	blx	r3
	colorBLACK();
  4054c8:	4b30      	ldr	r3, [pc, #192]	; (40558c <letraY+0x250>)
  4054ca:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4054cc:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4054d0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4054d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4054d8:	4618      	mov	r0, r3
  4054da:	4b2d      	ldr	r3, [pc, #180]	; (405590 <letraY+0x254>)
  4054dc:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4054de:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4054e2:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4054e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4054ea:	4618      	mov	r0, r3
  4054ec:	4b28      	ldr	r3, [pc, #160]	; (405590 <letraY+0x254>)
  4054ee:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4054f0:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4054f4:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4054f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4054fc:	4618      	mov	r0, r3
  4054fe:	4b24      	ldr	r3, [pc, #144]	; (405590 <letraY+0x254>)
  405500:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405502:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405506:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40550a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40550e:	4618      	mov	r0, r3
  405510:	4b1f      	ldr	r3, [pc, #124]	; (405590 <letraY+0x254>)
  405512:	4798      	blx	r3
	colorBLACK();
  405514:	4b1d      	ldr	r3, [pc, #116]	; (40558c <letraY+0x250>)
  405516:	4798      	blx	r3
	

	colorBLACK();
  405518:	4b1c      	ldr	r3, [pc, #112]	; (40558c <letraY+0x250>)
  40551a:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40551c:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405520:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405524:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405528:	4618      	mov	r0, r3
  40552a:	4b19      	ldr	r3, [pc, #100]	; (405590 <letraY+0x254>)
  40552c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40552e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405532:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405536:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40553a:	4618      	mov	r0, r3
  40553c:	4b14      	ldr	r3, [pc, #80]	; (405590 <letraY+0x254>)
  40553e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405540:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405544:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405548:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40554c:	4618      	mov	r0, r3
  40554e:	4b10      	ldr	r3, [pc, #64]	; (405590 <letraY+0x254>)
  405550:	4798      	blx	r3
	colorBLACK();
  405552:	4b0e      	ldr	r3, [pc, #56]	; (40558c <letraY+0x250>)
  405554:	4798      	blx	r3
	colorBLACK();
  405556:	4b0d      	ldr	r3, [pc, #52]	; (40558c <letraY+0x250>)
  405558:	4798      	blx	r3
	colorBLACK();
  40555a:	4b0c      	ldr	r3, [pc, #48]	; (40558c <letraY+0x250>)
  40555c:	4798      	blx	r3
	colorBLACK();
  40555e:	4b0b      	ldr	r3, [pc, #44]	; (40558c <letraY+0x250>)
  405560:	4798      	blx	r3
	
	
	colorBLACK();
  405562:	4b0a      	ldr	r3, [pc, #40]	; (40558c <letraY+0x250>)
  405564:	4798      	blx	r3
	colorBLACK();
  405566:	4b09      	ldr	r3, [pc, #36]	; (40558c <letraY+0x250>)
  405568:	4798      	blx	r3
	colorBLACK();
  40556a:	4b08      	ldr	r3, [pc, #32]	; (40558c <letraY+0x250>)
  40556c:	4798      	blx	r3
	colorBLACK();
  40556e:	4b07      	ldr	r3, [pc, #28]	; (40558c <letraY+0x250>)
  405570:	4798      	blx	r3
	colorBLACK();
  405572:	4b06      	ldr	r3, [pc, #24]	; (40558c <letraY+0x250>)
  405574:	4798      	blx	r3
	colorBLACK();
  405576:	4b05      	ldr	r3, [pc, #20]	; (40558c <letraY+0x250>)
  405578:	4798      	blx	r3
	colorBLACK();
  40557a:	4b04      	ldr	r3, [pc, #16]	; (40558c <letraY+0x250>)
  40557c:	4798      	blx	r3
	colorBLACK();
  40557e:	4b03      	ldr	r3, [pc, #12]	; (40558c <letraY+0x250>)
  405580:	4798      	blx	r3
}
  405582:	bf00      	nop
  405584:	3708      	adds	r7, #8
  405586:	46bd      	mov	sp, r7
  405588:	bd80      	pop	{r7, pc}
  40558a:	bf00      	nop
  40558c:	004013bd 	.word	0x004013bd
  405590:	00401411 	.word	0x00401411

00405594 <letraZ>:



void letraZ(int8_t red, int8_t green, int8_t blue){
  405594:	b580      	push	{r7, lr}
  405596:	b082      	sub	sp, #8
  405598:	af00      	add	r7, sp, #0
  40559a:	4603      	mov	r3, r0
  40559c:	71fb      	strb	r3, [r7, #7]
  40559e:	460b      	mov	r3, r1
  4055a0:	71bb      	strb	r3, [r7, #6]
  4055a2:	4613      	mov	r3, r2
  4055a4:	717b      	strb	r3, [r7, #5]
	//Z
	colorBLACK();
  4055a6:	4b8f      	ldr	r3, [pc, #572]	; (4057e4 <letraZ+0x250>)
  4055a8:	4798      	blx	r3
	colorBLACK();
  4055aa:	4b8e      	ldr	r3, [pc, #568]	; (4057e4 <letraZ+0x250>)
  4055ac:	4798      	blx	r3
	colorBLACK();
  4055ae:	4b8d      	ldr	r3, [pc, #564]	; (4057e4 <letraZ+0x250>)
  4055b0:	4798      	blx	r3
	colorBLACK();
  4055b2:	4b8c      	ldr	r3, [pc, #560]	; (4057e4 <letraZ+0x250>)
  4055b4:	4798      	blx	r3
	colorBLACK();
  4055b6:	4b8b      	ldr	r3, [pc, #556]	; (4057e4 <letraZ+0x250>)
  4055b8:	4798      	blx	r3
	colorBLACK();
  4055ba:	4b8a      	ldr	r3, [pc, #552]	; (4057e4 <letraZ+0x250>)
  4055bc:	4798      	blx	r3
	colorBLACK();
  4055be:	4b89      	ldr	r3, [pc, #548]	; (4057e4 <letraZ+0x250>)
  4055c0:	4798      	blx	r3
	colorBLACK();
  4055c2:	4b88      	ldr	r3, [pc, #544]	; (4057e4 <letraZ+0x250>)
  4055c4:	4798      	blx	r3
	
	
	
	colorDEFINE(red,green,blue);
  4055c6:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4055ca:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4055ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4055d2:	4618      	mov	r0, r3
  4055d4:	4b84      	ldr	r3, [pc, #528]	; (4057e8 <letraZ+0x254>)
  4055d6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4055d8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4055dc:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4055e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4055e4:	4618      	mov	r0, r3
  4055e6:	4b80      	ldr	r3, [pc, #512]	; (4057e8 <letraZ+0x254>)
  4055e8:	4798      	blx	r3
	colorBLACK();
  4055ea:	4b7e      	ldr	r3, [pc, #504]	; (4057e4 <letraZ+0x250>)
  4055ec:	4798      	blx	r3
	colorBLACK();
  4055ee:	4b7d      	ldr	r3, [pc, #500]	; (4057e4 <letraZ+0x250>)
  4055f0:	4798      	blx	r3
	colorBLACK();
  4055f2:	4b7c      	ldr	r3, [pc, #496]	; (4057e4 <letraZ+0x250>)
  4055f4:	4798      	blx	r3
	colorBLACK();
  4055f6:	4b7b      	ldr	r3, [pc, #492]	; (4057e4 <letraZ+0x250>)
  4055f8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4055fa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4055fe:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405602:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405606:	4618      	mov	r0, r3
  405608:	4b77      	ldr	r3, [pc, #476]	; (4057e8 <letraZ+0x254>)
  40560a:	4798      	blx	r3
	colorBLACK();
  40560c:	4b75      	ldr	r3, [pc, #468]	; (4057e4 <letraZ+0x250>)
  40560e:	4798      	blx	r3
	
	colorBLACK();
  405610:	4b74      	ldr	r3, [pc, #464]	; (4057e4 <letraZ+0x250>)
  405612:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405614:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405618:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40561c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405620:	4618      	mov	r0, r3
  405622:	4b71      	ldr	r3, [pc, #452]	; (4057e8 <letraZ+0x254>)
  405624:	4798      	blx	r3
	colorBLACK();
  405626:	4b6f      	ldr	r3, [pc, #444]	; (4057e4 <letraZ+0x250>)
  405628:	4798      	blx	r3
	colorBLACK();
  40562a:	4b6e      	ldr	r3, [pc, #440]	; (4057e4 <letraZ+0x250>)
  40562c:	4798      	blx	r3
	colorBLACK();
  40562e:	4b6d      	ldr	r3, [pc, #436]	; (4057e4 <letraZ+0x250>)
  405630:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405632:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405636:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40563a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40563e:	4618      	mov	r0, r3
  405640:	4b69      	ldr	r3, [pc, #420]	; (4057e8 <letraZ+0x254>)
  405642:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405644:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405648:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40564c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405650:	4618      	mov	r0, r3
  405652:	4b65      	ldr	r3, [pc, #404]	; (4057e8 <letraZ+0x254>)
  405654:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405656:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40565a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40565e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405662:	4618      	mov	r0, r3
  405664:	4b60      	ldr	r3, [pc, #384]	; (4057e8 <letraZ+0x254>)
  405666:	4798      	blx	r3
	
	
	colorDEFINE(red,green,blue);
  405668:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40566c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405670:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405674:	4618      	mov	r0, r3
  405676:	4b5c      	ldr	r3, [pc, #368]	; (4057e8 <letraZ+0x254>)
  405678:	4798      	blx	r3
	colorBLACK();
  40567a:	4b5a      	ldr	r3, [pc, #360]	; (4057e4 <letraZ+0x250>)
  40567c:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40567e:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405682:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405686:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40568a:	4618      	mov	r0, r3
  40568c:	4b56      	ldr	r3, [pc, #344]	; (4057e8 <letraZ+0x254>)
  40568e:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405690:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405694:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405698:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40569c:	4618      	mov	r0, r3
  40569e:	4b52      	ldr	r3, [pc, #328]	; (4057e8 <letraZ+0x254>)
  4056a0:	4798      	blx	r3
	colorBLACK();
  4056a2:	4b50      	ldr	r3, [pc, #320]	; (4057e4 <letraZ+0x250>)
  4056a4:	4798      	blx	r3
	colorBLACK();
  4056a6:	4b4f      	ldr	r3, [pc, #316]	; (4057e4 <letraZ+0x250>)
  4056a8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4056aa:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4056ae:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4056b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4056b6:	4618      	mov	r0, r3
  4056b8:	4b4b      	ldr	r3, [pc, #300]	; (4057e8 <letraZ+0x254>)
  4056ba:	4798      	blx	r3
	colorBLACK();
  4056bc:	4b49      	ldr	r3, [pc, #292]	; (4057e4 <letraZ+0x250>)
  4056be:	4798      	blx	r3
	
	
	colorBLACK();
  4056c0:	4b48      	ldr	r3, [pc, #288]	; (4057e4 <letraZ+0x250>)
  4056c2:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4056c4:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4056c8:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4056cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4056d0:	4618      	mov	r0, r3
  4056d2:	4b45      	ldr	r3, [pc, #276]	; (4057e8 <letraZ+0x254>)
  4056d4:	4798      	blx	r3
	colorBLACK();
  4056d6:	4b43      	ldr	r3, [pc, #268]	; (4057e4 <letraZ+0x250>)
  4056d8:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4056da:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4056de:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4056e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4056e6:	4618      	mov	r0, r3
  4056e8:	4b3f      	ldr	r3, [pc, #252]	; (4057e8 <letraZ+0x254>)
  4056ea:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4056ec:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4056f0:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4056f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4056f8:	4618      	mov	r0, r3
  4056fa:	4b3b      	ldr	r3, [pc, #236]	; (4057e8 <letraZ+0x254>)
  4056fc:	4798      	blx	r3
	colorBLACK();
  4056fe:	4b39      	ldr	r3, [pc, #228]	; (4057e4 <letraZ+0x250>)
  405700:	4798      	blx	r3
	colorBLACK();
  405702:	4b38      	ldr	r3, [pc, #224]	; (4057e4 <letraZ+0x250>)
  405704:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405706:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40570a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40570e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405712:	4618      	mov	r0, r3
  405714:	4b34      	ldr	r3, [pc, #208]	; (4057e8 <letraZ+0x254>)
  405716:	4798      	blx	r3
	
	colorDEFINE(red,green,blue);
  405718:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40571c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405720:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405724:	4618      	mov	r0, r3
  405726:	4b30      	ldr	r3, [pc, #192]	; (4057e8 <letraZ+0x254>)
  405728:	4798      	blx	r3
	colorBLACK();
  40572a:	4b2e      	ldr	r3, [pc, #184]	; (4057e4 <letraZ+0x250>)
  40572c:	4798      	blx	r3
	colorBLACK();
  40572e:	4b2d      	ldr	r3, [pc, #180]	; (4057e4 <letraZ+0x250>)
  405730:	4798      	blx	r3
	colorBLACK();
  405732:	4b2c      	ldr	r3, [pc, #176]	; (4057e4 <letraZ+0x250>)
  405734:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405736:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40573a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40573e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405742:	4618      	mov	r0, r3
  405744:	4b28      	ldr	r3, [pc, #160]	; (4057e8 <letraZ+0x254>)
  405746:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405748:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40574c:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405750:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405754:	4618      	mov	r0, r3
  405756:	4b24      	ldr	r3, [pc, #144]	; (4057e8 <letraZ+0x254>)
  405758:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  40575a:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40575e:	f997 1006 	ldrsb.w	r1, [r7, #6]
  405762:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405766:	4618      	mov	r0, r3
  405768:	4b1f      	ldr	r3, [pc, #124]	; (4057e8 <letraZ+0x254>)
  40576a:	4798      	blx	r3
	colorBLACK();
  40576c:	4b1d      	ldr	r3, [pc, #116]	; (4057e4 <letraZ+0x250>)
  40576e:	4798      	blx	r3
	

	colorBLACK();
  405770:	4b1c      	ldr	r3, [pc, #112]	; (4057e4 <letraZ+0x250>)
  405772:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405774:	f997 2005 	ldrsb.w	r2, [r7, #5]
  405778:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40577c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405780:	4618      	mov	r0, r3
  405782:	4b19      	ldr	r3, [pc, #100]	; (4057e8 <letraZ+0x254>)
  405784:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  405786:	f997 2005 	ldrsb.w	r2, [r7, #5]
  40578a:	f997 1006 	ldrsb.w	r1, [r7, #6]
  40578e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405792:	4618      	mov	r0, r3
  405794:	4b14      	ldr	r3, [pc, #80]	; (4057e8 <letraZ+0x254>)
  405796:	4798      	blx	r3
	colorBLACK();
  405798:	4b12      	ldr	r3, [pc, #72]	; (4057e4 <letraZ+0x250>)
  40579a:	4798      	blx	r3
	colorBLACK();
  40579c:	4b11      	ldr	r3, [pc, #68]	; (4057e4 <letraZ+0x250>)
  40579e:	4798      	blx	r3
	colorBLACK();
  4057a0:	4b10      	ldr	r3, [pc, #64]	; (4057e4 <letraZ+0x250>)
  4057a2:	4798      	blx	r3
	colorBLACK();
  4057a4:	4b0f      	ldr	r3, [pc, #60]	; (4057e4 <letraZ+0x250>)
  4057a6:	4798      	blx	r3
	colorDEFINE(red,green,blue);
  4057a8:	f997 2005 	ldrsb.w	r2, [r7, #5]
  4057ac:	f997 1006 	ldrsb.w	r1, [r7, #6]
  4057b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4057b4:	4618      	mov	r0, r3
  4057b6:	4b0c      	ldr	r3, [pc, #48]	; (4057e8 <letraZ+0x254>)
  4057b8:	4798      	blx	r3
	
	
	colorBLACK();
  4057ba:	4b0a      	ldr	r3, [pc, #40]	; (4057e4 <letraZ+0x250>)
  4057bc:	4798      	blx	r3
	colorBLACK();
  4057be:	4b09      	ldr	r3, [pc, #36]	; (4057e4 <letraZ+0x250>)
  4057c0:	4798      	blx	r3
	colorBLACK();
  4057c2:	4b08      	ldr	r3, [pc, #32]	; (4057e4 <letraZ+0x250>)
  4057c4:	4798      	blx	r3
	colorBLACK();
  4057c6:	4b07      	ldr	r3, [pc, #28]	; (4057e4 <letraZ+0x250>)
  4057c8:	4798      	blx	r3
	colorBLACK();
  4057ca:	4b06      	ldr	r3, [pc, #24]	; (4057e4 <letraZ+0x250>)
  4057cc:	4798      	blx	r3
	colorBLACK();
  4057ce:	4b05      	ldr	r3, [pc, #20]	; (4057e4 <letraZ+0x250>)
  4057d0:	4798      	blx	r3
	colorBLACK();
  4057d2:	4b04      	ldr	r3, [pc, #16]	; (4057e4 <letraZ+0x250>)
  4057d4:	4798      	blx	r3
	colorBLACK();
  4057d6:	4b03      	ldr	r3, [pc, #12]	; (4057e4 <letraZ+0x250>)
  4057d8:	4798      	blx	r3
}
  4057da:	bf00      	nop
  4057dc:	3708      	adds	r7, #8
  4057de:	46bd      	mov	sp, r7
  4057e0:	bd80      	pop	{r7, pc}
  4057e2:	bf00      	nop
  4057e4:	004013bd 	.word	0x004013bd
  4057e8:	00401411 	.word	0x00401411

004057ec <main>:




int main(void)
{
  4057ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057f0:	b087      	sub	sp, #28
  4057f2:	af00      	add	r7, sp, #0
	// Inicializa clock
	sysclk_init();
  4057f4:	4bb7      	ldr	r3, [pc, #732]	; (405ad4 <main+0x2e8>)
  4057f6:	4798      	blx	r3

	// Desativa watchdog
	WDT->WDT_MR = WDT_MR_WDDIS;
  4057f8:	4bb7      	ldr	r3, [pc, #732]	; (405ad8 <main+0x2ec>)
  4057fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4057fe:	605a      	str	r2, [r3, #4]

  // Ativa PIOs
	pmc_enable_periph_clk(LED_PIO_ID);
  405800:	200c      	movs	r0, #12
  405802:	4bb6      	ldr	r3, [pc, #728]	; (405adc <main+0x2f0>)
  405804:	4798      	blx	r3
	pmc_enable_periph_clk(BUT_PIO_ID);
  405806:	200a      	movs	r0, #10
  405808:	4bb4      	ldr	r3, [pc, #720]	; (405adc <main+0x2f0>)
  40580a:	4798      	blx	r3

  // Configura Pinos
	pio_configure(LED_PIO, PIO_OUTPUT_0, LED_IDX_MASK, PIO_DEFAULT);
  40580c:	2300      	movs	r3, #0
  40580e:	f44f 7280 	mov.w	r2, #256	; 0x100
  405812:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  405816:	48b2      	ldr	r0, [pc, #712]	; (405ae0 <main+0x2f4>)
  405818:	4cb2      	ldr	r4, [pc, #712]	; (405ae4 <main+0x2f8>)
  40581a:	47a0      	blx	r4
	pio_configure(BUT_PIO, PIO_INPUT, BUT_IDX_MASK, PIO_PULLUP);
  40581c:	2301      	movs	r3, #1
  40581e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405822:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  405826:	48b0      	ldr	r0, [pc, #704]	; (405ae8 <main+0x2fc>)
  405828:	4cae      	ldr	r4, [pc, #696]	; (405ae4 <main+0x2f8>)
  40582a:	47a0      	blx	r4

	// Configura led
	pmc_enable_periph_clk(PIN_DATA_ID);
  40582c:	2010      	movs	r0, #16
  40582e:	4bab      	ldr	r3, [pc, #684]	; (405adc <main+0x2f0>)
  405830:	4798      	blx	r3
	pio_configure(PIN_DATA, PIO_OUTPUT_0, PIN_DATA_IDX_MASK, PIO_DEFAULT);
  405832:	2300      	movs	r3, #0
  405834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  405838:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40583c:	48ab      	ldr	r0, [pc, #684]	; (405aec <main+0x300>)
  40583e:	4ca9      	ldr	r4, [pc, #676]	; (405ae4 <main+0x2f8>)
  405840:	47a0      	blx	r4

	
	clearLEDs();
  405842:	4bab      	ldr	r3, [pc, #684]	; (405af0 <main+0x304>)
  405844:	4798      	blx	r3
	//char bufferNOME[8] = {'V','I','N','I'};
	char bufferNOME[8] = {'B','E','M','V','I','N','D','O'};	
  405846:	4aab      	ldr	r2, [pc, #684]	; (405af4 <main+0x308>)
  405848:	f107 030c 	add.w	r3, r7, #12
  40584c:	e892 0003 	ldmia.w	r2, {r0, r1}
  405850:	e883 0003 	stmia.w	r3, {r0, r1}
	//char bufferNOME[8] = {'F','E','R','N','A','N','D','A'};	
	//char bufferNOME[8] = {'V','i','t','U','x','O','-','-'};
				
	while(1){
	
	int8_t size=0;
  405854:	2300      	movs	r3, #0
  405856:	75fb      	strb	r3, [r7, #23]
	for(int8_t i=0;i<=7;i++)
  405858:	2300      	movs	r3, #0
  40585a:	75bb      	strb	r3, [r7, #22]
  40585c:	e041      	b.n	4058e2 <main+0xf6>
	{
		if( (bufferNOME[i] >= '0' && bufferNOME[i] <= '9') || (bufferNOME[i] >= 'A' && bufferNOME[i] <= 'Z') || (bufferNOME[i] >= 'a' && bufferNOME[i] <= 'z')) size++;
  40585e:	f997 3016 	ldrsb.w	r3, [r7, #22]
  405862:	f107 0218 	add.w	r2, r7, #24
  405866:	4413      	add	r3, r2
  405868:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  40586c:	2b2f      	cmp	r3, #47	; 0x2f
  40586e:	d908      	bls.n	405882 <main+0x96>
  405870:	f997 3016 	ldrsb.w	r3, [r7, #22]
  405874:	f107 0218 	add.w	r2, r7, #24
  405878:	4413      	add	r3, r2
  40587a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  40587e:	2b39      	cmp	r3, #57	; 0x39
  405880:	d923      	bls.n	4058ca <main+0xde>
  405882:	f997 3016 	ldrsb.w	r3, [r7, #22]
  405886:	f107 0218 	add.w	r2, r7, #24
  40588a:	4413      	add	r3, r2
  40588c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405890:	2b40      	cmp	r3, #64	; 0x40
  405892:	d908      	bls.n	4058a6 <main+0xba>
  405894:	f997 3016 	ldrsb.w	r3, [r7, #22]
  405898:	f107 0218 	add.w	r2, r7, #24
  40589c:	4413      	add	r3, r2
  40589e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4058a2:	2b5a      	cmp	r3, #90	; 0x5a
  4058a4:	d911      	bls.n	4058ca <main+0xde>
  4058a6:	f997 3016 	ldrsb.w	r3, [r7, #22]
  4058aa:	f107 0218 	add.w	r2, r7, #24
  4058ae:	4413      	add	r3, r2
  4058b0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4058b4:	2b60      	cmp	r3, #96	; 0x60
  4058b6:	d918      	bls.n	4058ea <main+0xfe>
  4058b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
  4058bc:	f107 0218 	add.w	r2, r7, #24
  4058c0:	4413      	add	r3, r2
  4058c2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4058c6:	2b7a      	cmp	r3, #122	; 0x7a
  4058c8:	d80f      	bhi.n	4058ea <main+0xfe>
  4058ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4058ce:	b2db      	uxtb	r3, r3
  4058d0:	3301      	adds	r3, #1
  4058d2:	b2db      	uxtb	r3, r3
  4058d4:	75fb      	strb	r3, [r7, #23]
	for(int8_t i=0;i<=7;i++)
  4058d6:	f997 3016 	ldrsb.w	r3, [r7, #22]
  4058da:	b2db      	uxtb	r3, r3
  4058dc:	3301      	adds	r3, #1
  4058de:	b2db      	uxtb	r3, r3
  4058e0:	75bb      	strb	r3, [r7, #22]
  4058e2:	f997 3016 	ldrsb.w	r3, [r7, #22]
  4058e6:	2b07      	cmp	r3, #7
  4058e8:	ddb9      	ble.n	40585e <main+0x72>
		else break;
	}
	
	uint8_t cont = 0;
  4058ea:	2300      	movs	r3, #0
  4058ec:	757b      	strb	r3, [r7, #21]
	while(size >= 0)
  4058ee:	e287      	b.n	405e00 <main+0x614>
	{
		if(bufferNOME[cont] == 'a' || bufferNOME[cont] == 'A') letraA(BLUE);
  4058f0:	7d7b      	ldrb	r3, [r7, #21]
  4058f2:	f107 0218 	add.w	r2, r7, #24
  4058f6:	4413      	add	r3, r2
  4058f8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4058fc:	2b61      	cmp	r3, #97	; 0x61
  4058fe:	d007      	beq.n	405910 <main+0x124>
  405900:	7d7b      	ldrb	r3, [r7, #21]
  405902:	f107 0218 	add.w	r2, r7, #24
  405906:	4413      	add	r3, r2
  405908:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  40590c:	2b41      	cmp	r3, #65	; 0x41
  40590e:	d105      	bne.n	40591c <main+0x130>
  405910:	2264      	movs	r2, #100	; 0x64
  405912:	2100      	movs	r1, #0
  405914:	2000      	movs	r0, #0
  405916:	4b78      	ldr	r3, [pc, #480]	; (405af8 <main+0x30c>)
  405918:	4798      	blx	r3
  40591a:	e268      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'b' || bufferNOME[cont] == 'B') letraB(BLUE);
  40591c:	7d7b      	ldrb	r3, [r7, #21]
  40591e:	f107 0218 	add.w	r2, r7, #24
  405922:	4413      	add	r3, r2
  405924:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405928:	2b62      	cmp	r3, #98	; 0x62
  40592a:	d007      	beq.n	40593c <main+0x150>
  40592c:	7d7b      	ldrb	r3, [r7, #21]
  40592e:	f107 0218 	add.w	r2, r7, #24
  405932:	4413      	add	r3, r2
  405934:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405938:	2b42      	cmp	r3, #66	; 0x42
  40593a:	d105      	bne.n	405948 <main+0x15c>
  40593c:	2264      	movs	r2, #100	; 0x64
  40593e:	2100      	movs	r1, #0
  405940:	2000      	movs	r0, #0
  405942:	4b6e      	ldr	r3, [pc, #440]	; (405afc <main+0x310>)
  405944:	4798      	blx	r3
  405946:	e252      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'c' || bufferNOME[cont] == 'C') letraC(BLUE);
  405948:	7d7b      	ldrb	r3, [r7, #21]
  40594a:	f107 0218 	add.w	r2, r7, #24
  40594e:	4413      	add	r3, r2
  405950:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405954:	2b63      	cmp	r3, #99	; 0x63
  405956:	d007      	beq.n	405968 <main+0x17c>
  405958:	7d7b      	ldrb	r3, [r7, #21]
  40595a:	f107 0218 	add.w	r2, r7, #24
  40595e:	4413      	add	r3, r2
  405960:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405964:	2b43      	cmp	r3, #67	; 0x43
  405966:	d105      	bne.n	405974 <main+0x188>
  405968:	2264      	movs	r2, #100	; 0x64
  40596a:	2100      	movs	r1, #0
  40596c:	2000      	movs	r0, #0
  40596e:	4b64      	ldr	r3, [pc, #400]	; (405b00 <main+0x314>)
  405970:	4798      	blx	r3
  405972:	e23c      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'd' || bufferNOME[cont] == 'D') letraD(GREEN);
  405974:	7d7b      	ldrb	r3, [r7, #21]
  405976:	f107 0218 	add.w	r2, r7, #24
  40597a:	4413      	add	r3, r2
  40597c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405980:	2b64      	cmp	r3, #100	; 0x64
  405982:	d007      	beq.n	405994 <main+0x1a8>
  405984:	7d7b      	ldrb	r3, [r7, #21]
  405986:	f107 0218 	add.w	r2, r7, #24
  40598a:	4413      	add	r3, r2
  40598c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405990:	2b44      	cmp	r3, #68	; 0x44
  405992:	d105      	bne.n	4059a0 <main+0x1b4>
  405994:	2200      	movs	r2, #0
  405996:	2164      	movs	r1, #100	; 0x64
  405998:	2000      	movs	r0, #0
  40599a:	4b5a      	ldr	r3, [pc, #360]	; (405b04 <main+0x318>)
  40599c:	4798      	blx	r3
  40599e:	e226      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'e' || bufferNOME[cont] == 'E') letraE(BLUE);
  4059a0:	7d7b      	ldrb	r3, [r7, #21]
  4059a2:	f107 0218 	add.w	r2, r7, #24
  4059a6:	4413      	add	r3, r2
  4059a8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4059ac:	2b65      	cmp	r3, #101	; 0x65
  4059ae:	d007      	beq.n	4059c0 <main+0x1d4>
  4059b0:	7d7b      	ldrb	r3, [r7, #21]
  4059b2:	f107 0218 	add.w	r2, r7, #24
  4059b6:	4413      	add	r3, r2
  4059b8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4059bc:	2b45      	cmp	r3, #69	; 0x45
  4059be:	d105      	bne.n	4059cc <main+0x1e0>
  4059c0:	2264      	movs	r2, #100	; 0x64
  4059c2:	2100      	movs	r1, #0
  4059c4:	2000      	movs	r0, #0
  4059c6:	4b50      	ldr	r3, [pc, #320]	; (405b08 <main+0x31c>)
  4059c8:	4798      	blx	r3
  4059ca:	e210      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'f' || bufferNOME[cont] == 'F') letraF(BLUE);
  4059cc:	7d7b      	ldrb	r3, [r7, #21]
  4059ce:	f107 0218 	add.w	r2, r7, #24
  4059d2:	4413      	add	r3, r2
  4059d4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4059d8:	2b66      	cmp	r3, #102	; 0x66
  4059da:	d007      	beq.n	4059ec <main+0x200>
  4059dc:	7d7b      	ldrb	r3, [r7, #21]
  4059de:	f107 0218 	add.w	r2, r7, #24
  4059e2:	4413      	add	r3, r2
  4059e4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  4059e8:	2b46      	cmp	r3, #70	; 0x46
  4059ea:	d105      	bne.n	4059f8 <main+0x20c>
  4059ec:	2264      	movs	r2, #100	; 0x64
  4059ee:	2100      	movs	r1, #0
  4059f0:	2000      	movs	r0, #0
  4059f2:	4b46      	ldr	r3, [pc, #280]	; (405b0c <main+0x320>)
  4059f4:	4798      	blx	r3
  4059f6:	e1fa      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'g' || bufferNOME[cont] == 'G') letraG(BLUE);
  4059f8:	7d7b      	ldrb	r3, [r7, #21]
  4059fa:	f107 0218 	add.w	r2, r7, #24
  4059fe:	4413      	add	r3, r2
  405a00:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405a04:	2b67      	cmp	r3, #103	; 0x67
  405a06:	d007      	beq.n	405a18 <main+0x22c>
  405a08:	7d7b      	ldrb	r3, [r7, #21]
  405a0a:	f107 0218 	add.w	r2, r7, #24
  405a0e:	4413      	add	r3, r2
  405a10:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405a14:	2b47      	cmp	r3, #71	; 0x47
  405a16:	d105      	bne.n	405a24 <main+0x238>
  405a18:	2264      	movs	r2, #100	; 0x64
  405a1a:	2100      	movs	r1, #0
  405a1c:	2000      	movs	r0, #0
  405a1e:	4b3c      	ldr	r3, [pc, #240]	; (405b10 <main+0x324>)
  405a20:	4798      	blx	r3
  405a22:	e1e4      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'h' || bufferNOME[cont] == 'H') letraH(BLUE);
  405a24:	7d7b      	ldrb	r3, [r7, #21]
  405a26:	f107 0218 	add.w	r2, r7, #24
  405a2a:	4413      	add	r3, r2
  405a2c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405a30:	2b68      	cmp	r3, #104	; 0x68
  405a32:	d007      	beq.n	405a44 <main+0x258>
  405a34:	7d7b      	ldrb	r3, [r7, #21]
  405a36:	f107 0218 	add.w	r2, r7, #24
  405a3a:	4413      	add	r3, r2
  405a3c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405a40:	2b48      	cmp	r3, #72	; 0x48
  405a42:	d105      	bne.n	405a50 <main+0x264>
  405a44:	2264      	movs	r2, #100	; 0x64
  405a46:	2100      	movs	r1, #0
  405a48:	2000      	movs	r0, #0
  405a4a:	4b32      	ldr	r3, [pc, #200]	; (405b14 <main+0x328>)
  405a4c:	4798      	blx	r3
  405a4e:	e1ce      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'i' || bufferNOME[cont] == 'I') letraI(GREEN);
  405a50:	7d7b      	ldrb	r3, [r7, #21]
  405a52:	f107 0218 	add.w	r2, r7, #24
  405a56:	4413      	add	r3, r2
  405a58:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405a5c:	2b69      	cmp	r3, #105	; 0x69
  405a5e:	d007      	beq.n	405a70 <main+0x284>
  405a60:	7d7b      	ldrb	r3, [r7, #21]
  405a62:	f107 0218 	add.w	r2, r7, #24
  405a66:	4413      	add	r3, r2
  405a68:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405a6c:	2b49      	cmp	r3, #73	; 0x49
  405a6e:	d105      	bne.n	405a7c <main+0x290>
  405a70:	2200      	movs	r2, #0
  405a72:	2164      	movs	r1, #100	; 0x64
  405a74:	2000      	movs	r0, #0
  405a76:	4b28      	ldr	r3, [pc, #160]	; (405b18 <main+0x32c>)
  405a78:	4798      	blx	r3
  405a7a:	e1b8      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'j' || bufferNOME[cont] == 'J') letraJ(BLUE);
  405a7c:	7d7b      	ldrb	r3, [r7, #21]
  405a7e:	f107 0218 	add.w	r2, r7, #24
  405a82:	4413      	add	r3, r2
  405a84:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405a88:	2b6a      	cmp	r3, #106	; 0x6a
  405a8a:	d007      	beq.n	405a9c <main+0x2b0>
  405a8c:	7d7b      	ldrb	r3, [r7, #21]
  405a8e:	f107 0218 	add.w	r2, r7, #24
  405a92:	4413      	add	r3, r2
  405a94:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405a98:	2b4a      	cmp	r3, #74	; 0x4a
  405a9a:	d105      	bne.n	405aa8 <main+0x2bc>
  405a9c:	2264      	movs	r2, #100	; 0x64
  405a9e:	2100      	movs	r1, #0
  405aa0:	2000      	movs	r0, #0
  405aa2:	4b1e      	ldr	r3, [pc, #120]	; (405b1c <main+0x330>)
  405aa4:	4798      	blx	r3
  405aa6:	e1a2      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'k' || bufferNOME[cont] == 'K') letraK(BLUE);
  405aa8:	7d7b      	ldrb	r3, [r7, #21]
  405aaa:	f107 0218 	add.w	r2, r7, #24
  405aae:	4413      	add	r3, r2
  405ab0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405ab4:	2b6b      	cmp	r3, #107	; 0x6b
  405ab6:	d007      	beq.n	405ac8 <main+0x2dc>
  405ab8:	7d7b      	ldrb	r3, [r7, #21]
  405aba:	f107 0218 	add.w	r2, r7, #24
  405abe:	4413      	add	r3, r2
  405ac0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405ac4:	2b4b      	cmp	r3, #75	; 0x4b
  405ac6:	d12d      	bne.n	405b24 <main+0x338>
  405ac8:	2264      	movs	r2, #100	; 0x64
  405aca:	2100      	movs	r1, #0
  405acc:	2000      	movs	r0, #0
  405ace:	4b14      	ldr	r3, [pc, #80]	; (405b20 <main+0x334>)
  405ad0:	4798      	blx	r3
  405ad2:	e18c      	b.n	405dee <main+0x602>
  405ad4:	004004ad 	.word	0x004004ad
  405ad8:	400e1850 	.word	0x400e1850
  405adc:	00400dfd 	.word	0x00400dfd
  405ae0:	400e1200 	.word	0x400e1200
  405ae4:	004008f5 	.word	0x004008f5
  405ae8:	400e0e00 	.word	0x400e0e00
  405aec:	400e1400 	.word	0x400e1400
  405af0:	004014e9 	.word	0x004014e9
  405af4:	00406320 	.word	0x00406320
  405af8:	00401519 	.word	0x00401519
  405afc:	004017e1 	.word	0x004017e1
  405b00:	00401ab5 	.word	0x00401ab5
  405b04:	00401d0d 	.word	0x00401d0d
  405b08:	00401fd5 	.word	0x00401fd5
  405b0c:	00402255 	.word	0x00402255
  405b10:	0040249d 	.word	0x0040249d
  405b14:	0040271d 	.word	0x0040271d
  405b18:	004029e5 	.word	0x004029e5
  405b1c:	00402c05 	.word	0x00402c05
  405b20:	00402e4d 	.word	0x00402e4d
		else if(bufferNOME[cont] == 'l' || bufferNOME[cont] == 'L') letraL(BLUE);
  405b24:	7d7b      	ldrb	r3, [r7, #21]
  405b26:	f107 0218 	add.w	r2, r7, #24
  405b2a:	4413      	add	r3, r2
  405b2c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405b30:	2b6c      	cmp	r3, #108	; 0x6c
  405b32:	d007      	beq.n	405b44 <main+0x358>
  405b34:	7d7b      	ldrb	r3, [r7, #21]
  405b36:	f107 0218 	add.w	r2, r7, #24
  405b3a:	4413      	add	r3, r2
  405b3c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405b40:	2b4c      	cmp	r3, #76	; 0x4c
  405b42:	d105      	bne.n	405b50 <main+0x364>
  405b44:	2264      	movs	r2, #100	; 0x64
  405b46:	2100      	movs	r1, #0
  405b48:	2000      	movs	r0, #0
  405b4a:	4b90      	ldr	r3, [pc, #576]	; (405d8c <main+0x5a0>)
  405b4c:	4798      	blx	r3
  405b4e:	e14e      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'm' || bufferNOME[cont] == 'M') letraM(BLUE);
  405b50:	7d7b      	ldrb	r3, [r7, #21]
  405b52:	f107 0218 	add.w	r2, r7, #24
  405b56:	4413      	add	r3, r2
  405b58:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405b5c:	2b6d      	cmp	r3, #109	; 0x6d
  405b5e:	d007      	beq.n	405b70 <main+0x384>
  405b60:	7d7b      	ldrb	r3, [r7, #21]
  405b62:	f107 0218 	add.w	r2, r7, #24
  405b66:	4413      	add	r3, r2
  405b68:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405b6c:	2b4d      	cmp	r3, #77	; 0x4d
  405b6e:	d105      	bne.n	405b7c <main+0x390>
  405b70:	2264      	movs	r2, #100	; 0x64
  405b72:	2100      	movs	r1, #0
  405b74:	2000      	movs	r0, #0
  405b76:	4b86      	ldr	r3, [pc, #536]	; (405d90 <main+0x5a4>)
  405b78:	4798      	blx	r3
  405b7a:	e138      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'n' || bufferNOME[cont] == 'N') letraN(GREEN);
  405b7c:	7d7b      	ldrb	r3, [r7, #21]
  405b7e:	f107 0218 	add.w	r2, r7, #24
  405b82:	4413      	add	r3, r2
  405b84:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405b88:	2b6e      	cmp	r3, #110	; 0x6e
  405b8a:	d007      	beq.n	405b9c <main+0x3b0>
  405b8c:	7d7b      	ldrb	r3, [r7, #21]
  405b8e:	f107 0218 	add.w	r2, r7, #24
  405b92:	4413      	add	r3, r2
  405b94:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405b98:	2b4e      	cmp	r3, #78	; 0x4e
  405b9a:	d105      	bne.n	405ba8 <main+0x3bc>
  405b9c:	2200      	movs	r2, #0
  405b9e:	2164      	movs	r1, #100	; 0x64
  405ba0:	2000      	movs	r0, #0
  405ba2:	4b7c      	ldr	r3, [pc, #496]	; (405d94 <main+0x5a8>)
  405ba4:	4798      	blx	r3
  405ba6:	e122      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'o' || bufferNOME[cont] == 'O') letraO(GREEN);
  405ba8:	7d7b      	ldrb	r3, [r7, #21]
  405baa:	f107 0218 	add.w	r2, r7, #24
  405bae:	4413      	add	r3, r2
  405bb0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405bb4:	2b6f      	cmp	r3, #111	; 0x6f
  405bb6:	d007      	beq.n	405bc8 <main+0x3dc>
  405bb8:	7d7b      	ldrb	r3, [r7, #21]
  405bba:	f107 0218 	add.w	r2, r7, #24
  405bbe:	4413      	add	r3, r2
  405bc0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405bc4:	2b4f      	cmp	r3, #79	; 0x4f
  405bc6:	d105      	bne.n	405bd4 <main+0x3e8>
  405bc8:	2200      	movs	r2, #0
  405bca:	2164      	movs	r1, #100	; 0x64
  405bcc:	2000      	movs	r0, #0
  405bce:	4b72      	ldr	r3, [pc, #456]	; (405d98 <main+0x5ac>)
  405bd0:	4798      	blx	r3
  405bd2:	e10c      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'p' || bufferNOME[cont] == 'P') letraP(BLUE);
  405bd4:	7d7b      	ldrb	r3, [r7, #21]
  405bd6:	f107 0218 	add.w	r2, r7, #24
  405bda:	4413      	add	r3, r2
  405bdc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405be0:	2b70      	cmp	r3, #112	; 0x70
  405be2:	d007      	beq.n	405bf4 <main+0x408>
  405be4:	7d7b      	ldrb	r3, [r7, #21]
  405be6:	f107 0218 	add.w	r2, r7, #24
  405bea:	4413      	add	r3, r2
  405bec:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405bf0:	2b50      	cmp	r3, #80	; 0x50
  405bf2:	d105      	bne.n	405c00 <main+0x414>
  405bf4:	2264      	movs	r2, #100	; 0x64
  405bf6:	2100      	movs	r1, #0
  405bf8:	2000      	movs	r0, #0
  405bfa:	4b68      	ldr	r3, [pc, #416]	; (405d9c <main+0x5b0>)
  405bfc:	4798      	blx	r3
  405bfe:	e0f6      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'q' || bufferNOME[cont] == 'Q') letraQ(BLUE);
  405c00:	7d7b      	ldrb	r3, [r7, #21]
  405c02:	f107 0218 	add.w	r2, r7, #24
  405c06:	4413      	add	r3, r2
  405c08:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405c0c:	2b71      	cmp	r3, #113	; 0x71
  405c0e:	d007      	beq.n	405c20 <main+0x434>
  405c10:	7d7b      	ldrb	r3, [r7, #21]
  405c12:	f107 0218 	add.w	r2, r7, #24
  405c16:	4413      	add	r3, r2
  405c18:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405c1c:	2b51      	cmp	r3, #81	; 0x51
  405c1e:	d105      	bne.n	405c2c <main+0x440>
  405c20:	2264      	movs	r2, #100	; 0x64
  405c22:	2100      	movs	r1, #0
  405c24:	2000      	movs	r0, #0
  405c26:	4b5e      	ldr	r3, [pc, #376]	; (405da0 <main+0x5b4>)
  405c28:	4798      	blx	r3
  405c2a:	e0e0      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'r' || bufferNOME[cont] == 'R') letraR(BLUE);
  405c2c:	7d7b      	ldrb	r3, [r7, #21]
  405c2e:	f107 0218 	add.w	r2, r7, #24
  405c32:	4413      	add	r3, r2
  405c34:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405c38:	2b72      	cmp	r3, #114	; 0x72
  405c3a:	d007      	beq.n	405c4c <main+0x460>
  405c3c:	7d7b      	ldrb	r3, [r7, #21]
  405c3e:	f107 0218 	add.w	r2, r7, #24
  405c42:	4413      	add	r3, r2
  405c44:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405c48:	2b52      	cmp	r3, #82	; 0x52
  405c4a:	d105      	bne.n	405c58 <main+0x46c>
  405c4c:	2264      	movs	r2, #100	; 0x64
  405c4e:	2100      	movs	r1, #0
  405c50:	2000      	movs	r0, #0
  405c52:	4b54      	ldr	r3, [pc, #336]	; (405da4 <main+0x5b8>)
  405c54:	4798      	blx	r3
  405c56:	e0ca      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 's' || bufferNOME[cont] == 'S') letraS(BLUE);
  405c58:	7d7b      	ldrb	r3, [r7, #21]
  405c5a:	f107 0218 	add.w	r2, r7, #24
  405c5e:	4413      	add	r3, r2
  405c60:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405c64:	2b73      	cmp	r3, #115	; 0x73
  405c66:	d007      	beq.n	405c78 <main+0x48c>
  405c68:	7d7b      	ldrb	r3, [r7, #21]
  405c6a:	f107 0218 	add.w	r2, r7, #24
  405c6e:	4413      	add	r3, r2
  405c70:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405c74:	2b53      	cmp	r3, #83	; 0x53
  405c76:	d105      	bne.n	405c84 <main+0x498>
  405c78:	2264      	movs	r2, #100	; 0x64
  405c7a:	2100      	movs	r1, #0
  405c7c:	2000      	movs	r0, #0
  405c7e:	4b4a      	ldr	r3, [pc, #296]	; (405da8 <main+0x5bc>)
  405c80:	4798      	blx	r3
  405c82:	e0b4      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 't' || bufferNOME[cont] == 'T') letraT(BLUE);
  405c84:	7d7b      	ldrb	r3, [r7, #21]
  405c86:	f107 0218 	add.w	r2, r7, #24
  405c8a:	4413      	add	r3, r2
  405c8c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405c90:	2b74      	cmp	r3, #116	; 0x74
  405c92:	d007      	beq.n	405ca4 <main+0x4b8>
  405c94:	7d7b      	ldrb	r3, [r7, #21]
  405c96:	f107 0218 	add.w	r2, r7, #24
  405c9a:	4413      	add	r3, r2
  405c9c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405ca0:	2b54      	cmp	r3, #84	; 0x54
  405ca2:	d105      	bne.n	405cb0 <main+0x4c4>
  405ca4:	2264      	movs	r2, #100	; 0x64
  405ca6:	2100      	movs	r1, #0
  405ca8:	2000      	movs	r0, #0
  405caa:	4b40      	ldr	r3, [pc, #256]	; (405dac <main+0x5c0>)
  405cac:	4798      	blx	r3
  405cae:	e09e      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'u' || bufferNOME[cont] == 'U') letraU(BLUE);
  405cb0:	7d7b      	ldrb	r3, [r7, #21]
  405cb2:	f107 0218 	add.w	r2, r7, #24
  405cb6:	4413      	add	r3, r2
  405cb8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405cbc:	2b75      	cmp	r3, #117	; 0x75
  405cbe:	d007      	beq.n	405cd0 <main+0x4e4>
  405cc0:	7d7b      	ldrb	r3, [r7, #21]
  405cc2:	f107 0218 	add.w	r2, r7, #24
  405cc6:	4413      	add	r3, r2
  405cc8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405ccc:	2b55      	cmp	r3, #85	; 0x55
  405cce:	d105      	bne.n	405cdc <main+0x4f0>
  405cd0:	2264      	movs	r2, #100	; 0x64
  405cd2:	2100      	movs	r1, #0
  405cd4:	2000      	movs	r0, #0
  405cd6:	4b36      	ldr	r3, [pc, #216]	; (405db0 <main+0x5c4>)
  405cd8:	4798      	blx	r3
  405cda:	e088      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'v' || bufferNOME[cont] == 'V') letraV(GREEN);
  405cdc:	7d7b      	ldrb	r3, [r7, #21]
  405cde:	f107 0218 	add.w	r2, r7, #24
  405ce2:	4413      	add	r3, r2
  405ce4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405ce8:	2b76      	cmp	r3, #118	; 0x76
  405cea:	d007      	beq.n	405cfc <main+0x510>
  405cec:	7d7b      	ldrb	r3, [r7, #21]
  405cee:	f107 0218 	add.w	r2, r7, #24
  405cf2:	4413      	add	r3, r2
  405cf4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405cf8:	2b56      	cmp	r3, #86	; 0x56
  405cfa:	d105      	bne.n	405d08 <main+0x51c>
  405cfc:	2200      	movs	r2, #0
  405cfe:	2164      	movs	r1, #100	; 0x64
  405d00:	2000      	movs	r0, #0
  405d02:	4b2c      	ldr	r3, [pc, #176]	; (405db4 <main+0x5c8>)
  405d04:	4798      	blx	r3
  405d06:	e072      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'w' || bufferNOME[cont] == 'W') letraW(BLUE);
  405d08:	7d7b      	ldrb	r3, [r7, #21]
  405d0a:	f107 0218 	add.w	r2, r7, #24
  405d0e:	4413      	add	r3, r2
  405d10:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405d14:	2b77      	cmp	r3, #119	; 0x77
  405d16:	d007      	beq.n	405d28 <main+0x53c>
  405d18:	7d7b      	ldrb	r3, [r7, #21]
  405d1a:	f107 0218 	add.w	r2, r7, #24
  405d1e:	4413      	add	r3, r2
  405d20:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405d24:	2b57      	cmp	r3, #87	; 0x57
  405d26:	d105      	bne.n	405d34 <main+0x548>
  405d28:	2264      	movs	r2, #100	; 0x64
  405d2a:	2100      	movs	r1, #0
  405d2c:	2000      	movs	r0, #0
  405d2e:	4b22      	ldr	r3, [pc, #136]	; (405db8 <main+0x5cc>)
  405d30:	4798      	blx	r3
  405d32:	e05c      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'x' || bufferNOME[cont] == 'X') letraX(BLUE);
  405d34:	7d7b      	ldrb	r3, [r7, #21]
  405d36:	f107 0218 	add.w	r2, r7, #24
  405d3a:	4413      	add	r3, r2
  405d3c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405d40:	2b78      	cmp	r3, #120	; 0x78
  405d42:	d007      	beq.n	405d54 <main+0x568>
  405d44:	7d7b      	ldrb	r3, [r7, #21]
  405d46:	f107 0218 	add.w	r2, r7, #24
  405d4a:	4413      	add	r3, r2
  405d4c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405d50:	2b58      	cmp	r3, #88	; 0x58
  405d52:	d105      	bne.n	405d60 <main+0x574>
  405d54:	2264      	movs	r2, #100	; 0x64
  405d56:	2100      	movs	r1, #0
  405d58:	2000      	movs	r0, #0
  405d5a:	4b18      	ldr	r3, [pc, #96]	; (405dbc <main+0x5d0>)
  405d5c:	4798      	blx	r3
  405d5e:	e046      	b.n	405dee <main+0x602>
		else if(bufferNOME[cont] == 'y' || bufferNOME[cont] == 'Y') letraY(BLUE);
  405d60:	7d7b      	ldrb	r3, [r7, #21]
  405d62:	f107 0218 	add.w	r2, r7, #24
  405d66:	4413      	add	r3, r2
  405d68:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405d6c:	2b79      	cmp	r3, #121	; 0x79
  405d6e:	d007      	beq.n	405d80 <main+0x594>
  405d70:	7d7b      	ldrb	r3, [r7, #21]
  405d72:	f107 0218 	add.w	r2, r7, #24
  405d76:	4413      	add	r3, r2
  405d78:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405d7c:	2b59      	cmp	r3, #89	; 0x59
  405d7e:	d121      	bne.n	405dc4 <main+0x5d8>
  405d80:	2264      	movs	r2, #100	; 0x64
  405d82:	2100      	movs	r1, #0
  405d84:	2000      	movs	r0, #0
  405d86:	4b0e      	ldr	r3, [pc, #56]	; (405dc0 <main+0x5d4>)
  405d88:	4798      	blx	r3
  405d8a:	e030      	b.n	405dee <main+0x602>
  405d8c:	004030e9 	.word	0x004030e9
  405d90:	00403309 	.word	0x00403309
  405d94:	00403609 	.word	0x00403609
  405d98:	00403909 	.word	0x00403909
  405d9c:	00403bb5 	.word	0x00403bb5
  405da0:	00403e45 	.word	0x00403e45
  405da4:	004040e1 	.word	0x004040e1
  405da8:	004043a9 	.word	0x004043a9
  405dac:	0040461d 	.word	0x0040461d
  405db0:	00404859 	.word	0x00404859
  405db4:	00404b11 	.word	0x00404b11
  405db8:	00404da1 	.word	0x00404da1
  405dbc:	004050a1 	.word	0x004050a1
  405dc0:	0040533d 	.word	0x0040533d
		else if(bufferNOME[cont] == 'z' || bufferNOME[cont] == 'Z') letraZ(BLUE);
  405dc4:	7d7b      	ldrb	r3, [r7, #21]
  405dc6:	f107 0218 	add.w	r2, r7, #24
  405dca:	4413      	add	r3, r2
  405dcc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405dd0:	2b7a      	cmp	r3, #122	; 0x7a
  405dd2:	d007      	beq.n	405de4 <main+0x5f8>
  405dd4:	7d7b      	ldrb	r3, [r7, #21]
  405dd6:	f107 0218 	add.w	r2, r7, #24
  405dda:	4413      	add	r3, r2
  405ddc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
  405de0:	2b5a      	cmp	r3, #90	; 0x5a
  405de2:	d104      	bne.n	405dee <main+0x602>
  405de4:	2264      	movs	r2, #100	; 0x64
  405de6:	2100      	movs	r1, #0
  405de8:	2000      	movs	r0, #0
  405dea:	4b28      	ldr	r3, [pc, #160]	; (405e8c <main+0x6a0>)
  405dec:	4798      	blx	r3
		size--;
  405dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
  405df2:	b2db      	uxtb	r3, r3
  405df4:	3b01      	subs	r3, #1
  405df6:	b2db      	uxtb	r3, r3
  405df8:	75fb      	strb	r3, [r7, #23]
		cont++;
  405dfa:	7d7b      	ldrb	r3, [r7, #21]
  405dfc:	3301      	adds	r3, #1
  405dfe:	757b      	strb	r3, [r7, #21]
	while(size >= 0)
  405e00:	f997 3017 	ldrsb.w	r3, [r7, #23]
  405e04:	2b00      	cmp	r3, #0
  405e06:	f6bf ad73 	bge.w	4058f0 <main+0x104>
	}
	data_reset();
  405e0a:	4b21      	ldr	r3, [pc, #132]	; (405e90 <main+0x6a4>)
  405e0c:	4798      	blx	r3
	delay_s(1);
  405e0e:	4b21      	ldr	r3, [pc, #132]	; (405e94 <main+0x6a8>)
  405e10:	4798      	blx	r3
  405e12:	4603      	mov	r3, r0
  405e14:	4619      	mov	r1, r3
  405e16:	f04f 0200 	mov.w	r2, #0
  405e1a:	460b      	mov	r3, r1
  405e1c:	4614      	mov	r4, r2
  405e1e:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  405e22:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  405e26:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  405e2a:	4653      	mov	r3, sl
  405e2c:	465c      	mov	r4, fp
  405e2e:	1a5b      	subs	r3, r3, r1
  405e30:	eb64 0402 	sbc.w	r4, r4, r2
  405e34:	ea4f 0984 	mov.w	r9, r4, lsl #2
  405e38:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  405e3c:	ea4f 0883 	mov.w	r8, r3, lsl #2
  405e40:	4643      	mov	r3, r8
  405e42:	464c      	mov	r4, r9
  405e44:	185b      	adds	r3, r3, r1
  405e46:	eb44 0402 	adc.w	r4, r4, r2
  405e4a:	00e2      	lsls	r2, r4, #3
  405e4c:	607a      	str	r2, [r7, #4]
  405e4e:	687a      	ldr	r2, [r7, #4]
  405e50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
  405e54:	607a      	str	r2, [r7, #4]
  405e56:	00db      	lsls	r3, r3, #3
  405e58:	603b      	str	r3, [r7, #0]
  405e5a:	e9d7 3400 	ldrd	r3, r4, [r7]
  405e5e:	4619      	mov	r1, r3
  405e60:	4622      	mov	r2, r4
  405e62:	f241 732b 	movw	r3, #5931	; 0x172b
  405e66:	f04f 0400 	mov.w	r4, #0
  405e6a:	18cd      	adds	r5, r1, r3
  405e6c:	eb42 0604 	adc.w	r6, r2, r4
  405e70:	4628      	mov	r0, r5
  405e72:	4631      	mov	r1, r6
  405e74:	4c08      	ldr	r4, [pc, #32]	; (405e98 <main+0x6ac>)
  405e76:	f241 722c 	movw	r2, #5932	; 0x172c
  405e7a:	f04f 0300 	mov.w	r3, #0
  405e7e:	47a0      	blx	r4
  405e80:	4603      	mov	r3, r0
  405e82:	460c      	mov	r4, r1
  405e84:	4618      	mov	r0, r3
  405e86:	4b05      	ldr	r3, [pc, #20]	; (405e9c <main+0x6b0>)
  405e88:	4798      	blx	r3
	while(1){
  405e8a:	e4e3      	b.n	405854 <main+0x68>
  405e8c:	00405595 	.word	0x00405595
  405e90:	00401331 	.word	0x00401331
  405e94:	00401255 	.word	0x00401255
  405e98:	00405ea1 	.word	0x00405ea1
  405e9c:	20400001 	.word	0x20400001

00405ea0 <__aeabi_uldivmod>:
  405ea0:	b953      	cbnz	r3, 405eb8 <__aeabi_uldivmod+0x18>
  405ea2:	b94a      	cbnz	r2, 405eb8 <__aeabi_uldivmod+0x18>
  405ea4:	2900      	cmp	r1, #0
  405ea6:	bf08      	it	eq
  405ea8:	2800      	cmpeq	r0, #0
  405eaa:	bf1c      	itt	ne
  405eac:	f04f 31ff 	movne.w	r1, #4294967295
  405eb0:	f04f 30ff 	movne.w	r0, #4294967295
  405eb4:	f000 b97a 	b.w	4061ac <__aeabi_idiv0>
  405eb8:	f1ad 0c08 	sub.w	ip, sp, #8
  405ebc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  405ec0:	f000 f806 	bl	405ed0 <__udivmoddi4>
  405ec4:	f8dd e004 	ldr.w	lr, [sp, #4]
  405ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405ecc:	b004      	add	sp, #16
  405ece:	4770      	bx	lr

00405ed0 <__udivmoddi4>:
  405ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405ed4:	468c      	mov	ip, r1
  405ed6:	460d      	mov	r5, r1
  405ed8:	4604      	mov	r4, r0
  405eda:	9e08      	ldr	r6, [sp, #32]
  405edc:	2b00      	cmp	r3, #0
  405ede:	d151      	bne.n	405f84 <__udivmoddi4+0xb4>
  405ee0:	428a      	cmp	r2, r1
  405ee2:	4617      	mov	r7, r2
  405ee4:	d96d      	bls.n	405fc2 <__udivmoddi4+0xf2>
  405ee6:	fab2 fe82 	clz	lr, r2
  405eea:	f1be 0f00 	cmp.w	lr, #0
  405eee:	d00b      	beq.n	405f08 <__udivmoddi4+0x38>
  405ef0:	f1ce 0c20 	rsb	ip, lr, #32
  405ef4:	fa01 f50e 	lsl.w	r5, r1, lr
  405ef8:	fa20 fc0c 	lsr.w	ip, r0, ip
  405efc:	fa02 f70e 	lsl.w	r7, r2, lr
  405f00:	ea4c 0c05 	orr.w	ip, ip, r5
  405f04:	fa00 f40e 	lsl.w	r4, r0, lr
  405f08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  405f0c:	0c25      	lsrs	r5, r4, #16
  405f0e:	fbbc f8fa 	udiv	r8, ip, sl
  405f12:	fa1f f987 	uxth.w	r9, r7
  405f16:	fb0a cc18 	mls	ip, sl, r8, ip
  405f1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  405f1e:	fb08 f309 	mul.w	r3, r8, r9
  405f22:	42ab      	cmp	r3, r5
  405f24:	d90a      	bls.n	405f3c <__udivmoddi4+0x6c>
  405f26:	19ed      	adds	r5, r5, r7
  405f28:	f108 32ff 	add.w	r2, r8, #4294967295
  405f2c:	f080 8123 	bcs.w	406176 <__udivmoddi4+0x2a6>
  405f30:	42ab      	cmp	r3, r5
  405f32:	f240 8120 	bls.w	406176 <__udivmoddi4+0x2a6>
  405f36:	f1a8 0802 	sub.w	r8, r8, #2
  405f3a:	443d      	add	r5, r7
  405f3c:	1aed      	subs	r5, r5, r3
  405f3e:	b2a4      	uxth	r4, r4
  405f40:	fbb5 f0fa 	udiv	r0, r5, sl
  405f44:	fb0a 5510 	mls	r5, sl, r0, r5
  405f48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  405f4c:	fb00 f909 	mul.w	r9, r0, r9
  405f50:	45a1      	cmp	r9, r4
  405f52:	d909      	bls.n	405f68 <__udivmoddi4+0x98>
  405f54:	19e4      	adds	r4, r4, r7
  405f56:	f100 33ff 	add.w	r3, r0, #4294967295
  405f5a:	f080 810a 	bcs.w	406172 <__udivmoddi4+0x2a2>
  405f5e:	45a1      	cmp	r9, r4
  405f60:	f240 8107 	bls.w	406172 <__udivmoddi4+0x2a2>
  405f64:	3802      	subs	r0, #2
  405f66:	443c      	add	r4, r7
  405f68:	eba4 0409 	sub.w	r4, r4, r9
  405f6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405f70:	2100      	movs	r1, #0
  405f72:	2e00      	cmp	r6, #0
  405f74:	d061      	beq.n	40603a <__udivmoddi4+0x16a>
  405f76:	fa24 f40e 	lsr.w	r4, r4, lr
  405f7a:	2300      	movs	r3, #0
  405f7c:	6034      	str	r4, [r6, #0]
  405f7e:	6073      	str	r3, [r6, #4]
  405f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405f84:	428b      	cmp	r3, r1
  405f86:	d907      	bls.n	405f98 <__udivmoddi4+0xc8>
  405f88:	2e00      	cmp	r6, #0
  405f8a:	d054      	beq.n	406036 <__udivmoddi4+0x166>
  405f8c:	2100      	movs	r1, #0
  405f8e:	e886 0021 	stmia.w	r6, {r0, r5}
  405f92:	4608      	mov	r0, r1
  405f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405f98:	fab3 f183 	clz	r1, r3
  405f9c:	2900      	cmp	r1, #0
  405f9e:	f040 808e 	bne.w	4060be <__udivmoddi4+0x1ee>
  405fa2:	42ab      	cmp	r3, r5
  405fa4:	d302      	bcc.n	405fac <__udivmoddi4+0xdc>
  405fa6:	4282      	cmp	r2, r0
  405fa8:	f200 80fa 	bhi.w	4061a0 <__udivmoddi4+0x2d0>
  405fac:	1a84      	subs	r4, r0, r2
  405fae:	eb65 0503 	sbc.w	r5, r5, r3
  405fb2:	2001      	movs	r0, #1
  405fb4:	46ac      	mov	ip, r5
  405fb6:	2e00      	cmp	r6, #0
  405fb8:	d03f      	beq.n	40603a <__udivmoddi4+0x16a>
  405fba:	e886 1010 	stmia.w	r6, {r4, ip}
  405fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405fc2:	b912      	cbnz	r2, 405fca <__udivmoddi4+0xfa>
  405fc4:	2701      	movs	r7, #1
  405fc6:	fbb7 f7f2 	udiv	r7, r7, r2
  405fca:	fab7 fe87 	clz	lr, r7
  405fce:	f1be 0f00 	cmp.w	lr, #0
  405fd2:	d134      	bne.n	40603e <__udivmoddi4+0x16e>
  405fd4:	1beb      	subs	r3, r5, r7
  405fd6:	0c3a      	lsrs	r2, r7, #16
  405fd8:	fa1f fc87 	uxth.w	ip, r7
  405fdc:	2101      	movs	r1, #1
  405fde:	fbb3 f8f2 	udiv	r8, r3, r2
  405fe2:	0c25      	lsrs	r5, r4, #16
  405fe4:	fb02 3318 	mls	r3, r2, r8, r3
  405fe8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405fec:	fb0c f308 	mul.w	r3, ip, r8
  405ff0:	42ab      	cmp	r3, r5
  405ff2:	d907      	bls.n	406004 <__udivmoddi4+0x134>
  405ff4:	19ed      	adds	r5, r5, r7
  405ff6:	f108 30ff 	add.w	r0, r8, #4294967295
  405ffa:	d202      	bcs.n	406002 <__udivmoddi4+0x132>
  405ffc:	42ab      	cmp	r3, r5
  405ffe:	f200 80d1 	bhi.w	4061a4 <__udivmoddi4+0x2d4>
  406002:	4680      	mov	r8, r0
  406004:	1aed      	subs	r5, r5, r3
  406006:	b2a3      	uxth	r3, r4
  406008:	fbb5 f0f2 	udiv	r0, r5, r2
  40600c:	fb02 5510 	mls	r5, r2, r0, r5
  406010:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406014:	fb0c fc00 	mul.w	ip, ip, r0
  406018:	45a4      	cmp	ip, r4
  40601a:	d907      	bls.n	40602c <__udivmoddi4+0x15c>
  40601c:	19e4      	adds	r4, r4, r7
  40601e:	f100 33ff 	add.w	r3, r0, #4294967295
  406022:	d202      	bcs.n	40602a <__udivmoddi4+0x15a>
  406024:	45a4      	cmp	ip, r4
  406026:	f200 80b8 	bhi.w	40619a <__udivmoddi4+0x2ca>
  40602a:	4618      	mov	r0, r3
  40602c:	eba4 040c 	sub.w	r4, r4, ip
  406030:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406034:	e79d      	b.n	405f72 <__udivmoddi4+0xa2>
  406036:	4631      	mov	r1, r6
  406038:	4630      	mov	r0, r6
  40603a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40603e:	f1ce 0420 	rsb	r4, lr, #32
  406042:	fa05 f30e 	lsl.w	r3, r5, lr
  406046:	fa07 f70e 	lsl.w	r7, r7, lr
  40604a:	fa20 f804 	lsr.w	r8, r0, r4
  40604e:	0c3a      	lsrs	r2, r7, #16
  406050:	fa25 f404 	lsr.w	r4, r5, r4
  406054:	ea48 0803 	orr.w	r8, r8, r3
  406058:	fbb4 f1f2 	udiv	r1, r4, r2
  40605c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406060:	fb02 4411 	mls	r4, r2, r1, r4
  406064:	fa1f fc87 	uxth.w	ip, r7
  406068:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40606c:	fb01 f30c 	mul.w	r3, r1, ip
  406070:	42ab      	cmp	r3, r5
  406072:	fa00 f40e 	lsl.w	r4, r0, lr
  406076:	d909      	bls.n	40608c <__udivmoddi4+0x1bc>
  406078:	19ed      	adds	r5, r5, r7
  40607a:	f101 30ff 	add.w	r0, r1, #4294967295
  40607e:	f080 808a 	bcs.w	406196 <__udivmoddi4+0x2c6>
  406082:	42ab      	cmp	r3, r5
  406084:	f240 8087 	bls.w	406196 <__udivmoddi4+0x2c6>
  406088:	3902      	subs	r1, #2
  40608a:	443d      	add	r5, r7
  40608c:	1aeb      	subs	r3, r5, r3
  40608e:	fa1f f588 	uxth.w	r5, r8
  406092:	fbb3 f0f2 	udiv	r0, r3, r2
  406096:	fb02 3310 	mls	r3, r2, r0, r3
  40609a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40609e:	fb00 f30c 	mul.w	r3, r0, ip
  4060a2:	42ab      	cmp	r3, r5
  4060a4:	d907      	bls.n	4060b6 <__udivmoddi4+0x1e6>
  4060a6:	19ed      	adds	r5, r5, r7
  4060a8:	f100 38ff 	add.w	r8, r0, #4294967295
  4060ac:	d26f      	bcs.n	40618e <__udivmoddi4+0x2be>
  4060ae:	42ab      	cmp	r3, r5
  4060b0:	d96d      	bls.n	40618e <__udivmoddi4+0x2be>
  4060b2:	3802      	subs	r0, #2
  4060b4:	443d      	add	r5, r7
  4060b6:	1aeb      	subs	r3, r5, r3
  4060b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4060bc:	e78f      	b.n	405fde <__udivmoddi4+0x10e>
  4060be:	f1c1 0720 	rsb	r7, r1, #32
  4060c2:	fa22 f807 	lsr.w	r8, r2, r7
  4060c6:	408b      	lsls	r3, r1
  4060c8:	fa05 f401 	lsl.w	r4, r5, r1
  4060cc:	ea48 0303 	orr.w	r3, r8, r3
  4060d0:	fa20 fe07 	lsr.w	lr, r0, r7
  4060d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4060d8:	40fd      	lsrs	r5, r7
  4060da:	ea4e 0e04 	orr.w	lr, lr, r4
  4060de:	fbb5 f9fc 	udiv	r9, r5, ip
  4060e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4060e6:	fb0c 5519 	mls	r5, ip, r9, r5
  4060ea:	fa1f f883 	uxth.w	r8, r3
  4060ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4060f2:	fb09 f408 	mul.w	r4, r9, r8
  4060f6:	42ac      	cmp	r4, r5
  4060f8:	fa02 f201 	lsl.w	r2, r2, r1
  4060fc:	fa00 fa01 	lsl.w	sl, r0, r1
  406100:	d908      	bls.n	406114 <__udivmoddi4+0x244>
  406102:	18ed      	adds	r5, r5, r3
  406104:	f109 30ff 	add.w	r0, r9, #4294967295
  406108:	d243      	bcs.n	406192 <__udivmoddi4+0x2c2>
  40610a:	42ac      	cmp	r4, r5
  40610c:	d941      	bls.n	406192 <__udivmoddi4+0x2c2>
  40610e:	f1a9 0902 	sub.w	r9, r9, #2
  406112:	441d      	add	r5, r3
  406114:	1b2d      	subs	r5, r5, r4
  406116:	fa1f fe8e 	uxth.w	lr, lr
  40611a:	fbb5 f0fc 	udiv	r0, r5, ip
  40611e:	fb0c 5510 	mls	r5, ip, r0, r5
  406122:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406126:	fb00 f808 	mul.w	r8, r0, r8
  40612a:	45a0      	cmp	r8, r4
  40612c:	d907      	bls.n	40613e <__udivmoddi4+0x26e>
  40612e:	18e4      	adds	r4, r4, r3
  406130:	f100 35ff 	add.w	r5, r0, #4294967295
  406134:	d229      	bcs.n	40618a <__udivmoddi4+0x2ba>
  406136:	45a0      	cmp	r8, r4
  406138:	d927      	bls.n	40618a <__udivmoddi4+0x2ba>
  40613a:	3802      	subs	r0, #2
  40613c:	441c      	add	r4, r3
  40613e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406142:	eba4 0408 	sub.w	r4, r4, r8
  406146:	fba0 8902 	umull	r8, r9, r0, r2
  40614a:	454c      	cmp	r4, r9
  40614c:	46c6      	mov	lr, r8
  40614e:	464d      	mov	r5, r9
  406150:	d315      	bcc.n	40617e <__udivmoddi4+0x2ae>
  406152:	d012      	beq.n	40617a <__udivmoddi4+0x2aa>
  406154:	b156      	cbz	r6, 40616c <__udivmoddi4+0x29c>
  406156:	ebba 030e 	subs.w	r3, sl, lr
  40615a:	eb64 0405 	sbc.w	r4, r4, r5
  40615e:	fa04 f707 	lsl.w	r7, r4, r7
  406162:	40cb      	lsrs	r3, r1
  406164:	431f      	orrs	r7, r3
  406166:	40cc      	lsrs	r4, r1
  406168:	6037      	str	r7, [r6, #0]
  40616a:	6074      	str	r4, [r6, #4]
  40616c:	2100      	movs	r1, #0
  40616e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406172:	4618      	mov	r0, r3
  406174:	e6f8      	b.n	405f68 <__udivmoddi4+0x98>
  406176:	4690      	mov	r8, r2
  406178:	e6e0      	b.n	405f3c <__udivmoddi4+0x6c>
  40617a:	45c2      	cmp	sl, r8
  40617c:	d2ea      	bcs.n	406154 <__udivmoddi4+0x284>
  40617e:	ebb8 0e02 	subs.w	lr, r8, r2
  406182:	eb69 0503 	sbc.w	r5, r9, r3
  406186:	3801      	subs	r0, #1
  406188:	e7e4      	b.n	406154 <__udivmoddi4+0x284>
  40618a:	4628      	mov	r0, r5
  40618c:	e7d7      	b.n	40613e <__udivmoddi4+0x26e>
  40618e:	4640      	mov	r0, r8
  406190:	e791      	b.n	4060b6 <__udivmoddi4+0x1e6>
  406192:	4681      	mov	r9, r0
  406194:	e7be      	b.n	406114 <__udivmoddi4+0x244>
  406196:	4601      	mov	r1, r0
  406198:	e778      	b.n	40608c <__udivmoddi4+0x1bc>
  40619a:	3802      	subs	r0, #2
  40619c:	443c      	add	r4, r7
  40619e:	e745      	b.n	40602c <__udivmoddi4+0x15c>
  4061a0:	4608      	mov	r0, r1
  4061a2:	e708      	b.n	405fb6 <__udivmoddi4+0xe6>
  4061a4:	f1a8 0802 	sub.w	r8, r8, #2
  4061a8:	443d      	add	r5, r7
  4061aa:	e72b      	b.n	406004 <__udivmoddi4+0x134>

004061ac <__aeabi_idiv0>:
  4061ac:	4770      	bx	lr
  4061ae:	bf00      	nop

004061b0 <__libc_init_array>:
  4061b0:	b570      	push	{r4, r5, r6, lr}
  4061b2:	4e0f      	ldr	r6, [pc, #60]	; (4061f0 <__libc_init_array+0x40>)
  4061b4:	4d0f      	ldr	r5, [pc, #60]	; (4061f4 <__libc_init_array+0x44>)
  4061b6:	1b76      	subs	r6, r6, r5
  4061b8:	10b6      	asrs	r6, r6, #2
  4061ba:	bf18      	it	ne
  4061bc:	2400      	movne	r4, #0
  4061be:	d005      	beq.n	4061cc <__libc_init_array+0x1c>
  4061c0:	3401      	adds	r4, #1
  4061c2:	f855 3b04 	ldr.w	r3, [r5], #4
  4061c6:	4798      	blx	r3
  4061c8:	42a6      	cmp	r6, r4
  4061ca:	d1f9      	bne.n	4061c0 <__libc_init_array+0x10>
  4061cc:	4e0a      	ldr	r6, [pc, #40]	; (4061f8 <__libc_init_array+0x48>)
  4061ce:	4d0b      	ldr	r5, [pc, #44]	; (4061fc <__libc_init_array+0x4c>)
  4061d0:	1b76      	subs	r6, r6, r5
  4061d2:	f000 f8ab 	bl	40632c <_init>
  4061d6:	10b6      	asrs	r6, r6, #2
  4061d8:	bf18      	it	ne
  4061da:	2400      	movne	r4, #0
  4061dc:	d006      	beq.n	4061ec <__libc_init_array+0x3c>
  4061de:	3401      	adds	r4, #1
  4061e0:	f855 3b04 	ldr.w	r3, [r5], #4
  4061e4:	4798      	blx	r3
  4061e6:	42a6      	cmp	r6, r4
  4061e8:	d1f9      	bne.n	4061de <__libc_init_array+0x2e>
  4061ea:	bd70      	pop	{r4, r5, r6, pc}
  4061ec:	bd70      	pop	{r4, r5, r6, pc}
  4061ee:	bf00      	nop
  4061f0:	00406338 	.word	0x00406338
  4061f4:	00406338 	.word	0x00406338
  4061f8:	00406340 	.word	0x00406340
  4061fc:	00406338 	.word	0x00406338

00406200 <register_fini>:
  406200:	4b02      	ldr	r3, [pc, #8]	; (40620c <register_fini+0xc>)
  406202:	b113      	cbz	r3, 40620a <register_fini+0xa>
  406204:	4802      	ldr	r0, [pc, #8]	; (406210 <register_fini+0x10>)
  406206:	f000 b805 	b.w	406214 <atexit>
  40620a:	4770      	bx	lr
  40620c:	00000000 	.word	0x00000000
  406210:	00406221 	.word	0x00406221

00406214 <atexit>:
  406214:	2300      	movs	r3, #0
  406216:	4601      	mov	r1, r0
  406218:	461a      	mov	r2, r3
  40621a:	4618      	mov	r0, r3
  40621c:	f000 b81e 	b.w	40625c <__register_exitproc>

00406220 <__libc_fini_array>:
  406220:	b538      	push	{r3, r4, r5, lr}
  406222:	4c0a      	ldr	r4, [pc, #40]	; (40624c <__libc_fini_array+0x2c>)
  406224:	4d0a      	ldr	r5, [pc, #40]	; (406250 <__libc_fini_array+0x30>)
  406226:	1b64      	subs	r4, r4, r5
  406228:	10a4      	asrs	r4, r4, #2
  40622a:	d00a      	beq.n	406242 <__libc_fini_array+0x22>
  40622c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406230:	3b01      	subs	r3, #1
  406232:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406236:	3c01      	subs	r4, #1
  406238:	f855 3904 	ldr.w	r3, [r5], #-4
  40623c:	4798      	blx	r3
  40623e:	2c00      	cmp	r4, #0
  406240:	d1f9      	bne.n	406236 <__libc_fini_array+0x16>
  406242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406246:	f000 b87b 	b.w	406340 <_fini>
  40624a:	bf00      	nop
  40624c:	00406350 	.word	0x00406350
  406250:	0040634c 	.word	0x0040634c

00406254 <__retarget_lock_acquire_recursive>:
  406254:	4770      	bx	lr
  406256:	bf00      	nop

00406258 <__retarget_lock_release_recursive>:
  406258:	4770      	bx	lr
  40625a:	bf00      	nop

0040625c <__register_exitproc>:
  40625c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406260:	4d2c      	ldr	r5, [pc, #176]	; (406314 <__register_exitproc+0xb8>)
  406262:	4606      	mov	r6, r0
  406264:	6828      	ldr	r0, [r5, #0]
  406266:	4698      	mov	r8, r3
  406268:	460f      	mov	r7, r1
  40626a:	4691      	mov	r9, r2
  40626c:	f7ff fff2 	bl	406254 <__retarget_lock_acquire_recursive>
  406270:	4b29      	ldr	r3, [pc, #164]	; (406318 <__register_exitproc+0xbc>)
  406272:	681c      	ldr	r4, [r3, #0]
  406274:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406278:	2b00      	cmp	r3, #0
  40627a:	d03e      	beq.n	4062fa <__register_exitproc+0x9e>
  40627c:	685a      	ldr	r2, [r3, #4]
  40627e:	2a1f      	cmp	r2, #31
  406280:	dc1c      	bgt.n	4062bc <__register_exitproc+0x60>
  406282:	f102 0e01 	add.w	lr, r2, #1
  406286:	b176      	cbz	r6, 4062a6 <__register_exitproc+0x4a>
  406288:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40628c:	2401      	movs	r4, #1
  40628e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  406292:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406296:	4094      	lsls	r4, r2
  406298:	4320      	orrs	r0, r4
  40629a:	2e02      	cmp	r6, #2
  40629c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4062a0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4062a4:	d023      	beq.n	4062ee <__register_exitproc+0x92>
  4062a6:	3202      	adds	r2, #2
  4062a8:	f8c3 e004 	str.w	lr, [r3, #4]
  4062ac:	6828      	ldr	r0, [r5, #0]
  4062ae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4062b2:	f7ff ffd1 	bl	406258 <__retarget_lock_release_recursive>
  4062b6:	2000      	movs	r0, #0
  4062b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4062bc:	4b17      	ldr	r3, [pc, #92]	; (40631c <__register_exitproc+0xc0>)
  4062be:	b30b      	cbz	r3, 406304 <__register_exitproc+0xa8>
  4062c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4062c4:	f3af 8000 	nop.w
  4062c8:	4603      	mov	r3, r0
  4062ca:	b1d8      	cbz	r0, 406304 <__register_exitproc+0xa8>
  4062cc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4062d0:	6002      	str	r2, [r0, #0]
  4062d2:	2100      	movs	r1, #0
  4062d4:	6041      	str	r1, [r0, #4]
  4062d6:	460a      	mov	r2, r1
  4062d8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4062dc:	f04f 0e01 	mov.w	lr, #1
  4062e0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4062e4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4062e8:	2e00      	cmp	r6, #0
  4062ea:	d0dc      	beq.n	4062a6 <__register_exitproc+0x4a>
  4062ec:	e7cc      	b.n	406288 <__register_exitproc+0x2c>
  4062ee:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4062f2:	430c      	orrs	r4, r1
  4062f4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4062f8:	e7d5      	b.n	4062a6 <__register_exitproc+0x4a>
  4062fa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4062fe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  406302:	e7bb      	b.n	40627c <__register_exitproc+0x20>
  406304:	6828      	ldr	r0, [r5, #0]
  406306:	f7ff ffa7 	bl	406258 <__retarget_lock_release_recursive>
  40630a:	f04f 30ff 	mov.w	r0, #4294967295
  40630e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406312:	bf00      	nop
  406314:	20400438 	.word	0x20400438
  406318:	00406328 	.word	0x00406328
  40631c:	00000000 	.word	0x00000000
  406320:	564d4542 	.word	0x564d4542
  406324:	4f444e49 	.word	0x4f444e49

00406328 <_global_impure_ptr>:
  406328:	20400010                                ..@ 

0040632c <_init>:
  40632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40632e:	bf00      	nop
  406330:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406332:	bc08      	pop	{r3}
  406334:	469e      	mov	lr, r3
  406336:	4770      	bx	lr

00406338 <__init_array_start>:
  406338:	00406201 	.word	0x00406201

0040633c <__frame_dummy_init_array_entry>:
  40633c:	00400165                                e.@.

00406340 <_fini>:
  406340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406342:	bf00      	nop
  406344:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406346:	bc08      	pop	{r3}
  406348:	469e      	mov	lr, r3
  40634a:	4770      	bx	lr

0040634c <__fini_array_start>:
  40634c:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <impure_data>:
20400010:	0000 0000 02fc 2040 0364 2040 03cc 2040     ......@ d.@ ..@ 
	...
204000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400438 <__atexit_recursive_mutex>:
20400438:	0548 2040                                   H.@ 
